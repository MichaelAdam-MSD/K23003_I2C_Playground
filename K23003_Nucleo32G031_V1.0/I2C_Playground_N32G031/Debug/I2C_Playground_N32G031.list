
I2C_Playground_N32G031.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000bc  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000036d0  080000bc  080000bc  000100bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000e8  0800378c  0800378c  0001378c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003874  08003874  0002005c  2**0
                  CONTENTS
  4 .ARM          00000008  08003874  08003874  00013874  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800387c  0800387c  0002005c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800387c  0800387c  0001387c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003880  08003880  00013880  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000005c  20000000  08003884  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000002b8  2000005c  080038e0  0002005c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000314  080038e0  00020314  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  0002005c  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020084  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000cdd3  00000000  00000000  000200c7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00001c68  00000000  00000000  0002ce9a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000a90  00000000  00000000  0002eb08  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 0000083c  00000000  00000000  0002f598  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00016606  00000000  00000000  0002fdd4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000e86e  00000000  00000000  000463da  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0008b6b4  00000000  00000000  00054c48  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00002a28  00000000  00000000  000e02fc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000072  00000000  00000000  000e2d24  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000bc <__do_global_dtors_aux>:
 80000bc:	b510      	push	{r4, lr}
 80000be:	4c06      	ldr	r4, [pc, #24]	; (80000d8 <__do_global_dtors_aux+0x1c>)
 80000c0:	7823      	ldrb	r3, [r4, #0]
 80000c2:	2b00      	cmp	r3, #0
 80000c4:	d107      	bne.n	80000d6 <__do_global_dtors_aux+0x1a>
 80000c6:	4b05      	ldr	r3, [pc, #20]	; (80000dc <__do_global_dtors_aux+0x20>)
 80000c8:	2b00      	cmp	r3, #0
 80000ca:	d002      	beq.n	80000d2 <__do_global_dtors_aux+0x16>
 80000cc:	4804      	ldr	r0, [pc, #16]	; (80000e0 <__do_global_dtors_aux+0x24>)
 80000ce:	e000      	b.n	80000d2 <__do_global_dtors_aux+0x16>
 80000d0:	bf00      	nop
 80000d2:	2301      	movs	r3, #1
 80000d4:	7023      	strb	r3, [r4, #0]
 80000d6:	bd10      	pop	{r4, pc}
 80000d8:	2000005c 	.word	0x2000005c
 80000dc:	00000000 	.word	0x00000000
 80000e0:	08003774 	.word	0x08003774

080000e4 <frame_dummy>:
 80000e4:	4b04      	ldr	r3, [pc, #16]	; (80000f8 <frame_dummy+0x14>)
 80000e6:	b510      	push	{r4, lr}
 80000e8:	2b00      	cmp	r3, #0
 80000ea:	d003      	beq.n	80000f4 <frame_dummy+0x10>
 80000ec:	4903      	ldr	r1, [pc, #12]	; (80000fc <frame_dummy+0x18>)
 80000ee:	4804      	ldr	r0, [pc, #16]	; (8000100 <frame_dummy+0x1c>)
 80000f0:	e000      	b.n	80000f4 <frame_dummy+0x10>
 80000f2:	bf00      	nop
 80000f4:	bd10      	pop	{r4, pc}
 80000f6:	46c0      	nop			; (mov r8, r8)
 80000f8:	00000000 	.word	0x00000000
 80000fc:	20000060 	.word	0x20000060
 8000100:	08003774 	.word	0x08003774

08000104 <__gnu_thumb1_case_shi>:
 8000104:	b403      	push	{r0, r1}
 8000106:	4671      	mov	r1, lr
 8000108:	0849      	lsrs	r1, r1, #1
 800010a:	0040      	lsls	r0, r0, #1
 800010c:	0049      	lsls	r1, r1, #1
 800010e:	5e09      	ldrsh	r1, [r1, r0]
 8000110:	0049      	lsls	r1, r1, #1
 8000112:	448e      	add	lr, r1
 8000114:	bc03      	pop	{r0, r1}
 8000116:	4770      	bx	lr

08000118 <__udivsi3>:
 8000118:	2200      	movs	r2, #0
 800011a:	0843      	lsrs	r3, r0, #1
 800011c:	428b      	cmp	r3, r1
 800011e:	d374      	bcc.n	800020a <__udivsi3+0xf2>
 8000120:	0903      	lsrs	r3, r0, #4
 8000122:	428b      	cmp	r3, r1
 8000124:	d35f      	bcc.n	80001e6 <__udivsi3+0xce>
 8000126:	0a03      	lsrs	r3, r0, #8
 8000128:	428b      	cmp	r3, r1
 800012a:	d344      	bcc.n	80001b6 <__udivsi3+0x9e>
 800012c:	0b03      	lsrs	r3, r0, #12
 800012e:	428b      	cmp	r3, r1
 8000130:	d328      	bcc.n	8000184 <__udivsi3+0x6c>
 8000132:	0c03      	lsrs	r3, r0, #16
 8000134:	428b      	cmp	r3, r1
 8000136:	d30d      	bcc.n	8000154 <__udivsi3+0x3c>
 8000138:	22ff      	movs	r2, #255	; 0xff
 800013a:	0209      	lsls	r1, r1, #8
 800013c:	ba12      	rev	r2, r2
 800013e:	0c03      	lsrs	r3, r0, #16
 8000140:	428b      	cmp	r3, r1
 8000142:	d302      	bcc.n	800014a <__udivsi3+0x32>
 8000144:	1212      	asrs	r2, r2, #8
 8000146:	0209      	lsls	r1, r1, #8
 8000148:	d065      	beq.n	8000216 <__udivsi3+0xfe>
 800014a:	0b03      	lsrs	r3, r0, #12
 800014c:	428b      	cmp	r3, r1
 800014e:	d319      	bcc.n	8000184 <__udivsi3+0x6c>
 8000150:	e000      	b.n	8000154 <__udivsi3+0x3c>
 8000152:	0a09      	lsrs	r1, r1, #8
 8000154:	0bc3      	lsrs	r3, r0, #15
 8000156:	428b      	cmp	r3, r1
 8000158:	d301      	bcc.n	800015e <__udivsi3+0x46>
 800015a:	03cb      	lsls	r3, r1, #15
 800015c:	1ac0      	subs	r0, r0, r3
 800015e:	4152      	adcs	r2, r2
 8000160:	0b83      	lsrs	r3, r0, #14
 8000162:	428b      	cmp	r3, r1
 8000164:	d301      	bcc.n	800016a <__udivsi3+0x52>
 8000166:	038b      	lsls	r3, r1, #14
 8000168:	1ac0      	subs	r0, r0, r3
 800016a:	4152      	adcs	r2, r2
 800016c:	0b43      	lsrs	r3, r0, #13
 800016e:	428b      	cmp	r3, r1
 8000170:	d301      	bcc.n	8000176 <__udivsi3+0x5e>
 8000172:	034b      	lsls	r3, r1, #13
 8000174:	1ac0      	subs	r0, r0, r3
 8000176:	4152      	adcs	r2, r2
 8000178:	0b03      	lsrs	r3, r0, #12
 800017a:	428b      	cmp	r3, r1
 800017c:	d301      	bcc.n	8000182 <__udivsi3+0x6a>
 800017e:	030b      	lsls	r3, r1, #12
 8000180:	1ac0      	subs	r0, r0, r3
 8000182:	4152      	adcs	r2, r2
 8000184:	0ac3      	lsrs	r3, r0, #11
 8000186:	428b      	cmp	r3, r1
 8000188:	d301      	bcc.n	800018e <__udivsi3+0x76>
 800018a:	02cb      	lsls	r3, r1, #11
 800018c:	1ac0      	subs	r0, r0, r3
 800018e:	4152      	adcs	r2, r2
 8000190:	0a83      	lsrs	r3, r0, #10
 8000192:	428b      	cmp	r3, r1
 8000194:	d301      	bcc.n	800019a <__udivsi3+0x82>
 8000196:	028b      	lsls	r3, r1, #10
 8000198:	1ac0      	subs	r0, r0, r3
 800019a:	4152      	adcs	r2, r2
 800019c:	0a43      	lsrs	r3, r0, #9
 800019e:	428b      	cmp	r3, r1
 80001a0:	d301      	bcc.n	80001a6 <__udivsi3+0x8e>
 80001a2:	024b      	lsls	r3, r1, #9
 80001a4:	1ac0      	subs	r0, r0, r3
 80001a6:	4152      	adcs	r2, r2
 80001a8:	0a03      	lsrs	r3, r0, #8
 80001aa:	428b      	cmp	r3, r1
 80001ac:	d301      	bcc.n	80001b2 <__udivsi3+0x9a>
 80001ae:	020b      	lsls	r3, r1, #8
 80001b0:	1ac0      	subs	r0, r0, r3
 80001b2:	4152      	adcs	r2, r2
 80001b4:	d2cd      	bcs.n	8000152 <__udivsi3+0x3a>
 80001b6:	09c3      	lsrs	r3, r0, #7
 80001b8:	428b      	cmp	r3, r1
 80001ba:	d301      	bcc.n	80001c0 <__udivsi3+0xa8>
 80001bc:	01cb      	lsls	r3, r1, #7
 80001be:	1ac0      	subs	r0, r0, r3
 80001c0:	4152      	adcs	r2, r2
 80001c2:	0983      	lsrs	r3, r0, #6
 80001c4:	428b      	cmp	r3, r1
 80001c6:	d301      	bcc.n	80001cc <__udivsi3+0xb4>
 80001c8:	018b      	lsls	r3, r1, #6
 80001ca:	1ac0      	subs	r0, r0, r3
 80001cc:	4152      	adcs	r2, r2
 80001ce:	0943      	lsrs	r3, r0, #5
 80001d0:	428b      	cmp	r3, r1
 80001d2:	d301      	bcc.n	80001d8 <__udivsi3+0xc0>
 80001d4:	014b      	lsls	r3, r1, #5
 80001d6:	1ac0      	subs	r0, r0, r3
 80001d8:	4152      	adcs	r2, r2
 80001da:	0903      	lsrs	r3, r0, #4
 80001dc:	428b      	cmp	r3, r1
 80001de:	d301      	bcc.n	80001e4 <__udivsi3+0xcc>
 80001e0:	010b      	lsls	r3, r1, #4
 80001e2:	1ac0      	subs	r0, r0, r3
 80001e4:	4152      	adcs	r2, r2
 80001e6:	08c3      	lsrs	r3, r0, #3
 80001e8:	428b      	cmp	r3, r1
 80001ea:	d301      	bcc.n	80001f0 <__udivsi3+0xd8>
 80001ec:	00cb      	lsls	r3, r1, #3
 80001ee:	1ac0      	subs	r0, r0, r3
 80001f0:	4152      	adcs	r2, r2
 80001f2:	0883      	lsrs	r3, r0, #2
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d301      	bcc.n	80001fc <__udivsi3+0xe4>
 80001f8:	008b      	lsls	r3, r1, #2
 80001fa:	1ac0      	subs	r0, r0, r3
 80001fc:	4152      	adcs	r2, r2
 80001fe:	0843      	lsrs	r3, r0, #1
 8000200:	428b      	cmp	r3, r1
 8000202:	d301      	bcc.n	8000208 <__udivsi3+0xf0>
 8000204:	004b      	lsls	r3, r1, #1
 8000206:	1ac0      	subs	r0, r0, r3
 8000208:	4152      	adcs	r2, r2
 800020a:	1a41      	subs	r1, r0, r1
 800020c:	d200      	bcs.n	8000210 <__udivsi3+0xf8>
 800020e:	4601      	mov	r1, r0
 8000210:	4152      	adcs	r2, r2
 8000212:	4610      	mov	r0, r2
 8000214:	4770      	bx	lr
 8000216:	e7ff      	b.n	8000218 <__udivsi3+0x100>
 8000218:	b501      	push	{r0, lr}
 800021a:	2000      	movs	r0, #0
 800021c:	f000 f806 	bl	800022c <__aeabi_idiv0>
 8000220:	bd02      	pop	{r1, pc}
 8000222:	46c0      	nop			; (mov r8, r8)

08000224 <__aeabi_uidivmod>:
 8000224:	2900      	cmp	r1, #0
 8000226:	d0f7      	beq.n	8000218 <__udivsi3+0x100>
 8000228:	e776      	b.n	8000118 <__udivsi3>
 800022a:	4770      	bx	lr

0800022c <__aeabi_idiv0>:
 800022c:	4770      	bx	lr
 800022e:	46c0      	nop			; (mov r8, r8)

08000230 <__aeabi_uldivmod>:
 8000230:	2b00      	cmp	r3, #0
 8000232:	d111      	bne.n	8000258 <__aeabi_uldivmod+0x28>
 8000234:	2a00      	cmp	r2, #0
 8000236:	d10f      	bne.n	8000258 <__aeabi_uldivmod+0x28>
 8000238:	2900      	cmp	r1, #0
 800023a:	d100      	bne.n	800023e <__aeabi_uldivmod+0xe>
 800023c:	2800      	cmp	r0, #0
 800023e:	d002      	beq.n	8000246 <__aeabi_uldivmod+0x16>
 8000240:	2100      	movs	r1, #0
 8000242:	43c9      	mvns	r1, r1
 8000244:	0008      	movs	r0, r1
 8000246:	b407      	push	{r0, r1, r2}
 8000248:	4802      	ldr	r0, [pc, #8]	; (8000254 <__aeabi_uldivmod+0x24>)
 800024a:	a102      	add	r1, pc, #8	; (adr r1, 8000254 <__aeabi_uldivmod+0x24>)
 800024c:	1840      	adds	r0, r0, r1
 800024e:	9002      	str	r0, [sp, #8]
 8000250:	bd03      	pop	{r0, r1, pc}
 8000252:	46c0      	nop			; (mov r8, r8)
 8000254:	ffffffd9 	.word	0xffffffd9
 8000258:	b403      	push	{r0, r1}
 800025a:	4668      	mov	r0, sp
 800025c:	b501      	push	{r0, lr}
 800025e:	9802      	ldr	r0, [sp, #8]
 8000260:	f000 f806 	bl	8000270 <__udivmoddi4>
 8000264:	9b01      	ldr	r3, [sp, #4]
 8000266:	469e      	mov	lr, r3
 8000268:	b002      	add	sp, #8
 800026a:	bc0c      	pop	{r2, r3}
 800026c:	4770      	bx	lr
 800026e:	46c0      	nop			; (mov r8, r8)

08000270 <__udivmoddi4>:
 8000270:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000272:	4657      	mov	r7, sl
 8000274:	464e      	mov	r6, r9
 8000276:	4645      	mov	r5, r8
 8000278:	46de      	mov	lr, fp
 800027a:	b5e0      	push	{r5, r6, r7, lr}
 800027c:	0004      	movs	r4, r0
 800027e:	000d      	movs	r5, r1
 8000280:	4692      	mov	sl, r2
 8000282:	4699      	mov	r9, r3
 8000284:	b083      	sub	sp, #12
 8000286:	428b      	cmp	r3, r1
 8000288:	d830      	bhi.n	80002ec <__udivmoddi4+0x7c>
 800028a:	d02d      	beq.n	80002e8 <__udivmoddi4+0x78>
 800028c:	4649      	mov	r1, r9
 800028e:	4650      	mov	r0, sl
 8000290:	f000 f8ba 	bl	8000408 <__clzdi2>
 8000294:	0029      	movs	r1, r5
 8000296:	0006      	movs	r6, r0
 8000298:	0020      	movs	r0, r4
 800029a:	f000 f8b5 	bl	8000408 <__clzdi2>
 800029e:	1a33      	subs	r3, r6, r0
 80002a0:	4698      	mov	r8, r3
 80002a2:	3b20      	subs	r3, #32
 80002a4:	d434      	bmi.n	8000310 <__udivmoddi4+0xa0>
 80002a6:	469b      	mov	fp, r3
 80002a8:	4653      	mov	r3, sl
 80002aa:	465a      	mov	r2, fp
 80002ac:	4093      	lsls	r3, r2
 80002ae:	4642      	mov	r2, r8
 80002b0:	001f      	movs	r7, r3
 80002b2:	4653      	mov	r3, sl
 80002b4:	4093      	lsls	r3, r2
 80002b6:	001e      	movs	r6, r3
 80002b8:	42af      	cmp	r7, r5
 80002ba:	d83b      	bhi.n	8000334 <__udivmoddi4+0xc4>
 80002bc:	42af      	cmp	r7, r5
 80002be:	d100      	bne.n	80002c2 <__udivmoddi4+0x52>
 80002c0:	e079      	b.n	80003b6 <__udivmoddi4+0x146>
 80002c2:	465b      	mov	r3, fp
 80002c4:	1ba4      	subs	r4, r4, r6
 80002c6:	41bd      	sbcs	r5, r7
 80002c8:	2b00      	cmp	r3, #0
 80002ca:	da00      	bge.n	80002ce <__udivmoddi4+0x5e>
 80002cc:	e076      	b.n	80003bc <__udivmoddi4+0x14c>
 80002ce:	2200      	movs	r2, #0
 80002d0:	2300      	movs	r3, #0
 80002d2:	9200      	str	r2, [sp, #0]
 80002d4:	9301      	str	r3, [sp, #4]
 80002d6:	2301      	movs	r3, #1
 80002d8:	465a      	mov	r2, fp
 80002da:	4093      	lsls	r3, r2
 80002dc:	9301      	str	r3, [sp, #4]
 80002de:	2301      	movs	r3, #1
 80002e0:	4642      	mov	r2, r8
 80002e2:	4093      	lsls	r3, r2
 80002e4:	9300      	str	r3, [sp, #0]
 80002e6:	e029      	b.n	800033c <__udivmoddi4+0xcc>
 80002e8:	4282      	cmp	r2, r0
 80002ea:	d9cf      	bls.n	800028c <__udivmoddi4+0x1c>
 80002ec:	2200      	movs	r2, #0
 80002ee:	2300      	movs	r3, #0
 80002f0:	9200      	str	r2, [sp, #0]
 80002f2:	9301      	str	r3, [sp, #4]
 80002f4:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80002f6:	2b00      	cmp	r3, #0
 80002f8:	d001      	beq.n	80002fe <__udivmoddi4+0x8e>
 80002fa:	601c      	str	r4, [r3, #0]
 80002fc:	605d      	str	r5, [r3, #4]
 80002fe:	9800      	ldr	r0, [sp, #0]
 8000300:	9901      	ldr	r1, [sp, #4]
 8000302:	b003      	add	sp, #12
 8000304:	bcf0      	pop	{r4, r5, r6, r7}
 8000306:	46bb      	mov	fp, r7
 8000308:	46b2      	mov	sl, r6
 800030a:	46a9      	mov	r9, r5
 800030c:	46a0      	mov	r8, r4
 800030e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000310:	4642      	mov	r2, r8
 8000312:	469b      	mov	fp, r3
 8000314:	2320      	movs	r3, #32
 8000316:	1a9b      	subs	r3, r3, r2
 8000318:	4652      	mov	r2, sl
 800031a:	40da      	lsrs	r2, r3
 800031c:	4641      	mov	r1, r8
 800031e:	0013      	movs	r3, r2
 8000320:	464a      	mov	r2, r9
 8000322:	408a      	lsls	r2, r1
 8000324:	0017      	movs	r7, r2
 8000326:	4642      	mov	r2, r8
 8000328:	431f      	orrs	r7, r3
 800032a:	4653      	mov	r3, sl
 800032c:	4093      	lsls	r3, r2
 800032e:	001e      	movs	r6, r3
 8000330:	42af      	cmp	r7, r5
 8000332:	d9c3      	bls.n	80002bc <__udivmoddi4+0x4c>
 8000334:	2200      	movs	r2, #0
 8000336:	2300      	movs	r3, #0
 8000338:	9200      	str	r2, [sp, #0]
 800033a:	9301      	str	r3, [sp, #4]
 800033c:	4643      	mov	r3, r8
 800033e:	2b00      	cmp	r3, #0
 8000340:	d0d8      	beq.n	80002f4 <__udivmoddi4+0x84>
 8000342:	07fb      	lsls	r3, r7, #31
 8000344:	0872      	lsrs	r2, r6, #1
 8000346:	431a      	orrs	r2, r3
 8000348:	4646      	mov	r6, r8
 800034a:	087b      	lsrs	r3, r7, #1
 800034c:	e00e      	b.n	800036c <__udivmoddi4+0xfc>
 800034e:	42ab      	cmp	r3, r5
 8000350:	d101      	bne.n	8000356 <__udivmoddi4+0xe6>
 8000352:	42a2      	cmp	r2, r4
 8000354:	d80c      	bhi.n	8000370 <__udivmoddi4+0x100>
 8000356:	1aa4      	subs	r4, r4, r2
 8000358:	419d      	sbcs	r5, r3
 800035a:	2001      	movs	r0, #1
 800035c:	1924      	adds	r4, r4, r4
 800035e:	416d      	adcs	r5, r5
 8000360:	2100      	movs	r1, #0
 8000362:	3e01      	subs	r6, #1
 8000364:	1824      	adds	r4, r4, r0
 8000366:	414d      	adcs	r5, r1
 8000368:	2e00      	cmp	r6, #0
 800036a:	d006      	beq.n	800037a <__udivmoddi4+0x10a>
 800036c:	42ab      	cmp	r3, r5
 800036e:	d9ee      	bls.n	800034e <__udivmoddi4+0xde>
 8000370:	3e01      	subs	r6, #1
 8000372:	1924      	adds	r4, r4, r4
 8000374:	416d      	adcs	r5, r5
 8000376:	2e00      	cmp	r6, #0
 8000378:	d1f8      	bne.n	800036c <__udivmoddi4+0xfc>
 800037a:	9800      	ldr	r0, [sp, #0]
 800037c:	9901      	ldr	r1, [sp, #4]
 800037e:	465b      	mov	r3, fp
 8000380:	1900      	adds	r0, r0, r4
 8000382:	4169      	adcs	r1, r5
 8000384:	2b00      	cmp	r3, #0
 8000386:	db24      	blt.n	80003d2 <__udivmoddi4+0x162>
 8000388:	002b      	movs	r3, r5
 800038a:	465a      	mov	r2, fp
 800038c:	4644      	mov	r4, r8
 800038e:	40d3      	lsrs	r3, r2
 8000390:	002a      	movs	r2, r5
 8000392:	40e2      	lsrs	r2, r4
 8000394:	001c      	movs	r4, r3
 8000396:	465b      	mov	r3, fp
 8000398:	0015      	movs	r5, r2
 800039a:	2b00      	cmp	r3, #0
 800039c:	db2a      	blt.n	80003f4 <__udivmoddi4+0x184>
 800039e:	0026      	movs	r6, r4
 80003a0:	409e      	lsls	r6, r3
 80003a2:	0033      	movs	r3, r6
 80003a4:	0026      	movs	r6, r4
 80003a6:	4647      	mov	r7, r8
 80003a8:	40be      	lsls	r6, r7
 80003aa:	0032      	movs	r2, r6
 80003ac:	1a80      	subs	r0, r0, r2
 80003ae:	4199      	sbcs	r1, r3
 80003b0:	9000      	str	r0, [sp, #0]
 80003b2:	9101      	str	r1, [sp, #4]
 80003b4:	e79e      	b.n	80002f4 <__udivmoddi4+0x84>
 80003b6:	42a3      	cmp	r3, r4
 80003b8:	d8bc      	bhi.n	8000334 <__udivmoddi4+0xc4>
 80003ba:	e782      	b.n	80002c2 <__udivmoddi4+0x52>
 80003bc:	4642      	mov	r2, r8
 80003be:	2320      	movs	r3, #32
 80003c0:	2100      	movs	r1, #0
 80003c2:	1a9b      	subs	r3, r3, r2
 80003c4:	2200      	movs	r2, #0
 80003c6:	9100      	str	r1, [sp, #0]
 80003c8:	9201      	str	r2, [sp, #4]
 80003ca:	2201      	movs	r2, #1
 80003cc:	40da      	lsrs	r2, r3
 80003ce:	9201      	str	r2, [sp, #4]
 80003d0:	e785      	b.n	80002de <__udivmoddi4+0x6e>
 80003d2:	4642      	mov	r2, r8
 80003d4:	2320      	movs	r3, #32
 80003d6:	1a9b      	subs	r3, r3, r2
 80003d8:	002a      	movs	r2, r5
 80003da:	4646      	mov	r6, r8
 80003dc:	409a      	lsls	r2, r3
 80003de:	0023      	movs	r3, r4
 80003e0:	40f3      	lsrs	r3, r6
 80003e2:	4644      	mov	r4, r8
 80003e4:	4313      	orrs	r3, r2
 80003e6:	002a      	movs	r2, r5
 80003e8:	40e2      	lsrs	r2, r4
 80003ea:	001c      	movs	r4, r3
 80003ec:	465b      	mov	r3, fp
 80003ee:	0015      	movs	r5, r2
 80003f0:	2b00      	cmp	r3, #0
 80003f2:	dad4      	bge.n	800039e <__udivmoddi4+0x12e>
 80003f4:	4642      	mov	r2, r8
 80003f6:	002f      	movs	r7, r5
 80003f8:	2320      	movs	r3, #32
 80003fa:	0026      	movs	r6, r4
 80003fc:	4097      	lsls	r7, r2
 80003fe:	1a9b      	subs	r3, r3, r2
 8000400:	40de      	lsrs	r6, r3
 8000402:	003b      	movs	r3, r7
 8000404:	4333      	orrs	r3, r6
 8000406:	e7cd      	b.n	80003a4 <__udivmoddi4+0x134>

08000408 <__clzdi2>:
 8000408:	b510      	push	{r4, lr}
 800040a:	2900      	cmp	r1, #0
 800040c:	d103      	bne.n	8000416 <__clzdi2+0xe>
 800040e:	f000 f807 	bl	8000420 <__clzsi2>
 8000412:	3020      	adds	r0, #32
 8000414:	e002      	b.n	800041c <__clzdi2+0x14>
 8000416:	0008      	movs	r0, r1
 8000418:	f000 f802 	bl	8000420 <__clzsi2>
 800041c:	bd10      	pop	{r4, pc}
 800041e:	46c0      	nop			; (mov r8, r8)

08000420 <__clzsi2>:
 8000420:	211c      	movs	r1, #28
 8000422:	2301      	movs	r3, #1
 8000424:	041b      	lsls	r3, r3, #16
 8000426:	4298      	cmp	r0, r3
 8000428:	d301      	bcc.n	800042e <__clzsi2+0xe>
 800042a:	0c00      	lsrs	r0, r0, #16
 800042c:	3910      	subs	r1, #16
 800042e:	0a1b      	lsrs	r3, r3, #8
 8000430:	4298      	cmp	r0, r3
 8000432:	d301      	bcc.n	8000438 <__clzsi2+0x18>
 8000434:	0a00      	lsrs	r0, r0, #8
 8000436:	3908      	subs	r1, #8
 8000438:	091b      	lsrs	r3, r3, #4
 800043a:	4298      	cmp	r0, r3
 800043c:	d301      	bcc.n	8000442 <__clzsi2+0x22>
 800043e:	0900      	lsrs	r0, r0, #4
 8000440:	3904      	subs	r1, #4
 8000442:	a202      	add	r2, pc, #8	; (adr r2, 800044c <__clzsi2+0x2c>)
 8000444:	5c10      	ldrb	r0, [r2, r0]
 8000446:	1840      	adds	r0, r0, r1
 8000448:	4770      	bx	lr
 800044a:	46c0      	nop			; (mov r8, r8)
 800044c:	02020304 	.word	0x02020304
 8000450:	01010101 	.word	0x01010101
	...

0800045c <debug_print>:
extern UART_HandleTypeDef huart2;

char tx_buf[TX_BUF_SIZE];

// Use this instead of printf()
void debug_print(char *format, ...) {
 800045c:	b40f      	push	{r0, r1, r2, r3}
 800045e:	b580      	push	{r7, lr}
 8000460:	b082      	sub	sp, #8
 8000462:	af00      	add	r7, sp, #0
	va_list args;
	va_start(args, format);
 8000464:	2314      	movs	r3, #20
 8000466:	18fb      	adds	r3, r7, r3
 8000468:	603b      	str	r3, [r7, #0]

	uint16_t size = vsnprintf(tx_buf, TX_BUF_SIZE, format, args);
 800046a:	683b      	ldr	r3, [r7, #0]
 800046c:	693a      	ldr	r2, [r7, #16]
 800046e:	480a      	ldr	r0, [pc, #40]	; (8000498 <debug_print+0x3c>)
 8000470:	2164      	movs	r1, #100	; 0x64
 8000472:	f002 fced 	bl	8002e50 <vsniprintf>
 8000476:	0002      	movs	r2, r0
 8000478:	1dbb      	adds	r3, r7, #6
 800047a:	801a      	strh	r2, [r3, #0]

	//project_print_user_implementation(tx_buf, size);

	HAL_UART_Transmit(&huart2, (uint8_t*) tx_buf, size, 100);
 800047c:	1dbb      	adds	r3, r7, #6
 800047e:	881a      	ldrh	r2, [r3, #0]
 8000480:	4905      	ldr	r1, [pc, #20]	; (8000498 <debug_print+0x3c>)
 8000482:	4806      	ldr	r0, [pc, #24]	; (800049c <debug_print+0x40>)
 8000484:	2364      	movs	r3, #100	; 0x64
 8000486:	f001 ff67 	bl	8002358 <HAL_UART_Transmit>
}
 800048a:	46c0      	nop			; (mov r8, r8)
 800048c:	46bd      	mov	sp, r7
 800048e:	b002      	add	sp, #8
 8000490:	bc80      	pop	{r7}
 8000492:	bc08      	pop	{r3}
 8000494:	b004      	add	sp, #16
 8000496:	4718      	bx	r3
 8000498:	20000078 	.word	0x20000078
 800049c:	20000130 	.word	0x20000130

080004a0 <__NVIC_SystemReset>:

/**
 \brief   System Reset
 \details Initiates a system reset request to reset the MCU.
 */
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void) {
 80004a0:	b580      	push	{r7, lr}
 80004a2:	af00      	add	r7, sp, #0
 \brief   Data Synchronization Barrier
 \details Acts as a special kind of Data Memory Barrier.
 It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void) {
	__ASM volatile ("dsb 0xF":::"memory");
 80004a4:	f3bf 8f4f 	dsb	sy
}
 80004a8:	46c0      	nop			; (mov r8, r8)
	__DSB(); /* Ensure all outstanding memory accesses included
	 buffered write are completed before reset */
	SCB->AIRCR = ((0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80004aa:	4b04      	ldr	r3, [pc, #16]	; (80004bc <__NVIC_SystemReset+0x1c>)
 80004ac:	4a04      	ldr	r2, [pc, #16]	; (80004c0 <__NVIC_SystemReset+0x20>)
 80004ae:	60da      	str	r2, [r3, #12]
	__ASM volatile ("dsb 0xF":::"memory");
 80004b0:	f3bf 8f4f 	dsb	sy
}
 80004b4:	46c0      	nop			; (mov r8, r8)
	SCB_AIRCR_SYSRESETREQ_Msk);
	__DSB(); /* Ensure completion of memory access */

	for (;;) /* wait until reset */
	{
		__NOP();
 80004b6:	46c0      	nop			; (mov r8, r8)
 80004b8:	e7fd      	b.n	80004b6 <__NVIC_SystemReset+0x16>
 80004ba:	46c0      	nop			; (mov r8, r8)
 80004bc:	e000ed00 	.word	0xe000ed00
 80004c0:	05fa0004 	.word	0x05fa0004

080004c4 <main>:

/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void) {
 80004c4:	b580      	push	{r7, lr}
 80004c6:	b082      	sub	sp, #8
 80004c8:	af00      	add	r7, sp, #0
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 80004ca:	f000 fb13 	bl	8000af4 <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 80004ce:	f000 f855 	bl	800057c <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 80004d2:	f000 f90f 	bl	80006f4 <MX_GPIO_Init>
	MX_USART2_UART_Init();
 80004d6:	f000 f8d9 	bl	800068c <MX_USART2_UART_Init>
	MX_I2C2_Init();
 80004da:	f000 f897 	bl	800060c <MX_I2C2_Init>
	/* USER CODE BEGIN 2 */

	//vt52 Cursor home
	debug_print("\e[H");
 80004de:	4b21      	ldr	r3, [pc, #132]	; (8000564 <main+0xa0>)
 80004e0:	0018      	movs	r0, r3
 80004e2:	f7ff ffbb 	bl	800045c <debug_print>

	//vt52 Clear Screen
	debug_print("\e[J");
 80004e6:	4b20      	ldr	r3, [pc, #128]	; (8000568 <main+0xa4>)
 80004e8:	0018      	movs	r0, r3
 80004ea:	f7ff ffb7 	bl	800045c <debug_print>

	debug_print("K23003 I2C Playground\n\r");
 80004ee:	4b1f      	ldr	r3, [pc, #124]	; (800056c <main+0xa8>)
 80004f0:	0018      	movs	r0, r3
 80004f2:	f7ff ffb3 	bl	800045c <debug_print>

	for (address = 0; address < 127; address++) {
 80004f6:	1dfb      	adds	r3, r7, #7
 80004f8:	2200      	movs	r2, #0
 80004fa:	701a      	strb	r2, [r3, #0]
 80004fc:	e017      	b.n	800052e <main+0x6a>
		if (HAL_I2C_IsDeviceReady(&hi2c2, (uint16_t) (address << 1), 3, 100)
 80004fe:	1dfb      	adds	r3, r7, #7
 8000500:	781b      	ldrb	r3, [r3, #0]
 8000502:	b29b      	uxth	r3, r3
 8000504:	18db      	adds	r3, r3, r3
 8000506:	b299      	uxth	r1, r3
 8000508:	4819      	ldr	r0, [pc, #100]	; (8000570 <main+0xac>)
 800050a:	2364      	movs	r3, #100	; 0x64
 800050c:	2203      	movs	r2, #3
 800050e:	f000 feaf 	bl	8001270 <HAL_I2C_IsDeviceReady>
 8000512:	1e03      	subs	r3, r0, #0
 8000514:	d106      	bne.n	8000524 <main+0x60>
				== HAL_OK) {
			debug_print("\n\rI2C Address found: 0x%X", address);
 8000516:	1dfb      	adds	r3, r7, #7
 8000518:	781a      	ldrb	r2, [r3, #0]
 800051a:	4b16      	ldr	r3, [pc, #88]	; (8000574 <main+0xb0>)
 800051c:	0011      	movs	r1, r2
 800051e:	0018      	movs	r0, r3
 8000520:	f7ff ff9c 	bl	800045c <debug_print>
	for (address = 0; address < 127; address++) {
 8000524:	1dfb      	adds	r3, r7, #7
 8000526:	781a      	ldrb	r2, [r3, #0]
 8000528:	1dfb      	adds	r3, r7, #7
 800052a:	3201      	adds	r2, #1
 800052c:	701a      	strb	r2, [r3, #0]
 800052e:	1dfb      	adds	r3, r7, #7
 8000530:	781b      	ldrb	r3, [r3, #0]
 8000532:	2b7e      	cmp	r3, #126	; 0x7e
 8000534:	d9e3      	bls.n	80004fe <main+0x3a>
	/* USER CODE BEGIN WHILE */
	while (1) {
		/* USER CODE END WHILE */

		/* USER CODE BEGIN 3 */
		if (HAL_GPIO_ReadPin(RST_GPIO_Port, RST_Pin) == 0) {
 8000536:	4b10      	ldr	r3, [pc, #64]	; (8000578 <main+0xb4>)
 8000538:	2104      	movs	r1, #4
 800053a:	0018      	movs	r0, r3
 800053c:	f000 fd9c 	bl	8001078 <HAL_GPIO_ReadPin>
 8000540:	1e03      	subs	r3, r0, #0
 8000542:	d104      	bne.n	800054e <main+0x8a>
			HAL_Delay(100);
 8000544:	2064      	movs	r0, #100	; 0x64
 8000546:	f000 fb5b 	bl	8000c00 <HAL_Delay>
			NVIC_SystemReset();
 800054a:	f7ff ffa9 	bl	80004a0 <__NVIC_SystemReset>
		}
		HAL_GPIO_TogglePin(LED_GPIO_Port, LED_Pin);
 800054e:	23a0      	movs	r3, #160	; 0xa0
 8000550:	05db      	lsls	r3, r3, #23
 8000552:	2180      	movs	r1, #128	; 0x80
 8000554:	0018      	movs	r0, r3
 8000556:	f000 fdc9 	bl	80010ec <HAL_GPIO_TogglePin>
		HAL_Delay(100);
 800055a:	2064      	movs	r0, #100	; 0x64
 800055c:	f000 fb50 	bl	8000c00 <HAL_Delay>
		if (HAL_GPIO_ReadPin(RST_GPIO_Port, RST_Pin) == 0) {
 8000560:	e7e9      	b.n	8000536 <main+0x72>
 8000562:	46c0      	nop			; (mov r8, r8)
 8000564:	0800378c 	.word	0x0800378c
 8000568:	08003790 	.word	0x08003790
 800056c:	08003794 	.word	0x08003794
 8000570:	200000dc 	.word	0x200000dc
 8000574:	080037ac 	.word	0x080037ac
 8000578:	50001400 	.word	0x50001400

0800057c <SystemClock_Config>:

/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void) {
 800057c:	b590      	push	{r4, r7, lr}
 800057e:	b093      	sub	sp, #76	; 0x4c
 8000580:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = { 0 };
 8000582:	2410      	movs	r4, #16
 8000584:	193b      	adds	r3, r7, r4
 8000586:	0018      	movs	r0, r3
 8000588:	2338      	movs	r3, #56	; 0x38
 800058a:	001a      	movs	r2, r3
 800058c:	2100      	movs	r1, #0
 800058e:	f002 fc6b 	bl	8002e68 <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = { 0 };
 8000592:	003b      	movs	r3, r7
 8000594:	0018      	movs	r0, r3
 8000596:	2310      	movs	r3, #16
 8000598:	001a      	movs	r2, r3
 800059a:	2100      	movs	r1, #0
 800059c:	f002 fc64 	bl	8002e68 <memset>

	/** Configure the main internal regulator output voltage
	 */
	HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 80005a0:	2380      	movs	r3, #128	; 0x80
 80005a2:	009b      	lsls	r3, r3, #2
 80005a4:	0018      	movs	r0, r3
 80005a6:	f001 f971 	bl	800188c <HAL_PWREx_ControlVoltageScaling>

	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80005aa:	193b      	adds	r3, r7, r4
 80005ac:	2202      	movs	r2, #2
 80005ae:	601a      	str	r2, [r3, #0]
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80005b0:	193b      	adds	r3, r7, r4
 80005b2:	2280      	movs	r2, #128	; 0x80
 80005b4:	0052      	lsls	r2, r2, #1
 80005b6:	60da      	str	r2, [r3, #12]
	RCC_OscInitStruct.HSIDiv = RCC_HSI_DIV1;
 80005b8:	193b      	adds	r3, r7, r4
 80005ba:	2200      	movs	r2, #0
 80005bc:	611a      	str	r2, [r3, #16]
	RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80005be:	193b      	adds	r3, r7, r4
 80005c0:	2240      	movs	r2, #64	; 0x40
 80005c2:	615a      	str	r2, [r3, #20]
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80005c4:	193b      	adds	r3, r7, r4
 80005c6:	2200      	movs	r2, #0
 80005c8:	61da      	str	r2, [r3, #28]
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 80005ca:	193b      	adds	r3, r7, r4
 80005cc:	0018      	movs	r0, r3
 80005ce:	f001 f9a9 	bl	8001924 <HAL_RCC_OscConfig>
 80005d2:	1e03      	subs	r3, r0, #0
 80005d4:	d001      	beq.n	80005da <SystemClock_Config+0x5e>
		Error_Handler();
 80005d6:	f000 f94f 	bl	8000878 <Error_Handler>
	}

	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 80005da:	003b      	movs	r3, r7
 80005dc:	2207      	movs	r2, #7
 80005de:	601a      	str	r2, [r3, #0]
			| RCC_CLOCKTYPE_PCLK1;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80005e0:	003b      	movs	r3, r7
 80005e2:	2200      	movs	r2, #0
 80005e4:	605a      	str	r2, [r3, #4]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80005e6:	003b      	movs	r3, r7
 80005e8:	2200      	movs	r2, #0
 80005ea:	609a      	str	r2, [r3, #8]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80005ec:	003b      	movs	r3, r7
 80005ee:	2200      	movs	r2, #0
 80005f0:	60da      	str	r2, [r3, #12]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK) {
 80005f2:	003b      	movs	r3, r7
 80005f4:	2100      	movs	r1, #0
 80005f6:	0018      	movs	r0, r3
 80005f8:	f001 fcae 	bl	8001f58 <HAL_RCC_ClockConfig>
 80005fc:	1e03      	subs	r3, r0, #0
 80005fe:	d001      	beq.n	8000604 <SystemClock_Config+0x88>
		Error_Handler();
 8000600:	f000 f93a 	bl	8000878 <Error_Handler>
	}
}
 8000604:	46c0      	nop			; (mov r8, r8)
 8000606:	46bd      	mov	sp, r7
 8000608:	b013      	add	sp, #76	; 0x4c
 800060a:	bd90      	pop	{r4, r7, pc}

0800060c <MX_I2C2_Init>:
/**
 * @brief I2C2 Initialization Function
 * @param None
 * @retval None
 */
static void MX_I2C2_Init(void) {
 800060c:	b580      	push	{r7, lr}
 800060e:	af00      	add	r7, sp, #0
	/* USER CODE END I2C2_Init 0 */

	/* USER CODE BEGIN I2C2_Init 1 */

	/* USER CODE END I2C2_Init 1 */
	hi2c2.Instance = I2C2;
 8000610:	4b1b      	ldr	r3, [pc, #108]	; (8000680 <MX_I2C2_Init+0x74>)
 8000612:	4a1c      	ldr	r2, [pc, #112]	; (8000684 <MX_I2C2_Init+0x78>)
 8000614:	601a      	str	r2, [r3, #0]
	hi2c2.Init.Timing = 0x0010061A;
 8000616:	4b1a      	ldr	r3, [pc, #104]	; (8000680 <MX_I2C2_Init+0x74>)
 8000618:	4a1b      	ldr	r2, [pc, #108]	; (8000688 <MX_I2C2_Init+0x7c>)
 800061a:	605a      	str	r2, [r3, #4]
	hi2c2.Init.OwnAddress1 = 0;
 800061c:	4b18      	ldr	r3, [pc, #96]	; (8000680 <MX_I2C2_Init+0x74>)
 800061e:	2200      	movs	r2, #0
 8000620:	609a      	str	r2, [r3, #8]
	hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000622:	4b17      	ldr	r3, [pc, #92]	; (8000680 <MX_I2C2_Init+0x74>)
 8000624:	2201      	movs	r2, #1
 8000626:	60da      	str	r2, [r3, #12]
	hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000628:	4b15      	ldr	r3, [pc, #84]	; (8000680 <MX_I2C2_Init+0x74>)
 800062a:	2200      	movs	r2, #0
 800062c:	611a      	str	r2, [r3, #16]
	hi2c2.Init.OwnAddress2 = 0;
 800062e:	4b14      	ldr	r3, [pc, #80]	; (8000680 <MX_I2C2_Init+0x74>)
 8000630:	2200      	movs	r2, #0
 8000632:	615a      	str	r2, [r3, #20]
	hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000634:	4b12      	ldr	r3, [pc, #72]	; (8000680 <MX_I2C2_Init+0x74>)
 8000636:	2200      	movs	r2, #0
 8000638:	619a      	str	r2, [r3, #24]
	hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800063a:	4b11      	ldr	r3, [pc, #68]	; (8000680 <MX_I2C2_Init+0x74>)
 800063c:	2200      	movs	r2, #0
 800063e:	61da      	str	r2, [r3, #28]
	hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000640:	4b0f      	ldr	r3, [pc, #60]	; (8000680 <MX_I2C2_Init+0x74>)
 8000642:	2200      	movs	r2, #0
 8000644:	621a      	str	r2, [r3, #32]
	if (HAL_I2C_Init(&hi2c2) != HAL_OK) {
 8000646:	4b0e      	ldr	r3, [pc, #56]	; (8000680 <MX_I2C2_Init+0x74>)
 8000648:	0018      	movs	r0, r3
 800064a:	f000 fd6b 	bl	8001124 <HAL_I2C_Init>
 800064e:	1e03      	subs	r3, r0, #0
 8000650:	d001      	beq.n	8000656 <MX_I2C2_Init+0x4a>
		Error_Handler();
 8000652:	f000 f911 	bl	8000878 <Error_Handler>
	}

	/** Configure Analogue filter
	 */
	if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE)
 8000656:	4b0a      	ldr	r3, [pc, #40]	; (8000680 <MX_I2C2_Init+0x74>)
 8000658:	2100      	movs	r1, #0
 800065a:	0018      	movs	r0, r3
 800065c:	f001 f87e 	bl	800175c <HAL_I2CEx_ConfigAnalogFilter>
 8000660:	1e03      	subs	r3, r0, #0
 8000662:	d001      	beq.n	8000668 <MX_I2C2_Init+0x5c>
			!= HAL_OK) {
		Error_Handler();
 8000664:	f000 f908 	bl	8000878 <Error_Handler>
	}

	/** Configure Digital filter
	 */
	if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK) {
 8000668:	4b05      	ldr	r3, [pc, #20]	; (8000680 <MX_I2C2_Init+0x74>)
 800066a:	2100      	movs	r1, #0
 800066c:	0018      	movs	r0, r3
 800066e:	f001 f8c1 	bl	80017f4 <HAL_I2CEx_ConfigDigitalFilter>
 8000672:	1e03      	subs	r3, r0, #0
 8000674:	d001      	beq.n	800067a <MX_I2C2_Init+0x6e>
		Error_Handler();
 8000676:	f000 f8ff 	bl	8000878 <Error_Handler>
	}
	/* USER CODE BEGIN I2C2_Init 2 */

	/* USER CODE END I2C2_Init 2 */

}
 800067a:	46c0      	nop			; (mov r8, r8)
 800067c:	46bd      	mov	sp, r7
 800067e:	bd80      	pop	{r7, pc}
 8000680:	200000dc 	.word	0x200000dc
 8000684:	40005800 	.word	0x40005800
 8000688:	0010061a 	.word	0x0010061a

0800068c <MX_USART2_UART_Init>:
/**
 * @brief USART2 Initialization Function
 * @param None
 * @retval None
 */
static void MX_USART2_UART_Init(void) {
 800068c:	b580      	push	{r7, lr}
 800068e:	af00      	add	r7, sp, #0
	/* USER CODE END USART2_Init 0 */

	/* USER CODE BEGIN USART2_Init 1 */

	/* USER CODE END USART2_Init 1 */
	huart2.Instance = USART2;
 8000690:	4b16      	ldr	r3, [pc, #88]	; (80006ec <MX_USART2_UART_Init+0x60>)
 8000692:	4a17      	ldr	r2, [pc, #92]	; (80006f0 <MX_USART2_UART_Init+0x64>)
 8000694:	601a      	str	r2, [r3, #0]
	huart2.Init.BaudRate = 115200;
 8000696:	4b15      	ldr	r3, [pc, #84]	; (80006ec <MX_USART2_UART_Init+0x60>)
 8000698:	22e1      	movs	r2, #225	; 0xe1
 800069a:	0252      	lsls	r2, r2, #9
 800069c:	605a      	str	r2, [r3, #4]
	huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800069e:	4b13      	ldr	r3, [pc, #76]	; (80006ec <MX_USART2_UART_Init+0x60>)
 80006a0:	2200      	movs	r2, #0
 80006a2:	609a      	str	r2, [r3, #8]
	huart2.Init.StopBits = UART_STOPBITS_1;
 80006a4:	4b11      	ldr	r3, [pc, #68]	; (80006ec <MX_USART2_UART_Init+0x60>)
 80006a6:	2200      	movs	r2, #0
 80006a8:	60da      	str	r2, [r3, #12]
	huart2.Init.Parity = UART_PARITY_NONE;
 80006aa:	4b10      	ldr	r3, [pc, #64]	; (80006ec <MX_USART2_UART_Init+0x60>)
 80006ac:	2200      	movs	r2, #0
 80006ae:	611a      	str	r2, [r3, #16]
	huart2.Init.Mode = UART_MODE_TX_RX;
 80006b0:	4b0e      	ldr	r3, [pc, #56]	; (80006ec <MX_USART2_UART_Init+0x60>)
 80006b2:	220c      	movs	r2, #12
 80006b4:	615a      	str	r2, [r3, #20]
	huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80006b6:	4b0d      	ldr	r3, [pc, #52]	; (80006ec <MX_USART2_UART_Init+0x60>)
 80006b8:	2200      	movs	r2, #0
 80006ba:	619a      	str	r2, [r3, #24]
	huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80006bc:	4b0b      	ldr	r3, [pc, #44]	; (80006ec <MX_USART2_UART_Init+0x60>)
 80006be:	2200      	movs	r2, #0
 80006c0:	61da      	str	r2, [r3, #28]
	huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80006c2:	4b0a      	ldr	r3, [pc, #40]	; (80006ec <MX_USART2_UART_Init+0x60>)
 80006c4:	2200      	movs	r2, #0
 80006c6:	621a      	str	r2, [r3, #32]
	huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80006c8:	4b08      	ldr	r3, [pc, #32]	; (80006ec <MX_USART2_UART_Init+0x60>)
 80006ca:	2200      	movs	r2, #0
 80006cc:	625a      	str	r2, [r3, #36]	; 0x24
	huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80006ce:	4b07      	ldr	r3, [pc, #28]	; (80006ec <MX_USART2_UART_Init+0x60>)
 80006d0:	2200      	movs	r2, #0
 80006d2:	629a      	str	r2, [r3, #40]	; 0x28
	if (HAL_UART_Init(&huart2) != HAL_OK) {
 80006d4:	4b05      	ldr	r3, [pc, #20]	; (80006ec <MX_USART2_UART_Init+0x60>)
 80006d6:	0018      	movs	r0, r3
 80006d8:	f001 fde8 	bl	80022ac <HAL_UART_Init>
 80006dc:	1e03      	subs	r3, r0, #0
 80006de:	d001      	beq.n	80006e4 <MX_USART2_UART_Init+0x58>
		Error_Handler();
 80006e0:	f000 f8ca 	bl	8000878 <Error_Handler>
	}
	/* USER CODE BEGIN USART2_Init 2 */

	/* USER CODE END USART2_Init 2 */

}
 80006e4:	46c0      	nop			; (mov r8, r8)
 80006e6:	46bd      	mov	sp, r7
 80006e8:	bd80      	pop	{r7, pc}
 80006ea:	46c0      	nop			; (mov r8, r8)
 80006ec:	20000130 	.word	0x20000130
 80006f0:	40004400 	.word	0x40004400

080006f4 <MX_GPIO_Init>:
/**
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void) {
 80006f4:	b590      	push	{r4, r7, lr}
 80006f6:	b08b      	sub	sp, #44	; 0x2c
 80006f8:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = { 0 };
 80006fa:	2414      	movs	r4, #20
 80006fc:	193b      	adds	r3, r7, r4
 80006fe:	0018      	movs	r0, r3
 8000700:	2314      	movs	r3, #20
 8000702:	001a      	movs	r2, r3
 8000704:	2100      	movs	r1, #0
 8000706:	f002 fbaf 	bl	8002e68 <memset>
	/* USER CODE BEGIN MX_GPIO_Init_1 */
	/* USER CODE END MX_GPIO_Init_1 */

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOB_CLK_ENABLE();
 800070a:	4b57      	ldr	r3, [pc, #348]	; (8000868 <MX_GPIO_Init+0x174>)
 800070c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800070e:	4b56      	ldr	r3, [pc, #344]	; (8000868 <MX_GPIO_Init+0x174>)
 8000710:	2102      	movs	r1, #2
 8000712:	430a      	orrs	r2, r1
 8000714:	635a      	str	r2, [r3, #52]	; 0x34
 8000716:	4b54      	ldr	r3, [pc, #336]	; (8000868 <MX_GPIO_Init+0x174>)
 8000718:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800071a:	2202      	movs	r2, #2
 800071c:	4013      	ands	r3, r2
 800071e:	613b      	str	r3, [r7, #16]
 8000720:	693b      	ldr	r3, [r7, #16]
	__HAL_RCC_GPIOC_CLK_ENABLE();
 8000722:	4b51      	ldr	r3, [pc, #324]	; (8000868 <MX_GPIO_Init+0x174>)
 8000724:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000726:	4b50      	ldr	r3, [pc, #320]	; (8000868 <MX_GPIO_Init+0x174>)
 8000728:	2104      	movs	r1, #4
 800072a:	430a      	orrs	r2, r1
 800072c:	635a      	str	r2, [r3, #52]	; 0x34
 800072e:	4b4e      	ldr	r3, [pc, #312]	; (8000868 <MX_GPIO_Init+0x174>)
 8000730:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000732:	2204      	movs	r2, #4
 8000734:	4013      	ands	r3, r2
 8000736:	60fb      	str	r3, [r7, #12]
 8000738:	68fb      	ldr	r3, [r7, #12]
	__HAL_RCC_GPIOF_CLK_ENABLE();
 800073a:	4b4b      	ldr	r3, [pc, #300]	; (8000868 <MX_GPIO_Init+0x174>)
 800073c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800073e:	4b4a      	ldr	r3, [pc, #296]	; (8000868 <MX_GPIO_Init+0x174>)
 8000740:	2120      	movs	r1, #32
 8000742:	430a      	orrs	r2, r1
 8000744:	635a      	str	r2, [r3, #52]	; 0x34
 8000746:	4b48      	ldr	r3, [pc, #288]	; (8000868 <MX_GPIO_Init+0x174>)
 8000748:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800074a:	2220      	movs	r2, #32
 800074c:	4013      	ands	r3, r2
 800074e:	60bb      	str	r3, [r7, #8]
 8000750:	68bb      	ldr	r3, [r7, #8]
	__HAL_RCC_GPIOA_CLK_ENABLE();
 8000752:	4b45      	ldr	r3, [pc, #276]	; (8000868 <MX_GPIO_Init+0x174>)
 8000754:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000756:	4b44      	ldr	r3, [pc, #272]	; (8000868 <MX_GPIO_Init+0x174>)
 8000758:	2101      	movs	r1, #1
 800075a:	430a      	orrs	r2, r1
 800075c:	635a      	str	r2, [r3, #52]	; 0x34
 800075e:	4b42      	ldr	r3, [pc, #264]	; (8000868 <MX_GPIO_Init+0x174>)
 8000760:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000762:	2201      	movs	r2, #1
 8000764:	4013      	ands	r3, r2
 8000766:	607b      	str	r3, [r7, #4]
 8000768:	687b      	ldr	r3, [r7, #4]

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(WP_GPIO_Port, WP_Pin, GPIO_PIN_RESET);
 800076a:	2380      	movs	r3, #128	; 0x80
 800076c:	009b      	lsls	r3, r3, #2
 800076e:	483f      	ldr	r0, [pc, #252]	; (800086c <MX_GPIO_Init+0x178>)
 8000770:	2200      	movs	r2, #0
 8000772:	0019      	movs	r1, r3
 8000774:	f000 fc9d 	bl	80010b2 <HAL_GPIO_WritePin>

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 8000778:	23a0      	movs	r3, #160	; 0xa0
 800077a:	05db      	lsls	r3, r3, #23
 800077c:	2200      	movs	r2, #0
 800077e:	2180      	movs	r1, #128	; 0x80
 8000780:	0018      	movs	r0, r3
 8000782:	f000 fc96 	bl	80010b2 <HAL_GPIO_WritePin>

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, GPIO_PIN_RESET);
 8000786:	4b3a      	ldr	r3, [pc, #232]	; (8000870 <MX_GPIO_Init+0x17c>)
 8000788:	2200      	movs	r2, #0
 800078a:	2140      	movs	r1, #64	; 0x40
 800078c:	0018      	movs	r0, r3
 800078e:	f000 fc90 	bl	80010b2 <HAL_GPIO_WritePin>

	/*Configure GPIO pin : WP_Pin */
	GPIO_InitStruct.Pin = WP_Pin;
 8000792:	193b      	adds	r3, r7, r4
 8000794:	2280      	movs	r2, #128	; 0x80
 8000796:	0092      	lsls	r2, r2, #2
 8000798:	601a      	str	r2, [r3, #0]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800079a:	193b      	adds	r3, r7, r4
 800079c:	2201      	movs	r2, #1
 800079e:	605a      	str	r2, [r3, #4]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007a0:	193b      	adds	r3, r7, r4
 80007a2:	2200      	movs	r2, #0
 80007a4:	609a      	str	r2, [r3, #8]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80007a6:	193b      	adds	r3, r7, r4
 80007a8:	2200      	movs	r2, #0
 80007aa:	60da      	str	r2, [r3, #12]
	HAL_GPIO_Init(WP_GPIO_Port, &GPIO_InitStruct);
 80007ac:	193b      	adds	r3, r7, r4
 80007ae:	4a2f      	ldr	r2, [pc, #188]	; (800086c <MX_GPIO_Init+0x178>)
 80007b0:	0019      	movs	r1, r3
 80007b2:	0010      	movs	r0, r2
 80007b4:	f000 fafc 	bl	8000db0 <HAL_GPIO_Init>

	/*Configure GPIO pin : RST_Pin */
	GPIO_InitStruct.Pin = RST_Pin;
 80007b8:	193b      	adds	r3, r7, r4
 80007ba:	2204      	movs	r2, #4
 80007bc:	601a      	str	r2, [r3, #0]
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80007be:	193b      	adds	r3, r7, r4
 80007c0:	2200      	movs	r2, #0
 80007c2:	605a      	str	r2, [r3, #4]
	GPIO_InitStruct.Pull = GPIO_PULLUP;
 80007c4:	193b      	adds	r3, r7, r4
 80007c6:	2201      	movs	r2, #1
 80007c8:	609a      	str	r2, [r3, #8]
	HAL_GPIO_Init(RST_GPIO_Port, &GPIO_InitStruct);
 80007ca:	193b      	adds	r3, r7, r4
 80007cc:	4a29      	ldr	r2, [pc, #164]	; (8000874 <MX_GPIO_Init+0x180>)
 80007ce:	0019      	movs	r1, r3
 80007d0:	0010      	movs	r0, r2
 80007d2:	f000 faed 	bl	8000db0 <HAL_GPIO_Init>

	/*Configure GPIO pin : LED_Pin */
	GPIO_InitStruct.Pin = LED_Pin;
 80007d6:	193b      	adds	r3, r7, r4
 80007d8:	2280      	movs	r2, #128	; 0x80
 80007da:	601a      	str	r2, [r3, #0]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80007dc:	193b      	adds	r3, r7, r4
 80007de:	2201      	movs	r2, #1
 80007e0:	605a      	str	r2, [r3, #4]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007e2:	193b      	adds	r3, r7, r4
 80007e4:	2200      	movs	r2, #0
 80007e6:	609a      	str	r2, [r3, #8]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80007e8:	193b      	adds	r3, r7, r4
 80007ea:	2200      	movs	r2, #0
 80007ec:	60da      	str	r2, [r3, #12]
	HAL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);
 80007ee:	193a      	adds	r2, r7, r4
 80007f0:	23a0      	movs	r3, #160	; 0xa0
 80007f2:	05db      	lsls	r3, r3, #23
 80007f4:	0011      	movs	r1, r2
 80007f6:	0018      	movs	r0, r3
 80007f8:	f000 fada 	bl	8000db0 <HAL_GPIO_Init>

	/*Configure GPIO pin : LD3_Pin */
	GPIO_InitStruct.Pin = LD3_Pin;
 80007fc:	193b      	adds	r3, r7, r4
 80007fe:	2240      	movs	r2, #64	; 0x40
 8000800:	601a      	str	r2, [r3, #0]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000802:	193b      	adds	r3, r7, r4
 8000804:	2201      	movs	r2, #1
 8000806:	605a      	str	r2, [r3, #4]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000808:	193b      	adds	r3, r7, r4
 800080a:	2200      	movs	r2, #0
 800080c:	609a      	str	r2, [r3, #8]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800080e:	193b      	adds	r3, r7, r4
 8000810:	2200      	movs	r2, #0
 8000812:	60da      	str	r2, [r3, #12]
	HAL_GPIO_Init(LD3_GPIO_Port, &GPIO_InitStruct);
 8000814:	193b      	adds	r3, r7, r4
 8000816:	4a16      	ldr	r2, [pc, #88]	; (8000870 <MX_GPIO_Init+0x17c>)
 8000818:	0019      	movs	r1, r3
 800081a:	0010      	movs	r0, r2
 800081c:	f000 fac8 	bl	8000db0 <HAL_GPIO_Init>

	/*Configure GPIO pin : INT_Pin */
	GPIO_InitStruct.Pin = INT_Pin;
 8000820:	193b      	adds	r3, r7, r4
 8000822:	2280      	movs	r2, #128	; 0x80
 8000824:	00d2      	lsls	r2, r2, #3
 8000826:	601a      	str	r2, [r3, #0]
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000828:	193b      	adds	r3, r7, r4
 800082a:	2200      	movs	r2, #0
 800082c:	605a      	str	r2, [r3, #4]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 800082e:	193b      	adds	r3, r7, r4
 8000830:	2200      	movs	r2, #0
 8000832:	609a      	str	r2, [r3, #8]
	HAL_GPIO_Init(INT_GPIO_Port, &GPIO_InitStruct);
 8000834:	193a      	adds	r2, r7, r4
 8000836:	23a0      	movs	r3, #160	; 0xa0
 8000838:	05db      	lsls	r3, r3, #23
 800083a:	0011      	movs	r1, r2
 800083c:	0018      	movs	r0, r3
 800083e:	f000 fab7 	bl	8000db0 <HAL_GPIO_Init>

	/*Configure GPIO pin : OS_Pin */
	GPIO_InitStruct.Pin = OS_Pin;
 8000842:	193b      	adds	r3, r7, r4
 8000844:	2210      	movs	r2, #16
 8000846:	601a      	str	r2, [r3, #0]
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000848:	193b      	adds	r3, r7, r4
 800084a:	2200      	movs	r2, #0
 800084c:	605a      	str	r2, [r3, #4]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 800084e:	193b      	adds	r3, r7, r4
 8000850:	2200      	movs	r2, #0
 8000852:	609a      	str	r2, [r3, #8]
	HAL_GPIO_Init(OS_GPIO_Port, &GPIO_InitStruct);
 8000854:	193b      	adds	r3, r7, r4
 8000856:	4a05      	ldr	r2, [pc, #20]	; (800086c <MX_GPIO_Init+0x178>)
 8000858:	0019      	movs	r1, r3
 800085a:	0010      	movs	r0, r2
 800085c:	f000 faa8 	bl	8000db0 <HAL_GPIO_Init>

	/* USER CODE BEGIN MX_GPIO_Init_2 */
	/* USER CODE END MX_GPIO_Init_2 */
}
 8000860:	46c0      	nop			; (mov r8, r8)
 8000862:	46bd      	mov	sp, r7
 8000864:	b00b      	add	sp, #44	; 0x2c
 8000866:	bd90      	pop	{r4, r7, pc}
 8000868:	40021000 	.word	0x40021000
 800086c:	50000400 	.word	0x50000400
 8000870:	50000800 	.word	0x50000800
 8000874:	50001400 	.word	0x50001400

08000878 <Error_Handler>:

/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void) {
 8000878:	b580      	push	{r7, lr}
 800087a:	af00      	add	r7, sp, #0
	__ASM volatile ("cpsid i" : : : "memory");
 800087c:	b672      	cpsid	i
}
 800087e:	46c0      	nop			; (mov r8, r8)
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 8000880:	e7fe      	b.n	8000880 <Error_Handler+0x8>
	...

08000884 <HAL_MspInit>:

/* USER CODE END 0 */
/**
 * Initializes the Global MSP.
 */
void HAL_MspInit(void) {
 8000884:	b580      	push	{r7, lr}
 8000886:	b082      	sub	sp, #8
 8000888:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN MspInit 0 */

	/* USER CODE END MspInit 0 */

	__HAL_RCC_SYSCFG_CLK_ENABLE();
 800088a:	4b0f      	ldr	r3, [pc, #60]	; (80008c8 <HAL_MspInit+0x44>)
 800088c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800088e:	4b0e      	ldr	r3, [pc, #56]	; (80008c8 <HAL_MspInit+0x44>)
 8000890:	2101      	movs	r1, #1
 8000892:	430a      	orrs	r2, r1
 8000894:	641a      	str	r2, [r3, #64]	; 0x40
 8000896:	4b0c      	ldr	r3, [pc, #48]	; (80008c8 <HAL_MspInit+0x44>)
 8000898:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800089a:	2201      	movs	r2, #1
 800089c:	4013      	ands	r3, r2
 800089e:	607b      	str	r3, [r7, #4]
 80008a0:	687b      	ldr	r3, [r7, #4]
	__HAL_RCC_PWR_CLK_ENABLE();
 80008a2:	4b09      	ldr	r3, [pc, #36]	; (80008c8 <HAL_MspInit+0x44>)
 80008a4:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80008a6:	4b08      	ldr	r3, [pc, #32]	; (80008c8 <HAL_MspInit+0x44>)
 80008a8:	2180      	movs	r1, #128	; 0x80
 80008aa:	0549      	lsls	r1, r1, #21
 80008ac:	430a      	orrs	r2, r1
 80008ae:	63da      	str	r2, [r3, #60]	; 0x3c
 80008b0:	4b05      	ldr	r3, [pc, #20]	; (80008c8 <HAL_MspInit+0x44>)
 80008b2:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80008b4:	2380      	movs	r3, #128	; 0x80
 80008b6:	055b      	lsls	r3, r3, #21
 80008b8:	4013      	ands	r3, r2
 80008ba:	603b      	str	r3, [r7, #0]
 80008bc:	683b      	ldr	r3, [r7, #0]
	/* System interrupt init*/

	/* USER CODE BEGIN MspInit 1 */

	/* USER CODE END MspInit 1 */
}
 80008be:	46c0      	nop			; (mov r8, r8)
 80008c0:	46bd      	mov	sp, r7
 80008c2:	b002      	add	sp, #8
 80008c4:	bd80      	pop	{r7, pc}
 80008c6:	46c0      	nop			; (mov r8, r8)
 80008c8:	40021000 	.word	0x40021000

080008cc <HAL_I2C_MspInit>:
 * @brief I2C MSP Initialization
 * This function configures the hardware resources used in this example
 * @param hi2c: I2C handle pointer
 * @retval None
 */
void HAL_I2C_MspInit(I2C_HandleTypeDef *hi2c) {
 80008cc:	b590      	push	{r4, r7, lr}
 80008ce:	b08b      	sub	sp, #44	; 0x2c
 80008d0:	af00      	add	r7, sp, #0
 80008d2:	6078      	str	r0, [r7, #4]
	GPIO_InitTypeDef GPIO_InitStruct = { 0 };
 80008d4:	2414      	movs	r4, #20
 80008d6:	193b      	adds	r3, r7, r4
 80008d8:	0018      	movs	r0, r3
 80008da:	2314      	movs	r3, #20
 80008dc:	001a      	movs	r2, r3
 80008de:	2100      	movs	r1, #0
 80008e0:	f002 fac2 	bl	8002e68 <memset>
	if (hi2c->Instance == I2C2) {
 80008e4:	687b      	ldr	r3, [r7, #4]
 80008e6:	681b      	ldr	r3, [r3, #0]
 80008e8:	4a1c      	ldr	r2, [pc, #112]	; (800095c <HAL_I2C_MspInit+0x90>)
 80008ea:	4293      	cmp	r3, r2
 80008ec:	d131      	bne.n	8000952 <HAL_I2C_MspInit+0x86>
		/* USER CODE BEGIN I2C2_MspInit 0 */

		/* USER CODE END I2C2_MspInit 0 */

		__HAL_RCC_GPIOA_CLK_ENABLE();
 80008ee:	4b1c      	ldr	r3, [pc, #112]	; (8000960 <HAL_I2C_MspInit+0x94>)
 80008f0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80008f2:	4b1b      	ldr	r3, [pc, #108]	; (8000960 <HAL_I2C_MspInit+0x94>)
 80008f4:	2101      	movs	r1, #1
 80008f6:	430a      	orrs	r2, r1
 80008f8:	635a      	str	r2, [r3, #52]	; 0x34
 80008fa:	4b19      	ldr	r3, [pc, #100]	; (8000960 <HAL_I2C_MspInit+0x94>)
 80008fc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80008fe:	2201      	movs	r2, #1
 8000900:	4013      	ands	r3, r2
 8000902:	613b      	str	r3, [r7, #16]
 8000904:	693b      	ldr	r3, [r7, #16]
		/**I2C2 GPIO Configuration
		 PA11 [PA9]     ------> I2C2_SCL
		 PA12 [PA10]     ------> I2C2_SDA
		 */
		GPIO_InitStruct.Pin = GPIO_PIN_11 | GPIO_PIN_12;
 8000906:	193b      	adds	r3, r7, r4
 8000908:	22c0      	movs	r2, #192	; 0xc0
 800090a:	0152      	lsls	r2, r2, #5
 800090c:	601a      	str	r2, [r3, #0]
		GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800090e:	0021      	movs	r1, r4
 8000910:	187b      	adds	r3, r7, r1
 8000912:	2212      	movs	r2, #18
 8000914:	605a      	str	r2, [r3, #4]
		GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000916:	187b      	adds	r3, r7, r1
 8000918:	2200      	movs	r2, #0
 800091a:	609a      	str	r2, [r3, #8]
		GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800091c:	187b      	adds	r3, r7, r1
 800091e:	2200      	movs	r2, #0
 8000920:	60da      	str	r2, [r3, #12]
		GPIO_InitStruct.Alternate = GPIO_AF6_I2C2;
 8000922:	187b      	adds	r3, r7, r1
 8000924:	2206      	movs	r2, #6
 8000926:	611a      	str	r2, [r3, #16]
		HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000928:	187a      	adds	r2, r7, r1
 800092a:	23a0      	movs	r3, #160	; 0xa0
 800092c:	05db      	lsls	r3, r3, #23
 800092e:	0011      	movs	r1, r2
 8000930:	0018      	movs	r0, r3
 8000932:	f000 fa3d 	bl	8000db0 <HAL_GPIO_Init>

		/* Peripheral clock enable */
		__HAL_RCC_I2C2_CLK_ENABLE();
 8000936:	4b0a      	ldr	r3, [pc, #40]	; (8000960 <HAL_I2C_MspInit+0x94>)
 8000938:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800093a:	4b09      	ldr	r3, [pc, #36]	; (8000960 <HAL_I2C_MspInit+0x94>)
 800093c:	2180      	movs	r1, #128	; 0x80
 800093e:	03c9      	lsls	r1, r1, #15
 8000940:	430a      	orrs	r2, r1
 8000942:	63da      	str	r2, [r3, #60]	; 0x3c
 8000944:	4b06      	ldr	r3, [pc, #24]	; (8000960 <HAL_I2C_MspInit+0x94>)
 8000946:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8000948:	2380      	movs	r3, #128	; 0x80
 800094a:	03db      	lsls	r3, r3, #15
 800094c:	4013      	ands	r3, r2
 800094e:	60fb      	str	r3, [r7, #12]
 8000950:	68fb      	ldr	r3, [r7, #12]
		/* USER CODE BEGIN I2C2_MspInit 1 */

		/* USER CODE END I2C2_MspInit 1 */
	}

}
 8000952:	46c0      	nop			; (mov r8, r8)
 8000954:	46bd      	mov	sp, r7
 8000956:	b00b      	add	sp, #44	; 0x2c
 8000958:	bd90      	pop	{r4, r7, pc}
 800095a:	46c0      	nop			; (mov r8, r8)
 800095c:	40005800 	.word	0x40005800
 8000960:	40021000 	.word	0x40021000

08000964 <HAL_UART_MspInit>:
 * @brief UART MSP Initialization
 * This function configures the hardware resources used in this example
 * @param huart: UART handle pointer
 * @retval None
 */
void HAL_UART_MspInit(UART_HandleTypeDef *huart) {
 8000964:	b590      	push	{r4, r7, lr}
 8000966:	b08b      	sub	sp, #44	; 0x2c
 8000968:	af00      	add	r7, sp, #0
 800096a:	6078      	str	r0, [r7, #4]
	GPIO_InitTypeDef GPIO_InitStruct = { 0 };
 800096c:	2414      	movs	r4, #20
 800096e:	193b      	adds	r3, r7, r4
 8000970:	0018      	movs	r0, r3
 8000972:	2314      	movs	r3, #20
 8000974:	001a      	movs	r2, r3
 8000976:	2100      	movs	r1, #0
 8000978:	f002 fa76 	bl	8002e68 <memset>
	if (huart->Instance == USART2) {
 800097c:	687b      	ldr	r3, [r7, #4]
 800097e:	681b      	ldr	r3, [r3, #0]
 8000980:	4a1b      	ldr	r2, [pc, #108]	; (80009f0 <HAL_UART_MspInit+0x8c>)
 8000982:	4293      	cmp	r3, r2
 8000984:	d130      	bne.n	80009e8 <HAL_UART_MspInit+0x84>
		/* USER CODE BEGIN USART2_MspInit 0 */

		/* USER CODE END USART2_MspInit 0 */
		/* Peripheral clock enable */
		__HAL_RCC_USART2_CLK_ENABLE();
 8000986:	4b1b      	ldr	r3, [pc, #108]	; (80009f4 <HAL_UART_MspInit+0x90>)
 8000988:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800098a:	4b1a      	ldr	r3, [pc, #104]	; (80009f4 <HAL_UART_MspInit+0x90>)
 800098c:	2180      	movs	r1, #128	; 0x80
 800098e:	0289      	lsls	r1, r1, #10
 8000990:	430a      	orrs	r2, r1
 8000992:	63da      	str	r2, [r3, #60]	; 0x3c
 8000994:	4b17      	ldr	r3, [pc, #92]	; (80009f4 <HAL_UART_MspInit+0x90>)
 8000996:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8000998:	2380      	movs	r3, #128	; 0x80
 800099a:	029b      	lsls	r3, r3, #10
 800099c:	4013      	ands	r3, r2
 800099e:	613b      	str	r3, [r7, #16]
 80009a0:	693b      	ldr	r3, [r7, #16]

		__HAL_RCC_GPIOA_CLK_ENABLE();
 80009a2:	4b14      	ldr	r3, [pc, #80]	; (80009f4 <HAL_UART_MspInit+0x90>)
 80009a4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80009a6:	4b13      	ldr	r3, [pc, #76]	; (80009f4 <HAL_UART_MspInit+0x90>)
 80009a8:	2101      	movs	r1, #1
 80009aa:	430a      	orrs	r2, r1
 80009ac:	635a      	str	r2, [r3, #52]	; 0x34
 80009ae:	4b11      	ldr	r3, [pc, #68]	; (80009f4 <HAL_UART_MspInit+0x90>)
 80009b0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80009b2:	2201      	movs	r2, #1
 80009b4:	4013      	ands	r3, r2
 80009b6:	60fb      	str	r3, [r7, #12]
 80009b8:	68fb      	ldr	r3, [r7, #12]
		/**USART2 GPIO Configuration
		 PA2     ------> USART2_TX
		 PA3     ------> USART2_RX
		 */
		GPIO_InitStruct.Pin = T_VCP_TX_Pin | T_VCP_RX_Pin;
 80009ba:	0021      	movs	r1, r4
 80009bc:	187b      	adds	r3, r7, r1
 80009be:	220c      	movs	r2, #12
 80009c0:	601a      	str	r2, [r3, #0]
		GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80009c2:	187b      	adds	r3, r7, r1
 80009c4:	2202      	movs	r2, #2
 80009c6:	605a      	str	r2, [r3, #4]
		GPIO_InitStruct.Pull = GPIO_PULLUP;
 80009c8:	187b      	adds	r3, r7, r1
 80009ca:	2201      	movs	r2, #1
 80009cc:	609a      	str	r2, [r3, #8]
		GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009ce:	187b      	adds	r3, r7, r1
 80009d0:	2200      	movs	r2, #0
 80009d2:	60da      	str	r2, [r3, #12]
		GPIO_InitStruct.Alternate = GPIO_AF1_USART2;
 80009d4:	187b      	adds	r3, r7, r1
 80009d6:	2201      	movs	r2, #1
 80009d8:	611a      	str	r2, [r3, #16]
		HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80009da:	187a      	adds	r2, r7, r1
 80009dc:	23a0      	movs	r3, #160	; 0xa0
 80009de:	05db      	lsls	r3, r3, #23
 80009e0:	0011      	movs	r1, r2
 80009e2:	0018      	movs	r0, r3
 80009e4:	f000 f9e4 	bl	8000db0 <HAL_GPIO_Init>
		/* USER CODE BEGIN USART2_MspInit 1 */

		/* USER CODE END USART2_MspInit 1 */
	}

}
 80009e8:	46c0      	nop			; (mov r8, r8)
 80009ea:	46bd      	mov	sp, r7
 80009ec:	b00b      	add	sp, #44	; 0x2c
 80009ee:	bd90      	pop	{r4, r7, pc}
 80009f0:	40004400 	.word	0x40004400
 80009f4:	40021000 	.word	0x40021000

080009f8 <NMI_Handler>:
/*           Cortex-M0+ Processor Interruption and Exception Handlers          */
/******************************************************************************/
/**
 * @brief This function handles Non maskable interrupt.
 */
void NMI_Handler(void) {
 80009f8:	b580      	push	{r7, lr}
 80009fa:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN NonMaskableInt_IRQn 0 */

	/* USER CODE END NonMaskableInt_IRQn 0 */
	/* USER CODE BEGIN NonMaskableInt_IRQn 1 */
	while (1) {
 80009fc:	e7fe      	b.n	80009fc <NMI_Handler+0x4>

080009fe <HardFault_Handler>:
}

/**
 * @brief This function handles Hard fault interrupt.
 */
void HardFault_Handler(void) {
 80009fe:	b580      	push	{r7, lr}
 8000a00:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN HardFault_IRQn 0 */

	/* USER CODE END HardFault_IRQn 0 */
	while (1) {
 8000a02:	e7fe      	b.n	8000a02 <HardFault_Handler+0x4>

08000a04 <SVC_Handler>:
}

/**
 * @brief This function handles System service call via SWI instruction.
 */
void SVC_Handler(void) {
 8000a04:	b580      	push	{r7, lr}
 8000a06:	af00      	add	r7, sp, #0

	/* USER CODE END SVC_IRQn 0 */
	/* USER CODE BEGIN SVC_IRQn 1 */

	/* USER CODE END SVC_IRQn 1 */
}
 8000a08:	46c0      	nop			; (mov r8, r8)
 8000a0a:	46bd      	mov	sp, r7
 8000a0c:	bd80      	pop	{r7, pc}

08000a0e <PendSV_Handler>:

/**
 * @brief This function handles Pendable request for system service.
 */
void PendSV_Handler(void) {
 8000a0e:	b580      	push	{r7, lr}
 8000a10:	af00      	add	r7, sp, #0

	/* USER CODE END PendSV_IRQn 0 */
	/* USER CODE BEGIN PendSV_IRQn 1 */

	/* USER CODE END PendSV_IRQn 1 */
}
 8000a12:	46c0      	nop			; (mov r8, r8)
 8000a14:	46bd      	mov	sp, r7
 8000a16:	bd80      	pop	{r7, pc}

08000a18 <SysTick_Handler>:

/**
 * @brief This function handles System tick timer.
 */
void SysTick_Handler(void) {
 8000a18:	b580      	push	{r7, lr}
 8000a1a:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN SysTick_IRQn 0 */

	/* USER CODE END SysTick_IRQn 0 */
	HAL_IncTick();
 8000a1c:	f000 f8d4 	bl	8000bc8 <HAL_IncTick>
	/* USER CODE BEGIN SysTick_IRQn 1 */

	/* USER CODE END SysTick_IRQn 1 */
}
 8000a20:	46c0      	nop			; (mov r8, r8)
 8000a22:	46bd      	mov	sp, r7
 8000a24:	bd80      	pop	{r7, pc}
	...

08000a28 <_sbrk>:
 * reserved size, please increase the '_Min_Stack_Size'.
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void* _sbrk(ptrdiff_t incr) {
 8000a28:	b580      	push	{r7, lr}
 8000a2a:	b086      	sub	sp, #24
 8000a2c:	af00      	add	r7, sp, #0
 8000a2e:	6078      	str	r0, [r7, #4]
	extern uint8_t _end; /* Symbol defined in the linker script */
	extern uint8_t _estack; /* Symbol defined in the linker script */
	extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
	const uint32_t stack_limit = (uint32_t) &_estack
 8000a30:	4a14      	ldr	r2, [pc, #80]	; (8000a84 <_sbrk+0x5c>)
			- (uint32_t) &_Min_Stack_Size;
 8000a32:	4b15      	ldr	r3, [pc, #84]	; (8000a88 <_sbrk+0x60>)
	const uint32_t stack_limit = (uint32_t) &_estack
 8000a34:	1ad3      	subs	r3, r2, r3
 8000a36:	617b      	str	r3, [r7, #20]
	const uint8_t *max_heap = (uint8_t*) stack_limit;
 8000a38:	697b      	ldr	r3, [r7, #20]
 8000a3a:	613b      	str	r3, [r7, #16]
	uint8_t *prev_heap_end;

	/* Initialize heap end at first call */
	if (NULL == __sbrk_heap_end) {
 8000a3c:	4b13      	ldr	r3, [pc, #76]	; (8000a8c <_sbrk+0x64>)
 8000a3e:	681b      	ldr	r3, [r3, #0]
 8000a40:	2b00      	cmp	r3, #0
 8000a42:	d102      	bne.n	8000a4a <_sbrk+0x22>
		__sbrk_heap_end = &_end;
 8000a44:	4b11      	ldr	r3, [pc, #68]	; (8000a8c <_sbrk+0x64>)
 8000a46:	4a12      	ldr	r2, [pc, #72]	; (8000a90 <_sbrk+0x68>)
 8000a48:	601a      	str	r2, [r3, #0]
	}

	/* Protect heap from growing into the reserved MSP stack */
	if (__sbrk_heap_end + incr > max_heap) {
 8000a4a:	4b10      	ldr	r3, [pc, #64]	; (8000a8c <_sbrk+0x64>)
 8000a4c:	681a      	ldr	r2, [r3, #0]
 8000a4e:	687b      	ldr	r3, [r7, #4]
 8000a50:	18d3      	adds	r3, r2, r3
 8000a52:	693a      	ldr	r2, [r7, #16]
 8000a54:	429a      	cmp	r2, r3
 8000a56:	d207      	bcs.n	8000a68 <_sbrk+0x40>
		errno = ENOMEM;
 8000a58:	f002 fa0e 	bl	8002e78 <__errno>
 8000a5c:	0003      	movs	r3, r0
 8000a5e:	220c      	movs	r2, #12
 8000a60:	601a      	str	r2, [r3, #0]
		return (void*) -1;
 8000a62:	2301      	movs	r3, #1
 8000a64:	425b      	negs	r3, r3
 8000a66:	e009      	b.n	8000a7c <_sbrk+0x54>
	}

	prev_heap_end = __sbrk_heap_end;
 8000a68:	4b08      	ldr	r3, [pc, #32]	; (8000a8c <_sbrk+0x64>)
 8000a6a:	681b      	ldr	r3, [r3, #0]
 8000a6c:	60fb      	str	r3, [r7, #12]
	__sbrk_heap_end += incr;
 8000a6e:	4b07      	ldr	r3, [pc, #28]	; (8000a8c <_sbrk+0x64>)
 8000a70:	681a      	ldr	r2, [r3, #0]
 8000a72:	687b      	ldr	r3, [r7, #4]
 8000a74:	18d2      	adds	r2, r2, r3
 8000a76:	4b05      	ldr	r3, [pc, #20]	; (8000a8c <_sbrk+0x64>)
 8000a78:	601a      	str	r2, [r3, #0]

	return (void*) prev_heap_end;
 8000a7a:	68fb      	ldr	r3, [r7, #12]
}
 8000a7c:	0018      	movs	r0, r3
 8000a7e:	46bd      	mov	sp, r7
 8000a80:	b006      	add	sp, #24
 8000a82:	bd80      	pop	{r7, pc}
 8000a84:	20002000 	.word	0x20002000
 8000a88:	00000400 	.word	0x00000400
 8000a8c:	200001c4 	.word	0x200001c4
 8000a90:	20000318 	.word	0x20000318

08000a94 <SystemInit>:
/**
 * @brief  Setup the microcontroller system.
 * @param  None
 * @retval None
 */
void SystemInit(void) {
 8000a94:	b580      	push	{r7, lr}
 8000a96:	af00      	add	r7, sp, #0
	/* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000a98:	46c0      	nop			; (mov r8, r8)
 8000a9a:	46bd      	mov	sp, r7
 8000a9c:	bd80      	pop	{r7, pc}
	...

08000aa0 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000aa0:	480d      	ldr	r0, [pc, #52]	; (8000ad8 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000aa2:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
  bl  SystemInit
 8000aa4:	f7ff fff6 	bl	8000a94 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000aa8:	480c      	ldr	r0, [pc, #48]	; (8000adc <LoopForever+0x6>)
  ldr r1, =_edata
 8000aaa:	490d      	ldr	r1, [pc, #52]	; (8000ae0 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000aac:	4a0d      	ldr	r2, [pc, #52]	; (8000ae4 <LoopForever+0xe>)
  movs r3, #0
 8000aae:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000ab0:	e002      	b.n	8000ab8 <LoopCopyDataInit>

08000ab2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000ab2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000ab4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000ab6:	3304      	adds	r3, #4

08000ab8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000ab8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000aba:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000abc:	d3f9      	bcc.n	8000ab2 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000abe:	4a0a      	ldr	r2, [pc, #40]	; (8000ae8 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000ac0:	4c0a      	ldr	r4, [pc, #40]	; (8000aec <LoopForever+0x16>)
  movs r3, #0
 8000ac2:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000ac4:	e001      	b.n	8000aca <LoopFillZerobss>

08000ac6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000ac6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000ac8:	3204      	adds	r2, #4

08000aca <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000aca:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000acc:	d3fb      	bcc.n	8000ac6 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8000ace:	f002 f9d9 	bl	8002e84 <__libc_init_array>
/* Call the application s entry point.*/
  bl main
 8000ad2:	f7ff fcf7 	bl	80004c4 <main>

08000ad6 <LoopForever>:

LoopForever:
  b LoopForever
 8000ad6:	e7fe      	b.n	8000ad6 <LoopForever>
  ldr   r0, =_estack
 8000ad8:	20002000 	.word	0x20002000
  ldr r0, =_sdata
 8000adc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000ae0:	2000005c 	.word	0x2000005c
  ldr r2, =_sidata
 8000ae4:	08003884 	.word	0x08003884
  ldr r2, =_sbss
 8000ae8:	2000005c 	.word	0x2000005c
  ldr r4, =_ebss
 8000aec:	20000314 	.word	0x20000314

08000af0 <ADC1_IRQHandler>:
 * @retval None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000af0:	e7fe      	b.n	8000af0 <ADC1_IRQHandler>
	...

08000af4 <HAL_Init>:
 *         Once done, time base tick starts incrementing: the tick variable counter is incremented
 *         each 1ms in the SysTick_Handler() interrupt handler.
 *
 * @retval HAL status
 */
HAL_StatusTypeDef HAL_Init(void) {
 8000af4:	b580      	push	{r7, lr}
 8000af6:	b082      	sub	sp, #8
 8000af8:	af00      	add	r7, sp, #0
	HAL_StatusTypeDef status = HAL_OK;
 8000afa:	1dfb      	adds	r3, r7, #7
 8000afc:	2200      	movs	r2, #0
 8000afe:	701a      	strb	r2, [r3, #0]
#if (INSTRUCTION_CACHE_ENABLE == 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
	__HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000b00:	4b0b      	ldr	r3, [pc, #44]	; (8000b30 <HAL_Init+0x3c>)
 8000b02:	681a      	ldr	r2, [r3, #0]
 8000b04:	4b0a      	ldr	r3, [pc, #40]	; (8000b30 <HAL_Init+0x3c>)
 8000b06:	2180      	movs	r1, #128	; 0x80
 8000b08:	0049      	lsls	r1, r1, #1
 8000b0a:	430a      	orrs	r2, r1
 8000b0c:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

	/* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
	if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK) {
 8000b0e:	2000      	movs	r0, #0
 8000b10:	f000 f810 	bl	8000b34 <HAL_InitTick>
 8000b14:	1e03      	subs	r3, r0, #0
 8000b16:	d003      	beq.n	8000b20 <HAL_Init+0x2c>
		status = HAL_ERROR;
 8000b18:	1dfb      	adds	r3, r7, #7
 8000b1a:	2201      	movs	r2, #1
 8000b1c:	701a      	strb	r2, [r3, #0]
 8000b1e:	e001      	b.n	8000b24 <HAL_Init+0x30>
	} else {
		/* Init the low level hardware */
		HAL_MspInit();
 8000b20:	f7ff feb0 	bl	8000884 <HAL_MspInit>
	}

	/* Return function status */
	return status;
 8000b24:	1dfb      	adds	r3, r7, #7
 8000b26:	781b      	ldrb	r3, [r3, #0]
}
 8000b28:	0018      	movs	r0, r3
 8000b2a:	46bd      	mov	sp, r7
 8000b2c:	b002      	add	sp, #8
 8000b2e:	bd80      	pop	{r7, pc}
 8000b30:	40022000 	.word	0x40022000

08000b34 <HAL_InitTick>:
 *       The function is declared as __weak  to be overwritten  in case of other
 *       implementation  in user file.
 * @param TickPriority Tick interrupt priority.
 * @retval HAL status
 */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority) {
 8000b34:	b590      	push	{r4, r7, lr}
 8000b36:	b085      	sub	sp, #20
 8000b38:	af00      	add	r7, sp, #0
 8000b3a:	6078      	str	r0, [r7, #4]
	HAL_StatusTypeDef status = HAL_OK;
 8000b3c:	230f      	movs	r3, #15
 8000b3e:	18fb      	adds	r3, r7, r3
 8000b40:	2200      	movs	r2, #0
 8000b42:	701a      	strb	r2, [r3, #0]

	/* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
	if ((uint32_t) uwTickFreq != 0U) {
 8000b44:	4b1d      	ldr	r3, [pc, #116]	; (8000bbc <HAL_InitTick+0x88>)
 8000b46:	781b      	ldrb	r3, [r3, #0]
 8000b48:	2b00      	cmp	r3, #0
 8000b4a:	d02b      	beq.n	8000ba4 <HAL_InitTick+0x70>
		/*Configure the SysTick to have interrupt in 1ms time basis*/
		if (HAL_SYSTICK_Config(
 8000b4c:	4b1c      	ldr	r3, [pc, #112]	; (8000bc0 <HAL_InitTick+0x8c>)
 8000b4e:	681c      	ldr	r4, [r3, #0]
				SystemCoreClock / (1000U / (uint32_t) uwTickFreq)) == 0U) {
 8000b50:	4b1a      	ldr	r3, [pc, #104]	; (8000bbc <HAL_InitTick+0x88>)
 8000b52:	781b      	ldrb	r3, [r3, #0]
 8000b54:	0019      	movs	r1, r3
 8000b56:	23fa      	movs	r3, #250	; 0xfa
 8000b58:	0098      	lsls	r0, r3, #2
 8000b5a:	f7ff fadd 	bl	8000118 <__udivsi3>
 8000b5e:	0003      	movs	r3, r0
		if (HAL_SYSTICK_Config(
 8000b60:	0019      	movs	r1, r3
 8000b62:	0020      	movs	r0, r4
 8000b64:	f7ff fad8 	bl	8000118 <__udivsi3>
 8000b68:	0003      	movs	r3, r0
 8000b6a:	0018      	movs	r0, r3
 8000b6c:	f000 f913 	bl	8000d96 <HAL_SYSTICK_Config>
 8000b70:	1e03      	subs	r3, r0, #0
 8000b72:	d112      	bne.n	8000b9a <HAL_InitTick+0x66>
			/* Configure the SysTick IRQ priority */
			if (TickPriority < (1UL << __NVIC_PRIO_BITS)) {
 8000b74:	687b      	ldr	r3, [r7, #4]
 8000b76:	2b03      	cmp	r3, #3
 8000b78:	d80a      	bhi.n	8000b90 <HAL_InitTick+0x5c>
				HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000b7a:	6879      	ldr	r1, [r7, #4]
 8000b7c:	2301      	movs	r3, #1
 8000b7e:	425b      	negs	r3, r3
 8000b80:	2200      	movs	r2, #0
 8000b82:	0018      	movs	r0, r3
 8000b84:	f000 f8f2 	bl	8000d6c <HAL_NVIC_SetPriority>
				uwTickPrio = TickPriority;
 8000b88:	4b0e      	ldr	r3, [pc, #56]	; (8000bc4 <HAL_InitTick+0x90>)
 8000b8a:	687a      	ldr	r2, [r7, #4]
 8000b8c:	601a      	str	r2, [r3, #0]
 8000b8e:	e00d      	b.n	8000bac <HAL_InitTick+0x78>
			} else {
				status = HAL_ERROR;
 8000b90:	230f      	movs	r3, #15
 8000b92:	18fb      	adds	r3, r7, r3
 8000b94:	2201      	movs	r2, #1
 8000b96:	701a      	strb	r2, [r3, #0]
 8000b98:	e008      	b.n	8000bac <HAL_InitTick+0x78>
			}
		} else {
			status = HAL_ERROR;
 8000b9a:	230f      	movs	r3, #15
 8000b9c:	18fb      	adds	r3, r7, r3
 8000b9e:	2201      	movs	r2, #1
 8000ba0:	701a      	strb	r2, [r3, #0]
 8000ba2:	e003      	b.n	8000bac <HAL_InitTick+0x78>
		}
	} else {
		status = HAL_ERROR;
 8000ba4:	230f      	movs	r3, #15
 8000ba6:	18fb      	adds	r3, r7, r3
 8000ba8:	2201      	movs	r2, #1
 8000baa:	701a      	strb	r2, [r3, #0]
	}

	/* Return function status */
	return status;
 8000bac:	230f      	movs	r3, #15
 8000bae:	18fb      	adds	r3, r7, r3
 8000bb0:	781b      	ldrb	r3, [r3, #0]
}
 8000bb2:	0018      	movs	r0, r3
 8000bb4:	46bd      	mov	sp, r7
 8000bb6:	b005      	add	sp, #20
 8000bb8:	bd90      	pop	{r4, r7, pc}
 8000bba:	46c0      	nop			; (mov r8, r8)
 8000bbc:	20000008 	.word	0x20000008
 8000bc0:	20000000 	.word	0x20000000
 8000bc4:	20000004 	.word	0x20000004

08000bc8 <HAL_IncTick>:
 *       in SysTick ISR.
 * @note This function is declared as __weak to be overwritten in case of other
 *      implementations in user file.
 * @retval None
 */
__weak void HAL_IncTick(void) {
 8000bc8:	b580      	push	{r7, lr}
 8000bca:	af00      	add	r7, sp, #0
	uwTick += (uint32_t) uwTickFreq;
 8000bcc:	4b05      	ldr	r3, [pc, #20]	; (8000be4 <HAL_IncTick+0x1c>)
 8000bce:	781b      	ldrb	r3, [r3, #0]
 8000bd0:	001a      	movs	r2, r3
 8000bd2:	4b05      	ldr	r3, [pc, #20]	; (8000be8 <HAL_IncTick+0x20>)
 8000bd4:	681b      	ldr	r3, [r3, #0]
 8000bd6:	18d2      	adds	r2, r2, r3
 8000bd8:	4b03      	ldr	r3, [pc, #12]	; (8000be8 <HAL_IncTick+0x20>)
 8000bda:	601a      	str	r2, [r3, #0]
}
 8000bdc:	46c0      	nop			; (mov r8, r8)
 8000bde:	46bd      	mov	sp, r7
 8000be0:	bd80      	pop	{r7, pc}
 8000be2:	46c0      	nop			; (mov r8, r8)
 8000be4:	20000008 	.word	0x20000008
 8000be8:	200001c8 	.word	0x200001c8

08000bec <HAL_GetTick>:
 * @brief Provides a tick value in millisecond.
 * @note This function is declared as __weak to be overwritten in case of other
 *       implementations in user file.
 * @retval tick value
 */
__weak uint32_t HAL_GetTick(void) {
 8000bec:	b580      	push	{r7, lr}
 8000bee:	af00      	add	r7, sp, #0
	return uwTick;
 8000bf0:	4b02      	ldr	r3, [pc, #8]	; (8000bfc <HAL_GetTick+0x10>)
 8000bf2:	681b      	ldr	r3, [r3, #0]
}
 8000bf4:	0018      	movs	r0, r3
 8000bf6:	46bd      	mov	sp, r7
 8000bf8:	bd80      	pop	{r7, pc}
 8000bfa:	46c0      	nop			; (mov r8, r8)
 8000bfc:	200001c8 	.word	0x200001c8

08000c00 <HAL_Delay>:
 * @note This function is declared as __weak to be overwritten in case of other
 *       implementations in user file.
 * @param Delay  specifies the delay time length, in milliseconds.
 * @retval None
 */
__weak void HAL_Delay(uint32_t Delay) {
 8000c00:	b580      	push	{r7, lr}
 8000c02:	b084      	sub	sp, #16
 8000c04:	af00      	add	r7, sp, #0
 8000c06:	6078      	str	r0, [r7, #4]
	uint32_t tickstart = HAL_GetTick();
 8000c08:	f7ff fff0 	bl	8000bec <HAL_GetTick>
 8000c0c:	0003      	movs	r3, r0
 8000c0e:	60bb      	str	r3, [r7, #8]
	uint32_t wait = Delay;
 8000c10:	687b      	ldr	r3, [r7, #4]
 8000c12:	60fb      	str	r3, [r7, #12]

	/* Add a freq to guarantee minimum wait */
	if (wait < HAL_MAX_DELAY) {
 8000c14:	68fb      	ldr	r3, [r7, #12]
 8000c16:	3301      	adds	r3, #1
 8000c18:	d005      	beq.n	8000c26 <HAL_Delay+0x26>
		wait += (uint32_t) (uwTickFreq);
 8000c1a:	4b0a      	ldr	r3, [pc, #40]	; (8000c44 <HAL_Delay+0x44>)
 8000c1c:	781b      	ldrb	r3, [r3, #0]
 8000c1e:	001a      	movs	r2, r3
 8000c20:	68fb      	ldr	r3, [r7, #12]
 8000c22:	189b      	adds	r3, r3, r2
 8000c24:	60fb      	str	r3, [r7, #12]
	}

	while ((HAL_GetTick() - tickstart) < wait) {
 8000c26:	46c0      	nop			; (mov r8, r8)
 8000c28:	f7ff ffe0 	bl	8000bec <HAL_GetTick>
 8000c2c:	0002      	movs	r2, r0
 8000c2e:	68bb      	ldr	r3, [r7, #8]
 8000c30:	1ad3      	subs	r3, r2, r3
 8000c32:	68fa      	ldr	r2, [r7, #12]
 8000c34:	429a      	cmp	r2, r3
 8000c36:	d8f7      	bhi.n	8000c28 <HAL_Delay+0x28>
	}
}
 8000c38:	46c0      	nop			; (mov r8, r8)
 8000c3a:	46c0      	nop			; (mov r8, r8)
 8000c3c:	46bd      	mov	sp, r7
 8000c3e:	b004      	add	sp, #16
 8000c40:	bd80      	pop	{r7, pc}
 8000c42:	46c0      	nop			; (mov r8, r8)
 8000c44:	20000008 	.word	0x20000008

08000c48 <__NVIC_SetPriority>:
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority) {
 8000c48:	b590      	push	{r4, r7, lr}
 8000c4a:	b083      	sub	sp, #12
 8000c4c:	af00      	add	r7, sp, #0
 8000c4e:	0002      	movs	r2, r0
 8000c50:	6039      	str	r1, [r7, #0]
 8000c52:	1dfb      	adds	r3, r7, #7
 8000c54:	701a      	strb	r2, [r3, #0]
	if ((int32_t) (IRQn) >= 0) {
 8000c56:	1dfb      	adds	r3, r7, #7
 8000c58:	781b      	ldrb	r3, [r3, #0]
 8000c5a:	2b7f      	cmp	r3, #127	; 0x7f
 8000c5c:	d828      	bhi.n	8000cb0 <__NVIC_SetPriority+0x68>
		NVIC->IP[_IP_IDX(IRQn)] = ((uint32_t) (NVIC->IP[_IP_IDX(IRQn)]
 8000c5e:	4a2f      	ldr	r2, [pc, #188]	; (8000d1c <__NVIC_SetPriority+0xd4>)
 8000c60:	1dfb      	adds	r3, r7, #7
 8000c62:	781b      	ldrb	r3, [r3, #0]
 8000c64:	b25b      	sxtb	r3, r3
 8000c66:	089b      	lsrs	r3, r3, #2
 8000c68:	33c0      	adds	r3, #192	; 0xc0
 8000c6a:	009b      	lsls	r3, r3, #2
 8000c6c:	589b      	ldr	r3, [r3, r2]
				& ~(0xFFUL << _BIT_SHIFT(IRQn)))
 8000c6e:	1dfa      	adds	r2, r7, #7
 8000c70:	7812      	ldrb	r2, [r2, #0]
 8000c72:	0011      	movs	r1, r2
 8000c74:	2203      	movs	r2, #3
 8000c76:	400a      	ands	r2, r1
 8000c78:	00d2      	lsls	r2, r2, #3
 8000c7a:	21ff      	movs	r1, #255	; 0xff
 8000c7c:	4091      	lsls	r1, r2
 8000c7e:	000a      	movs	r2, r1
 8000c80:	43d2      	mvns	r2, r2
		NVIC->IP[_IP_IDX(IRQn)] = ((uint32_t) (NVIC->IP[_IP_IDX(IRQn)]
 8000c82:	401a      	ands	r2, r3
 8000c84:	0011      	movs	r1, r2
				| (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t) 0xFFUL)
 8000c86:	683b      	ldr	r3, [r7, #0]
 8000c88:	019b      	lsls	r3, r3, #6
 8000c8a:	22ff      	movs	r2, #255	; 0xff
 8000c8c:	401a      	ands	r2, r3
						<< _BIT_SHIFT(IRQn)));
 8000c8e:	1dfb      	adds	r3, r7, #7
 8000c90:	781b      	ldrb	r3, [r3, #0]
 8000c92:	0018      	movs	r0, r3
 8000c94:	2303      	movs	r3, #3
 8000c96:	4003      	ands	r3, r0
 8000c98:	00db      	lsls	r3, r3, #3
 8000c9a:	409a      	lsls	r2, r3
		NVIC->IP[_IP_IDX(IRQn)] = ((uint32_t) (NVIC->IP[_IP_IDX(IRQn)]
 8000c9c:	481f      	ldr	r0, [pc, #124]	; (8000d1c <__NVIC_SetPriority+0xd4>)
 8000c9e:	1dfb      	adds	r3, r7, #7
 8000ca0:	781b      	ldrb	r3, [r3, #0]
 8000ca2:	b25b      	sxtb	r3, r3
 8000ca4:	089b      	lsrs	r3, r3, #2
				| (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t) 0xFFUL)
 8000ca6:	430a      	orrs	r2, r1
		NVIC->IP[_IP_IDX(IRQn)] = ((uint32_t) (NVIC->IP[_IP_IDX(IRQn)]
 8000ca8:	33c0      	adds	r3, #192	; 0xc0
 8000caa:	009b      	lsls	r3, r3, #2
 8000cac:	501a      	str	r2, [r3, r0]
}
 8000cae:	e031      	b.n	8000d14 <__NVIC_SetPriority+0xcc>
		SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t) (SCB->SHP[_SHP_IDX(IRQn)]
 8000cb0:	4a1b      	ldr	r2, [pc, #108]	; (8000d20 <__NVIC_SetPriority+0xd8>)
 8000cb2:	1dfb      	adds	r3, r7, #7
 8000cb4:	781b      	ldrb	r3, [r3, #0]
 8000cb6:	0019      	movs	r1, r3
 8000cb8:	230f      	movs	r3, #15
 8000cba:	400b      	ands	r3, r1
 8000cbc:	3b08      	subs	r3, #8
 8000cbe:	089b      	lsrs	r3, r3, #2
 8000cc0:	3306      	adds	r3, #6
 8000cc2:	009b      	lsls	r3, r3, #2
 8000cc4:	18d3      	adds	r3, r2, r3
 8000cc6:	3304      	adds	r3, #4
 8000cc8:	681b      	ldr	r3, [r3, #0]
				& ~(0xFFUL << _BIT_SHIFT(IRQn)))
 8000cca:	1dfa      	adds	r2, r7, #7
 8000ccc:	7812      	ldrb	r2, [r2, #0]
 8000cce:	0011      	movs	r1, r2
 8000cd0:	2203      	movs	r2, #3
 8000cd2:	400a      	ands	r2, r1
 8000cd4:	00d2      	lsls	r2, r2, #3
 8000cd6:	21ff      	movs	r1, #255	; 0xff
 8000cd8:	4091      	lsls	r1, r2
 8000cda:	000a      	movs	r2, r1
 8000cdc:	43d2      	mvns	r2, r2
		SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t) (SCB->SHP[_SHP_IDX(IRQn)]
 8000cde:	401a      	ands	r2, r3
 8000ce0:	0011      	movs	r1, r2
				| (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t) 0xFFUL)
 8000ce2:	683b      	ldr	r3, [r7, #0]
 8000ce4:	019b      	lsls	r3, r3, #6
 8000ce6:	22ff      	movs	r2, #255	; 0xff
 8000ce8:	401a      	ands	r2, r3
						<< _BIT_SHIFT(IRQn)));
 8000cea:	1dfb      	adds	r3, r7, #7
 8000cec:	781b      	ldrb	r3, [r3, #0]
 8000cee:	0018      	movs	r0, r3
 8000cf0:	2303      	movs	r3, #3
 8000cf2:	4003      	ands	r3, r0
 8000cf4:	00db      	lsls	r3, r3, #3
 8000cf6:	409a      	lsls	r2, r3
		SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t) (SCB->SHP[_SHP_IDX(IRQn)]
 8000cf8:	4809      	ldr	r0, [pc, #36]	; (8000d20 <__NVIC_SetPriority+0xd8>)
 8000cfa:	1dfb      	adds	r3, r7, #7
 8000cfc:	781b      	ldrb	r3, [r3, #0]
 8000cfe:	001c      	movs	r4, r3
 8000d00:	230f      	movs	r3, #15
 8000d02:	4023      	ands	r3, r4
 8000d04:	3b08      	subs	r3, #8
 8000d06:	089b      	lsrs	r3, r3, #2
				| (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t) 0xFFUL)
 8000d08:	430a      	orrs	r2, r1
		SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t) (SCB->SHP[_SHP_IDX(IRQn)]
 8000d0a:	3306      	adds	r3, #6
 8000d0c:	009b      	lsls	r3, r3, #2
 8000d0e:	18c3      	adds	r3, r0, r3
 8000d10:	3304      	adds	r3, #4
 8000d12:	601a      	str	r2, [r3, #0]
}
 8000d14:	46c0      	nop			; (mov r8, r8)
 8000d16:	46bd      	mov	sp, r7
 8000d18:	b003      	add	sp, #12
 8000d1a:	bd90      	pop	{r4, r7, pc}
 8000d1c:	e000e100 	.word	0xe000e100
 8000d20:	e000ed00 	.word	0xe000ed00

08000d24 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000d24:	b580      	push	{r7, lr}
 8000d26:	b082      	sub	sp, #8
 8000d28:	af00      	add	r7, sp, #0
 8000d2a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000d2c:	687b      	ldr	r3, [r7, #4]
 8000d2e:	1e5a      	subs	r2, r3, #1
 8000d30:	2380      	movs	r3, #128	; 0x80
 8000d32:	045b      	lsls	r3, r3, #17
 8000d34:	429a      	cmp	r2, r3
 8000d36:	d301      	bcc.n	8000d3c <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000d38:	2301      	movs	r3, #1
 8000d3a:	e010      	b.n	8000d5e <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000d3c:	4b0a      	ldr	r3, [pc, #40]	; (8000d68 <SysTick_Config+0x44>)
 8000d3e:	687a      	ldr	r2, [r7, #4]
 8000d40:	3a01      	subs	r2, #1
 8000d42:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000d44:	2301      	movs	r3, #1
 8000d46:	425b      	negs	r3, r3
 8000d48:	2103      	movs	r1, #3
 8000d4a:	0018      	movs	r0, r3
 8000d4c:	f7ff ff7c 	bl	8000c48 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000d50:	4b05      	ldr	r3, [pc, #20]	; (8000d68 <SysTick_Config+0x44>)
 8000d52:	2200      	movs	r2, #0
 8000d54:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000d56:	4b04      	ldr	r3, [pc, #16]	; (8000d68 <SysTick_Config+0x44>)
 8000d58:	2207      	movs	r2, #7
 8000d5a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000d5c:	2300      	movs	r3, #0
}
 8000d5e:	0018      	movs	r0, r3
 8000d60:	46bd      	mov	sp, r7
 8000d62:	b002      	add	sp, #8
 8000d64:	bd80      	pop	{r7, pc}
 8000d66:	46c0      	nop			; (mov r8, r8)
 8000d68:	e000e010 	.word	0xe000e010

08000d6c <HAL_NVIC_SetPriority>:
  *         with stm32g0xx devices, this parameter is a dummy value and it is ignored, because
  *         no subpriority supported in Cortex M0+ based products.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000d6c:	b580      	push	{r7, lr}
 8000d6e:	b084      	sub	sp, #16
 8000d70:	af00      	add	r7, sp, #0
 8000d72:	60b9      	str	r1, [r7, #8]
 8000d74:	607a      	str	r2, [r7, #4]
 8000d76:	210f      	movs	r1, #15
 8000d78:	187b      	adds	r3, r7, r1
 8000d7a:	1c02      	adds	r2, r0, #0
 8000d7c:	701a      	strb	r2, [r3, #0]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(SubPriority);

  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn, PreemptPriority);
 8000d7e:	68ba      	ldr	r2, [r7, #8]
 8000d80:	187b      	adds	r3, r7, r1
 8000d82:	781b      	ldrb	r3, [r3, #0]
 8000d84:	b25b      	sxtb	r3, r3
 8000d86:	0011      	movs	r1, r2
 8000d88:	0018      	movs	r0, r3
 8000d8a:	f7ff ff5d 	bl	8000c48 <__NVIC_SetPriority>
}
 8000d8e:	46c0      	nop			; (mov r8, r8)
 8000d90:	46bd      	mov	sp, r7
 8000d92:	b004      	add	sp, #16
 8000d94:	bd80      	pop	{r7, pc}

08000d96 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000d96:	b580      	push	{r7, lr}
 8000d98:	b082      	sub	sp, #8
 8000d9a:	af00      	add	r7, sp, #0
 8000d9c:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 8000d9e:	687b      	ldr	r3, [r7, #4]
 8000da0:	0018      	movs	r0, r3
 8000da2:	f7ff ffbf 	bl	8000d24 <SysTick_Config>
 8000da6:	0003      	movs	r3, r0
}
 8000da8:	0018      	movs	r0, r3
 8000daa:	46bd      	mov	sp, r7
 8000dac:	b002      	add	sp, #8
 8000dae:	bd80      	pop	{r7, pc}

08000db0 <HAL_GPIO_Init>:
 * @param  GPIOx where x can be (A..F) to select the GPIO peripheral for STM32G0xx family
 * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
 *         the configuration information for the specified GPIO peripheral.
 * @retval None
 */
void HAL_GPIO_Init(GPIO_TypeDef *GPIOx, GPIO_InitTypeDef *GPIO_Init) {
 8000db0:	b580      	push	{r7, lr}
 8000db2:	b086      	sub	sp, #24
 8000db4:	af00      	add	r7, sp, #0
 8000db6:	6078      	str	r0, [r7, #4]
 8000db8:	6039      	str	r1, [r7, #0]
	uint32_t position = 0x00u;
 8000dba:	2300      	movs	r3, #0
 8000dbc:	617b      	str	r3, [r7, #20]
	assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
	assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
	assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

	/* Configure the port pins */
	while (((GPIO_Init->Pin) >> position) != 0x00u) {
 8000dbe:	e147      	b.n	8001050 <HAL_GPIO_Init+0x2a0>
		/* Get current io position */
		iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8000dc0:	683b      	ldr	r3, [r7, #0]
 8000dc2:	681b      	ldr	r3, [r3, #0]
 8000dc4:	2101      	movs	r1, #1
 8000dc6:	697a      	ldr	r2, [r7, #20]
 8000dc8:	4091      	lsls	r1, r2
 8000dca:	000a      	movs	r2, r1
 8000dcc:	4013      	ands	r3, r2
 8000dce:	60fb      	str	r3, [r7, #12]

		if (iocurrent != 0x00u) {
 8000dd0:	68fb      	ldr	r3, [r7, #12]
 8000dd2:	2b00      	cmp	r3, #0
 8000dd4:	d100      	bne.n	8000dd8 <HAL_GPIO_Init+0x28>
 8000dd6:	e138      	b.n	800104a <HAL_GPIO_Init+0x29a>
			/*--------------------- GPIO Mode Configuration ------------------------*/
			/* In case of Output or Alternate function mode selection */
			if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT)
 8000dd8:	683b      	ldr	r3, [r7, #0]
 8000dda:	685b      	ldr	r3, [r3, #4]
 8000ddc:	2203      	movs	r2, #3
 8000dde:	4013      	ands	r3, r2
 8000de0:	2b01      	cmp	r3, #1
 8000de2:	d005      	beq.n	8000df0 <HAL_GPIO_Init+0x40>
					|| ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)) {
 8000de4:	683b      	ldr	r3, [r7, #0]
 8000de6:	685b      	ldr	r3, [r3, #4]
 8000de8:	2203      	movs	r2, #3
 8000dea:	4013      	ands	r3, r2
 8000dec:	2b02      	cmp	r3, #2
 8000dee:	d130      	bne.n	8000e52 <HAL_GPIO_Init+0xa2>
				/* Check the Speed parameter */
				assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

				/* Configure the IO Speed */
				temp = GPIOx->OSPEEDR;
 8000df0:	687b      	ldr	r3, [r7, #4]
 8000df2:	689b      	ldr	r3, [r3, #8]
 8000df4:	613b      	str	r3, [r7, #16]
				temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8000df6:	697b      	ldr	r3, [r7, #20]
 8000df8:	005b      	lsls	r3, r3, #1
 8000dfa:	2203      	movs	r2, #3
 8000dfc:	409a      	lsls	r2, r3
 8000dfe:	0013      	movs	r3, r2
 8000e00:	43da      	mvns	r2, r3
 8000e02:	693b      	ldr	r3, [r7, #16]
 8000e04:	4013      	ands	r3, r2
 8000e06:	613b      	str	r3, [r7, #16]
				temp |= (GPIO_Init->Speed << (position * 2u));
 8000e08:	683b      	ldr	r3, [r7, #0]
 8000e0a:	68da      	ldr	r2, [r3, #12]
 8000e0c:	697b      	ldr	r3, [r7, #20]
 8000e0e:	005b      	lsls	r3, r3, #1
 8000e10:	409a      	lsls	r2, r3
 8000e12:	0013      	movs	r3, r2
 8000e14:	693a      	ldr	r2, [r7, #16]
 8000e16:	4313      	orrs	r3, r2
 8000e18:	613b      	str	r3, [r7, #16]
				GPIOx->OSPEEDR = temp;
 8000e1a:	687b      	ldr	r3, [r7, #4]
 8000e1c:	693a      	ldr	r2, [r7, #16]
 8000e1e:	609a      	str	r2, [r3, #8]

				/* Configure the IO Output Type */
				temp = GPIOx->OTYPER;
 8000e20:	687b      	ldr	r3, [r7, #4]
 8000e22:	685b      	ldr	r3, [r3, #4]
 8000e24:	613b      	str	r3, [r7, #16]
				temp &= ~(GPIO_OTYPER_OT0 << position);
 8000e26:	2201      	movs	r2, #1
 8000e28:	697b      	ldr	r3, [r7, #20]
 8000e2a:	409a      	lsls	r2, r3
 8000e2c:	0013      	movs	r3, r2
 8000e2e:	43da      	mvns	r2, r3
 8000e30:	693b      	ldr	r3, [r7, #16]
 8000e32:	4013      	ands	r3, r2
 8000e34:	613b      	str	r3, [r7, #16]
				temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos)
 8000e36:	683b      	ldr	r3, [r7, #0]
 8000e38:	685b      	ldr	r3, [r3, #4]
 8000e3a:	091b      	lsrs	r3, r3, #4
 8000e3c:	2201      	movs	r2, #1
 8000e3e:	401a      	ands	r2, r3
						<< position);
 8000e40:	697b      	ldr	r3, [r7, #20]
 8000e42:	409a      	lsls	r2, r3
 8000e44:	0013      	movs	r3, r2
				temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos)
 8000e46:	693a      	ldr	r2, [r7, #16]
 8000e48:	4313      	orrs	r3, r2
 8000e4a:	613b      	str	r3, [r7, #16]
				GPIOx->OTYPER = temp;
 8000e4c:	687b      	ldr	r3, [r7, #4]
 8000e4e:	693a      	ldr	r2, [r7, #16]
 8000e50:	605a      	str	r2, [r3, #4]
			}

			if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG) {
 8000e52:	683b      	ldr	r3, [r7, #0]
 8000e54:	685b      	ldr	r3, [r3, #4]
 8000e56:	2203      	movs	r2, #3
 8000e58:	4013      	ands	r3, r2
 8000e5a:	2b03      	cmp	r3, #3
 8000e5c:	d017      	beq.n	8000e8e <HAL_GPIO_Init+0xde>
				/* Check the Pull parameter */
				assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

				/* Activate the Pull-up or Pull down resistor for the current IO */
				temp = GPIOx->PUPDR;
 8000e5e:	687b      	ldr	r3, [r7, #4]
 8000e60:	68db      	ldr	r3, [r3, #12]
 8000e62:	613b      	str	r3, [r7, #16]
				temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8000e64:	697b      	ldr	r3, [r7, #20]
 8000e66:	005b      	lsls	r3, r3, #1
 8000e68:	2203      	movs	r2, #3
 8000e6a:	409a      	lsls	r2, r3
 8000e6c:	0013      	movs	r3, r2
 8000e6e:	43da      	mvns	r2, r3
 8000e70:	693b      	ldr	r3, [r7, #16]
 8000e72:	4013      	ands	r3, r2
 8000e74:	613b      	str	r3, [r7, #16]
				temp |= ((GPIO_Init->Pull) << (position * 2u));
 8000e76:	683b      	ldr	r3, [r7, #0]
 8000e78:	689a      	ldr	r2, [r3, #8]
 8000e7a:	697b      	ldr	r3, [r7, #20]
 8000e7c:	005b      	lsls	r3, r3, #1
 8000e7e:	409a      	lsls	r2, r3
 8000e80:	0013      	movs	r3, r2
 8000e82:	693a      	ldr	r2, [r7, #16]
 8000e84:	4313      	orrs	r3, r2
 8000e86:	613b      	str	r3, [r7, #16]
				GPIOx->PUPDR = temp;
 8000e88:	687b      	ldr	r3, [r7, #4]
 8000e8a:	693a      	ldr	r2, [r7, #16]
 8000e8c:	60da      	str	r2, [r3, #12]
			}

			/* In case of Alternate function mode selection */
			if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF) {
 8000e8e:	683b      	ldr	r3, [r7, #0]
 8000e90:	685b      	ldr	r3, [r3, #4]
 8000e92:	2203      	movs	r2, #3
 8000e94:	4013      	ands	r3, r2
 8000e96:	2b02      	cmp	r3, #2
 8000e98:	d123      	bne.n	8000ee2 <HAL_GPIO_Init+0x132>
				/* Check the Alternate function parameters */
				assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
				assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

				/* Configure Alternate function mapped with the current IO */
				temp = GPIOx->AFR[position >> 3u];
 8000e9a:	697b      	ldr	r3, [r7, #20]
 8000e9c:	08da      	lsrs	r2, r3, #3
 8000e9e:	687b      	ldr	r3, [r7, #4]
 8000ea0:	3208      	adds	r2, #8
 8000ea2:	0092      	lsls	r2, r2, #2
 8000ea4:	58d3      	ldr	r3, [r2, r3]
 8000ea6:	613b      	str	r3, [r7, #16]
				temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8000ea8:	697b      	ldr	r3, [r7, #20]
 8000eaa:	2207      	movs	r2, #7
 8000eac:	4013      	ands	r3, r2
 8000eae:	009b      	lsls	r3, r3, #2
 8000eb0:	220f      	movs	r2, #15
 8000eb2:	409a      	lsls	r2, r3
 8000eb4:	0013      	movs	r3, r2
 8000eb6:	43da      	mvns	r2, r3
 8000eb8:	693b      	ldr	r3, [r7, #16]
 8000eba:	4013      	ands	r3, r2
 8000ebc:	613b      	str	r3, [r7, #16]
				temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8000ebe:	683b      	ldr	r3, [r7, #0]
 8000ec0:	691a      	ldr	r2, [r3, #16]
 8000ec2:	697b      	ldr	r3, [r7, #20]
 8000ec4:	2107      	movs	r1, #7
 8000ec6:	400b      	ands	r3, r1
 8000ec8:	009b      	lsls	r3, r3, #2
 8000eca:	409a      	lsls	r2, r3
 8000ecc:	0013      	movs	r3, r2
 8000ece:	693a      	ldr	r2, [r7, #16]
 8000ed0:	4313      	orrs	r3, r2
 8000ed2:	613b      	str	r3, [r7, #16]
				GPIOx->AFR[position >> 3u] = temp;
 8000ed4:	697b      	ldr	r3, [r7, #20]
 8000ed6:	08da      	lsrs	r2, r3, #3
 8000ed8:	687b      	ldr	r3, [r7, #4]
 8000eda:	3208      	adds	r2, #8
 8000edc:	0092      	lsls	r2, r2, #2
 8000ede:	6939      	ldr	r1, [r7, #16]
 8000ee0:	50d1      	str	r1, [r2, r3]
			}

			/* Configure IO Direction mode (Input, Output, Alternate or Analog) */
			temp = GPIOx->MODER;
 8000ee2:	687b      	ldr	r3, [r7, #4]
 8000ee4:	681b      	ldr	r3, [r3, #0]
 8000ee6:	613b      	str	r3, [r7, #16]
			temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8000ee8:	697b      	ldr	r3, [r7, #20]
 8000eea:	005b      	lsls	r3, r3, #1
 8000eec:	2203      	movs	r2, #3
 8000eee:	409a      	lsls	r2, r3
 8000ef0:	0013      	movs	r3, r2
 8000ef2:	43da      	mvns	r2, r3
 8000ef4:	693b      	ldr	r3, [r7, #16]
 8000ef6:	4013      	ands	r3, r2
 8000ef8:	613b      	str	r3, [r7, #16]
			temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8000efa:	683b      	ldr	r3, [r7, #0]
 8000efc:	685b      	ldr	r3, [r3, #4]
 8000efe:	2203      	movs	r2, #3
 8000f00:	401a      	ands	r2, r3
 8000f02:	697b      	ldr	r3, [r7, #20]
 8000f04:	005b      	lsls	r3, r3, #1
 8000f06:	409a      	lsls	r2, r3
 8000f08:	0013      	movs	r3, r2
 8000f0a:	693a      	ldr	r2, [r7, #16]
 8000f0c:	4313      	orrs	r3, r2
 8000f0e:	613b      	str	r3, [r7, #16]
			GPIOx->MODER = temp;
 8000f10:	687b      	ldr	r3, [r7, #4]
 8000f12:	693a      	ldr	r2, [r7, #16]
 8000f14:	601a      	str	r2, [r3, #0]

			/*--------------------- EXTI Mode Configuration ------------------------*/
			/* Configure the External Interrupt or event for the current IO */
			if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u) {
 8000f16:	683b      	ldr	r3, [r7, #0]
 8000f18:	685a      	ldr	r2, [r3, #4]
 8000f1a:	23c0      	movs	r3, #192	; 0xc0
 8000f1c:	029b      	lsls	r3, r3, #10
 8000f1e:	4013      	ands	r3, r2
 8000f20:	d100      	bne.n	8000f24 <HAL_GPIO_Init+0x174>
 8000f22:	e092      	b.n	800104a <HAL_GPIO_Init+0x29a>
				temp = EXTI->EXTICR[position >> 2u];
 8000f24:	4a50      	ldr	r2, [pc, #320]	; (8001068 <HAL_GPIO_Init+0x2b8>)
 8000f26:	697b      	ldr	r3, [r7, #20]
 8000f28:	089b      	lsrs	r3, r3, #2
 8000f2a:	3318      	adds	r3, #24
 8000f2c:	009b      	lsls	r3, r3, #2
 8000f2e:	589b      	ldr	r3, [r3, r2]
 8000f30:	613b      	str	r3, [r7, #16]
				temp &= ~(0x0FuL << (8u * (position & 0x03u)));
 8000f32:	697b      	ldr	r3, [r7, #20]
 8000f34:	2203      	movs	r2, #3
 8000f36:	4013      	ands	r3, r2
 8000f38:	00db      	lsls	r3, r3, #3
 8000f3a:	220f      	movs	r2, #15
 8000f3c:	409a      	lsls	r2, r3
 8000f3e:	0013      	movs	r3, r2
 8000f40:	43da      	mvns	r2, r3
 8000f42:	693b      	ldr	r3, [r7, #16]
 8000f44:	4013      	ands	r3, r2
 8000f46:	613b      	str	r3, [r7, #16]
				temp |= (GPIO_GET_INDEX(GPIOx) << (8u * (position & 0x03u)));
 8000f48:	687a      	ldr	r2, [r7, #4]
 8000f4a:	23a0      	movs	r3, #160	; 0xa0
 8000f4c:	05db      	lsls	r3, r3, #23
 8000f4e:	429a      	cmp	r2, r3
 8000f50:	d013      	beq.n	8000f7a <HAL_GPIO_Init+0x1ca>
 8000f52:	687b      	ldr	r3, [r7, #4]
 8000f54:	4a45      	ldr	r2, [pc, #276]	; (800106c <HAL_GPIO_Init+0x2bc>)
 8000f56:	4293      	cmp	r3, r2
 8000f58:	d00d      	beq.n	8000f76 <HAL_GPIO_Init+0x1c6>
 8000f5a:	687b      	ldr	r3, [r7, #4]
 8000f5c:	4a44      	ldr	r2, [pc, #272]	; (8001070 <HAL_GPIO_Init+0x2c0>)
 8000f5e:	4293      	cmp	r3, r2
 8000f60:	d007      	beq.n	8000f72 <HAL_GPIO_Init+0x1c2>
 8000f62:	687b      	ldr	r3, [r7, #4]
 8000f64:	4a43      	ldr	r2, [pc, #268]	; (8001074 <HAL_GPIO_Init+0x2c4>)
 8000f66:	4293      	cmp	r3, r2
 8000f68:	d101      	bne.n	8000f6e <HAL_GPIO_Init+0x1be>
 8000f6a:	2303      	movs	r3, #3
 8000f6c:	e006      	b.n	8000f7c <HAL_GPIO_Init+0x1cc>
 8000f6e:	2305      	movs	r3, #5
 8000f70:	e004      	b.n	8000f7c <HAL_GPIO_Init+0x1cc>
 8000f72:	2302      	movs	r3, #2
 8000f74:	e002      	b.n	8000f7c <HAL_GPIO_Init+0x1cc>
 8000f76:	2301      	movs	r3, #1
 8000f78:	e000      	b.n	8000f7c <HAL_GPIO_Init+0x1cc>
 8000f7a:	2300      	movs	r3, #0
 8000f7c:	697a      	ldr	r2, [r7, #20]
 8000f7e:	2103      	movs	r1, #3
 8000f80:	400a      	ands	r2, r1
 8000f82:	00d2      	lsls	r2, r2, #3
 8000f84:	4093      	lsls	r3, r2
 8000f86:	693a      	ldr	r2, [r7, #16]
 8000f88:	4313      	orrs	r3, r2
 8000f8a:	613b      	str	r3, [r7, #16]
				EXTI->EXTICR[position >> 2u] = temp;
 8000f8c:	4936      	ldr	r1, [pc, #216]	; (8001068 <HAL_GPIO_Init+0x2b8>)
 8000f8e:	697b      	ldr	r3, [r7, #20]
 8000f90:	089b      	lsrs	r3, r3, #2
 8000f92:	3318      	adds	r3, #24
 8000f94:	009b      	lsls	r3, r3, #2
 8000f96:	693a      	ldr	r2, [r7, #16]
 8000f98:	505a      	str	r2, [r3, r1]

				/* Clear Rising Falling edge configuration */
				temp = EXTI->RTSR1;
 8000f9a:	4b33      	ldr	r3, [pc, #204]	; (8001068 <HAL_GPIO_Init+0x2b8>)
 8000f9c:	681b      	ldr	r3, [r3, #0]
 8000f9e:	613b      	str	r3, [r7, #16]
				temp &= ~(iocurrent);
 8000fa0:	68fb      	ldr	r3, [r7, #12]
 8000fa2:	43da      	mvns	r2, r3
 8000fa4:	693b      	ldr	r3, [r7, #16]
 8000fa6:	4013      	ands	r3, r2
 8000fa8:	613b      	str	r3, [r7, #16]
				if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u) {
 8000faa:	683b      	ldr	r3, [r7, #0]
 8000fac:	685a      	ldr	r2, [r3, #4]
 8000fae:	2380      	movs	r3, #128	; 0x80
 8000fb0:	035b      	lsls	r3, r3, #13
 8000fb2:	4013      	ands	r3, r2
 8000fb4:	d003      	beq.n	8000fbe <HAL_GPIO_Init+0x20e>
					temp |= iocurrent;
 8000fb6:	693a      	ldr	r2, [r7, #16]
 8000fb8:	68fb      	ldr	r3, [r7, #12]
 8000fba:	4313      	orrs	r3, r2
 8000fbc:	613b      	str	r3, [r7, #16]
				}
				EXTI->RTSR1 = temp;
 8000fbe:	4b2a      	ldr	r3, [pc, #168]	; (8001068 <HAL_GPIO_Init+0x2b8>)
 8000fc0:	693a      	ldr	r2, [r7, #16]
 8000fc2:	601a      	str	r2, [r3, #0]

				temp = EXTI->FTSR1;
 8000fc4:	4b28      	ldr	r3, [pc, #160]	; (8001068 <HAL_GPIO_Init+0x2b8>)
 8000fc6:	685b      	ldr	r3, [r3, #4]
 8000fc8:	613b      	str	r3, [r7, #16]
				temp &= ~(iocurrent);
 8000fca:	68fb      	ldr	r3, [r7, #12]
 8000fcc:	43da      	mvns	r2, r3
 8000fce:	693b      	ldr	r3, [r7, #16]
 8000fd0:	4013      	ands	r3, r2
 8000fd2:	613b      	str	r3, [r7, #16]
				if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u) {
 8000fd4:	683b      	ldr	r3, [r7, #0]
 8000fd6:	685a      	ldr	r2, [r3, #4]
 8000fd8:	2380      	movs	r3, #128	; 0x80
 8000fda:	039b      	lsls	r3, r3, #14
 8000fdc:	4013      	ands	r3, r2
 8000fde:	d003      	beq.n	8000fe8 <HAL_GPIO_Init+0x238>
					temp |= iocurrent;
 8000fe0:	693a      	ldr	r2, [r7, #16]
 8000fe2:	68fb      	ldr	r3, [r7, #12]
 8000fe4:	4313      	orrs	r3, r2
 8000fe6:	613b      	str	r3, [r7, #16]
				}
				EXTI->FTSR1 = temp;
 8000fe8:	4b1f      	ldr	r3, [pc, #124]	; (8001068 <HAL_GPIO_Init+0x2b8>)
 8000fea:	693a      	ldr	r2, [r7, #16]
 8000fec:	605a      	str	r2, [r3, #4]

				/* Clear EXTI line configuration */
				temp = EXTI->EMR1;
 8000fee:	4a1e      	ldr	r2, [pc, #120]	; (8001068 <HAL_GPIO_Init+0x2b8>)
 8000ff0:	2384      	movs	r3, #132	; 0x84
 8000ff2:	58d3      	ldr	r3, [r2, r3]
 8000ff4:	613b      	str	r3, [r7, #16]
				temp &= ~(iocurrent);
 8000ff6:	68fb      	ldr	r3, [r7, #12]
 8000ff8:	43da      	mvns	r2, r3
 8000ffa:	693b      	ldr	r3, [r7, #16]
 8000ffc:	4013      	ands	r3, r2
 8000ffe:	613b      	str	r3, [r7, #16]
				if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u) {
 8001000:	683b      	ldr	r3, [r7, #0]
 8001002:	685a      	ldr	r2, [r3, #4]
 8001004:	2380      	movs	r3, #128	; 0x80
 8001006:	029b      	lsls	r3, r3, #10
 8001008:	4013      	ands	r3, r2
 800100a:	d003      	beq.n	8001014 <HAL_GPIO_Init+0x264>
					temp |= iocurrent;
 800100c:	693a      	ldr	r2, [r7, #16]
 800100e:	68fb      	ldr	r3, [r7, #12]
 8001010:	4313      	orrs	r3, r2
 8001012:	613b      	str	r3, [r7, #16]
				}
				EXTI->EMR1 = temp;
 8001014:	4914      	ldr	r1, [pc, #80]	; (8001068 <HAL_GPIO_Init+0x2b8>)
 8001016:	2284      	movs	r2, #132	; 0x84
 8001018:	693b      	ldr	r3, [r7, #16]
 800101a:	508b      	str	r3, [r1, r2]

				temp = EXTI->IMR1;
 800101c:	4a12      	ldr	r2, [pc, #72]	; (8001068 <HAL_GPIO_Init+0x2b8>)
 800101e:	2380      	movs	r3, #128	; 0x80
 8001020:	58d3      	ldr	r3, [r2, r3]
 8001022:	613b      	str	r3, [r7, #16]
				temp &= ~(iocurrent);
 8001024:	68fb      	ldr	r3, [r7, #12]
 8001026:	43da      	mvns	r2, r3
 8001028:	693b      	ldr	r3, [r7, #16]
 800102a:	4013      	ands	r3, r2
 800102c:	613b      	str	r3, [r7, #16]
				if ((GPIO_Init->Mode & EXTI_IT) != 0x00u) {
 800102e:	683b      	ldr	r3, [r7, #0]
 8001030:	685a      	ldr	r2, [r3, #4]
 8001032:	2380      	movs	r3, #128	; 0x80
 8001034:	025b      	lsls	r3, r3, #9
 8001036:	4013      	ands	r3, r2
 8001038:	d003      	beq.n	8001042 <HAL_GPIO_Init+0x292>
					temp |= iocurrent;
 800103a:	693a      	ldr	r2, [r7, #16]
 800103c:	68fb      	ldr	r3, [r7, #12]
 800103e:	4313      	orrs	r3, r2
 8001040:	613b      	str	r3, [r7, #16]
				}
				EXTI->IMR1 = temp;
 8001042:	4909      	ldr	r1, [pc, #36]	; (8001068 <HAL_GPIO_Init+0x2b8>)
 8001044:	2280      	movs	r2, #128	; 0x80
 8001046:	693b      	ldr	r3, [r7, #16]
 8001048:	508b      	str	r3, [r1, r2]
			}
		}

		position++;
 800104a:	697b      	ldr	r3, [r7, #20]
 800104c:	3301      	adds	r3, #1
 800104e:	617b      	str	r3, [r7, #20]
	while (((GPIO_Init->Pin) >> position) != 0x00u) {
 8001050:	683b      	ldr	r3, [r7, #0]
 8001052:	681a      	ldr	r2, [r3, #0]
 8001054:	697b      	ldr	r3, [r7, #20]
 8001056:	40da      	lsrs	r2, r3
 8001058:	1e13      	subs	r3, r2, #0
 800105a:	d000      	beq.n	800105e <HAL_GPIO_Init+0x2ae>
 800105c:	e6b0      	b.n	8000dc0 <HAL_GPIO_Init+0x10>
	}
}
 800105e:	46c0      	nop			; (mov r8, r8)
 8001060:	46c0      	nop			; (mov r8, r8)
 8001062:	46bd      	mov	sp, r7
 8001064:	b006      	add	sp, #24
 8001066:	bd80      	pop	{r7, pc}
 8001068:	40021800 	.word	0x40021800
 800106c:	50000400 	.word	0x50000400
 8001070:	50000800 	.word	0x50000800
 8001074:	50000c00 	.word	0x50000c00

08001078 <HAL_GPIO_ReadPin>:
 * @param  GPIOx where x can be (A..F) to select the GPIO peripheral for STM32G0xx family
 * @param  GPIO_Pin specifies the port bit to read.
 *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
 * @retval The input port pin value.
 */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin) {
 8001078:	b580      	push	{r7, lr}
 800107a:	b084      	sub	sp, #16
 800107c:	af00      	add	r7, sp, #0
 800107e:	6078      	str	r0, [r7, #4]
 8001080:	000a      	movs	r2, r1
 8001082:	1cbb      	adds	r3, r7, #2
 8001084:	801a      	strh	r2, [r3, #0]
	GPIO_PinState bitstatus;

	/* Check the parameters */
	assert_param(IS_GPIO_PIN(GPIO_Pin));

	if ((GPIOx->IDR & GPIO_Pin) != 0x00u) {
 8001086:	687b      	ldr	r3, [r7, #4]
 8001088:	691b      	ldr	r3, [r3, #16]
 800108a:	1cba      	adds	r2, r7, #2
 800108c:	8812      	ldrh	r2, [r2, #0]
 800108e:	4013      	ands	r3, r2
 8001090:	d004      	beq.n	800109c <HAL_GPIO_ReadPin+0x24>
		bitstatus = GPIO_PIN_SET;
 8001092:	230f      	movs	r3, #15
 8001094:	18fb      	adds	r3, r7, r3
 8001096:	2201      	movs	r2, #1
 8001098:	701a      	strb	r2, [r3, #0]
 800109a:	e003      	b.n	80010a4 <HAL_GPIO_ReadPin+0x2c>
	} else {
		bitstatus = GPIO_PIN_RESET;
 800109c:	230f      	movs	r3, #15
 800109e:	18fb      	adds	r3, r7, r3
 80010a0:	2200      	movs	r2, #0
 80010a2:	701a      	strb	r2, [r3, #0]
	}
	return bitstatus;
 80010a4:	230f      	movs	r3, #15
 80010a6:	18fb      	adds	r3, r7, r3
 80010a8:	781b      	ldrb	r3, [r3, #0]
}
 80010aa:	0018      	movs	r0, r3
 80010ac:	46bd      	mov	sp, r7
 80010ae:	b004      	add	sp, #16
 80010b0:	bd80      	pop	{r7, pc}

080010b2 <HAL_GPIO_WritePin>:
 *            @arg GPIO_PIN_RESET: to clear the port pin
 *            @arg GPIO_PIN_SET: to set the port pin
 * @retval None
 */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin,
		GPIO_PinState PinState) {
 80010b2:	b580      	push	{r7, lr}
 80010b4:	b082      	sub	sp, #8
 80010b6:	af00      	add	r7, sp, #0
 80010b8:	6078      	str	r0, [r7, #4]
 80010ba:	0008      	movs	r0, r1
 80010bc:	0011      	movs	r1, r2
 80010be:	1cbb      	adds	r3, r7, #2
 80010c0:	1c02      	adds	r2, r0, #0
 80010c2:	801a      	strh	r2, [r3, #0]
 80010c4:	1c7b      	adds	r3, r7, #1
 80010c6:	1c0a      	adds	r2, r1, #0
 80010c8:	701a      	strb	r2, [r3, #0]
	/* Check the parameters */
	assert_param(IS_GPIO_PIN(GPIO_Pin));
	assert_param(IS_GPIO_PIN_ACTION(PinState));

	if (PinState != GPIO_PIN_RESET) {
 80010ca:	1c7b      	adds	r3, r7, #1
 80010cc:	781b      	ldrb	r3, [r3, #0]
 80010ce:	2b00      	cmp	r3, #0
 80010d0:	d004      	beq.n	80010dc <HAL_GPIO_WritePin+0x2a>
		GPIOx->BSRR = (uint32_t) GPIO_Pin;
 80010d2:	1cbb      	adds	r3, r7, #2
 80010d4:	881a      	ldrh	r2, [r3, #0]
 80010d6:	687b      	ldr	r3, [r7, #4]
 80010d8:	619a      	str	r2, [r3, #24]
	} else {
		GPIOx->BRR = (uint32_t) GPIO_Pin;
	}
}
 80010da:	e003      	b.n	80010e4 <HAL_GPIO_WritePin+0x32>
		GPIOx->BRR = (uint32_t) GPIO_Pin;
 80010dc:	1cbb      	adds	r3, r7, #2
 80010de:	881a      	ldrh	r2, [r3, #0]
 80010e0:	687b      	ldr	r3, [r7, #4]
 80010e2:	629a      	str	r2, [r3, #40]	; 0x28
}
 80010e4:	46c0      	nop			; (mov r8, r8)
 80010e6:	46bd      	mov	sp, r7
 80010e8:	b002      	add	sp, #8
 80010ea:	bd80      	pop	{r7, pc}

080010ec <HAL_GPIO_TogglePin>:
 * @param  GPIOx where x can be (A..F) to select the GPIO peripheral for STM32G0xx family
 * @param  GPIO_Pin specifies the pin to be toggled.
 *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
 * @retval None
 */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin) {
 80010ec:	b580      	push	{r7, lr}
 80010ee:	b084      	sub	sp, #16
 80010f0:	af00      	add	r7, sp, #0
 80010f2:	6078      	str	r0, [r7, #4]
 80010f4:	000a      	movs	r2, r1
 80010f6:	1cbb      	adds	r3, r7, #2
 80010f8:	801a      	strh	r2, [r3, #0]

	/* Check the parameters */
	assert_param(IS_GPIO_PIN(GPIO_Pin));

	/* get current Output Data Register value */
	odr = GPIOx->ODR;
 80010fa:	687b      	ldr	r3, [r7, #4]
 80010fc:	695b      	ldr	r3, [r3, #20]
 80010fe:	60fb      	str	r3, [r7, #12]

	/* Set selected pins that were at low level, and reset ones that were high */
	GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001100:	1cbb      	adds	r3, r7, #2
 8001102:	881b      	ldrh	r3, [r3, #0]
 8001104:	68fa      	ldr	r2, [r7, #12]
 8001106:	4013      	ands	r3, r2
 8001108:	041a      	lsls	r2, r3, #16
 800110a:	68fb      	ldr	r3, [r7, #12]
 800110c:	43db      	mvns	r3, r3
 800110e:	1cb9      	adds	r1, r7, #2
 8001110:	8809      	ldrh	r1, [r1, #0]
 8001112:	400b      	ands	r3, r1
 8001114:	431a      	orrs	r2, r3
 8001116:	687b      	ldr	r3, [r7, #4]
 8001118:	619a      	str	r2, [r3, #24]
}
 800111a:	46c0      	nop			; (mov r8, r8)
 800111c:	46bd      	mov	sp, r7
 800111e:	b004      	add	sp, #16
 8001120:	bd80      	pop	{r7, pc}
	...

08001124 <HAL_I2C_Init>:
 *         in the I2C_InitTypeDef and initialize the associated handle.
 * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
 *                the configuration information for the specified I2C.
 * @retval HAL status
 */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c) {
 8001124:	b580      	push	{r7, lr}
 8001126:	b082      	sub	sp, #8
 8001128:	af00      	add	r7, sp, #0
 800112a:	6078      	str	r0, [r7, #4]
	/* Check the I2C handle allocation */
	if (hi2c == NULL) {
 800112c:	687b      	ldr	r3, [r7, #4]
 800112e:	2b00      	cmp	r3, #0
 8001130:	d101      	bne.n	8001136 <HAL_I2C_Init+0x12>
		return HAL_ERROR;
 8001132:	2301      	movs	r3, #1
 8001134:	e08f      	b.n	8001256 <HAL_I2C_Init+0x132>
	assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
	assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
	assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
	assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

	if (hi2c->State == HAL_I2C_STATE_RESET) {
 8001136:	687b      	ldr	r3, [r7, #4]
 8001138:	2241      	movs	r2, #65	; 0x41
 800113a:	5c9b      	ldrb	r3, [r3, r2]
 800113c:	b2db      	uxtb	r3, r3
 800113e:	2b00      	cmp	r3, #0
 8001140:	d107      	bne.n	8001152 <HAL_I2C_Init+0x2e>
		/* Allocate lock resource and initialize it */
		hi2c->Lock = HAL_UNLOCKED;
 8001142:	687b      	ldr	r3, [r7, #4]
 8001144:	2240      	movs	r2, #64	; 0x40
 8001146:	2100      	movs	r1, #0
 8001148:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
		/* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
		HAL_I2C_MspInit(hi2c);
 800114a:	687b      	ldr	r3, [r7, #4]
 800114c:	0018      	movs	r0, r3
 800114e:	f7ff fbbd 	bl	80008cc <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
	}

	hi2c->State = HAL_I2C_STATE_BUSY;
 8001152:	687b      	ldr	r3, [r7, #4]
 8001154:	2241      	movs	r2, #65	; 0x41
 8001156:	2124      	movs	r1, #36	; 0x24
 8001158:	5499      	strb	r1, [r3, r2]

	/* Disable the selected I2C peripheral */
	__HAL_I2C_DISABLE(hi2c);
 800115a:	687b      	ldr	r3, [r7, #4]
 800115c:	681b      	ldr	r3, [r3, #0]
 800115e:	681a      	ldr	r2, [r3, #0]
 8001160:	687b      	ldr	r3, [r7, #4]
 8001162:	681b      	ldr	r3, [r3, #0]
 8001164:	2101      	movs	r1, #1
 8001166:	438a      	bics	r2, r1
 8001168:	601a      	str	r2, [r3, #0]

	/*---------------------------- I2Cx TIMINGR Configuration ------------------*/
	/* Configure I2Cx: Frequency range */
	hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 800116a:	687b      	ldr	r3, [r7, #4]
 800116c:	685a      	ldr	r2, [r3, #4]
 800116e:	687b      	ldr	r3, [r7, #4]
 8001170:	681b      	ldr	r3, [r3, #0]
 8001172:	493b      	ldr	r1, [pc, #236]	; (8001260 <HAL_I2C_Init+0x13c>)
 8001174:	400a      	ands	r2, r1
 8001176:	611a      	str	r2, [r3, #16]

	/*---------------------------- I2Cx OAR1 Configuration ---------------------*/
	/* Disable Own Address1 before set the Own Address1 configuration */
	hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8001178:	687b      	ldr	r3, [r7, #4]
 800117a:	681b      	ldr	r3, [r3, #0]
 800117c:	689a      	ldr	r2, [r3, #8]
 800117e:	687b      	ldr	r3, [r7, #4]
 8001180:	681b      	ldr	r3, [r3, #0]
 8001182:	4938      	ldr	r1, [pc, #224]	; (8001264 <HAL_I2C_Init+0x140>)
 8001184:	400a      	ands	r2, r1
 8001186:	609a      	str	r2, [r3, #8]

	/* Configure I2Cx: Own Address1 and ack own address1 mode */
	if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT) {
 8001188:	687b      	ldr	r3, [r7, #4]
 800118a:	68db      	ldr	r3, [r3, #12]
 800118c:	2b01      	cmp	r3, #1
 800118e:	d108      	bne.n	80011a2 <HAL_I2C_Init+0x7e>
		hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8001190:	687b      	ldr	r3, [r7, #4]
 8001192:	689a      	ldr	r2, [r3, #8]
 8001194:	687b      	ldr	r3, [r7, #4]
 8001196:	681b      	ldr	r3, [r3, #0]
 8001198:	2180      	movs	r1, #128	; 0x80
 800119a:	0209      	lsls	r1, r1, #8
 800119c:	430a      	orrs	r2, r1
 800119e:	609a      	str	r2, [r3, #8]
 80011a0:	e007      	b.n	80011b2 <HAL_I2C_Init+0x8e>
	} else /* I2C_ADDRESSINGMODE_10BIT */
	{
		hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE
				| hi2c->Init.OwnAddress1);
 80011a2:	687b      	ldr	r3, [r7, #4]
 80011a4:	689a      	ldr	r2, [r3, #8]
		hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE
 80011a6:	687b      	ldr	r3, [r7, #4]
 80011a8:	681b      	ldr	r3, [r3, #0]
				| hi2c->Init.OwnAddress1);
 80011aa:	2184      	movs	r1, #132	; 0x84
 80011ac:	0209      	lsls	r1, r1, #8
 80011ae:	430a      	orrs	r2, r1
		hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE
 80011b0:	609a      	str	r2, [r3, #8]
	}

	/*---------------------------- I2Cx CR2 Configuration ----------------------*/
	/* Configure I2Cx: Addressing Master mode */
	if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT) {
 80011b2:	687b      	ldr	r3, [r7, #4]
 80011b4:	68db      	ldr	r3, [r3, #12]
 80011b6:	2b02      	cmp	r3, #2
 80011b8:	d109      	bne.n	80011ce <HAL_I2C_Init+0xaa>
		SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 80011ba:	687b      	ldr	r3, [r7, #4]
 80011bc:	681b      	ldr	r3, [r3, #0]
 80011be:	685a      	ldr	r2, [r3, #4]
 80011c0:	687b      	ldr	r3, [r7, #4]
 80011c2:	681b      	ldr	r3, [r3, #0]
 80011c4:	2180      	movs	r1, #128	; 0x80
 80011c6:	0109      	lsls	r1, r1, #4
 80011c8:	430a      	orrs	r2, r1
 80011ca:	605a      	str	r2, [r3, #4]
 80011cc:	e007      	b.n	80011de <HAL_I2C_Init+0xba>
	} else {
		/* Clear the I2C ADD10 bit */
		CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 80011ce:	687b      	ldr	r3, [r7, #4]
 80011d0:	681b      	ldr	r3, [r3, #0]
 80011d2:	685a      	ldr	r2, [r3, #4]
 80011d4:	687b      	ldr	r3, [r7, #4]
 80011d6:	681b      	ldr	r3, [r3, #0]
 80011d8:	4923      	ldr	r1, [pc, #140]	; (8001268 <HAL_I2C_Init+0x144>)
 80011da:	400a      	ands	r2, r1
 80011dc:	605a      	str	r2, [r3, #4]
	}
	/* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
	hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 80011de:	687b      	ldr	r3, [r7, #4]
 80011e0:	681b      	ldr	r3, [r3, #0]
 80011e2:	685a      	ldr	r2, [r3, #4]
 80011e4:	687b      	ldr	r3, [r7, #4]
 80011e6:	681b      	ldr	r3, [r3, #0]
 80011e8:	4920      	ldr	r1, [pc, #128]	; (800126c <HAL_I2C_Init+0x148>)
 80011ea:	430a      	orrs	r2, r1
 80011ec:	605a      	str	r2, [r3, #4]

	/*---------------------------- I2Cx OAR2 Configuration ---------------------*/
	/* Disable Own Address2 before set the Own Address2 configuration */
	hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 80011ee:	687b      	ldr	r3, [r7, #4]
 80011f0:	681b      	ldr	r3, [r3, #0]
 80011f2:	68da      	ldr	r2, [r3, #12]
 80011f4:	687b      	ldr	r3, [r7, #4]
 80011f6:	681b      	ldr	r3, [r3, #0]
 80011f8:	491a      	ldr	r1, [pc, #104]	; (8001264 <HAL_I2C_Init+0x140>)
 80011fa:	400a      	ands	r2, r1
 80011fc:	60da      	str	r2, [r3, #12]

	/* Configure I2Cx: Dual mode and Own Address2 */
	hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2
 80011fe:	687b      	ldr	r3, [r7, #4]
 8001200:	691a      	ldr	r2, [r3, #16]
 8001202:	687b      	ldr	r3, [r7, #4]
 8001204:	695b      	ldr	r3, [r3, #20]
 8001206:	431a      	orrs	r2, r3
 8001208:	0011      	movs	r1, r2
			| (hi2c->Init.OwnAddress2Masks << 8));
 800120a:	687b      	ldr	r3, [r7, #4]
 800120c:	699b      	ldr	r3, [r3, #24]
 800120e:	021a      	lsls	r2, r3, #8
	hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2
 8001210:	687b      	ldr	r3, [r7, #4]
 8001212:	681b      	ldr	r3, [r3, #0]
			| (hi2c->Init.OwnAddress2Masks << 8));
 8001214:	430a      	orrs	r2, r1
	hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2
 8001216:	60da      	str	r2, [r3, #12]

	/*---------------------------- I2Cx CR1 Configuration ----------------------*/
	/* Configure I2Cx: Generalcall and NoStretch mode */
	hi2c->Instance->CR1 =
			(hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8001218:	687b      	ldr	r3, [r7, #4]
 800121a:	69d9      	ldr	r1, [r3, #28]
 800121c:	687b      	ldr	r3, [r7, #4]
 800121e:	6a1a      	ldr	r2, [r3, #32]
	hi2c->Instance->CR1 =
 8001220:	687b      	ldr	r3, [r7, #4]
 8001222:	681b      	ldr	r3, [r3, #0]
			(hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8001224:	430a      	orrs	r2, r1
	hi2c->Instance->CR1 =
 8001226:	601a      	str	r2, [r3, #0]

	/* Enable the selected I2C peripheral */
	__HAL_I2C_ENABLE(hi2c);
 8001228:	687b      	ldr	r3, [r7, #4]
 800122a:	681b      	ldr	r3, [r3, #0]
 800122c:	681a      	ldr	r2, [r3, #0]
 800122e:	687b      	ldr	r3, [r7, #4]
 8001230:	681b      	ldr	r3, [r3, #0]
 8001232:	2101      	movs	r1, #1
 8001234:	430a      	orrs	r2, r1
 8001236:	601a      	str	r2, [r3, #0]

	hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001238:	687b      	ldr	r3, [r7, #4]
 800123a:	2200      	movs	r2, #0
 800123c:	645a      	str	r2, [r3, #68]	; 0x44
	hi2c->State = HAL_I2C_STATE_READY;
 800123e:	687b      	ldr	r3, [r7, #4]
 8001240:	2241      	movs	r2, #65	; 0x41
 8001242:	2120      	movs	r1, #32
 8001244:	5499      	strb	r1, [r3, r2]
	hi2c->PreviousState = I2C_STATE_NONE;
 8001246:	687b      	ldr	r3, [r7, #4]
 8001248:	2200      	movs	r2, #0
 800124a:	631a      	str	r2, [r3, #48]	; 0x30
	hi2c->Mode = HAL_I2C_MODE_NONE;
 800124c:	687b      	ldr	r3, [r7, #4]
 800124e:	2242      	movs	r2, #66	; 0x42
 8001250:	2100      	movs	r1, #0
 8001252:	5499      	strb	r1, [r3, r2]

	return HAL_OK;
 8001254:	2300      	movs	r3, #0
}
 8001256:	0018      	movs	r0, r3
 8001258:	46bd      	mov	sp, r7
 800125a:	b002      	add	sp, #8
 800125c:	bd80      	pop	{r7, pc}
 800125e:	46c0      	nop			; (mov r8, r8)
 8001260:	f0ffffff 	.word	0xf0ffffff
 8001264:	ffff7fff 	.word	0xffff7fff
 8001268:	fffff7ff 	.word	0xfffff7ff
 800126c:	02008000 	.word	0x02008000

08001270 <HAL_I2C_IsDeviceReady>:
 * @param  Trials Number of trials
 * @param  Timeout Timeout duration
 * @retval HAL status
 */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c,
		uint16_t DevAddress, uint32_t Trials, uint32_t Timeout) {
 8001270:	b580      	push	{r7, lr}
 8001272:	b08a      	sub	sp, #40	; 0x28
 8001274:	af02      	add	r7, sp, #8
 8001276:	60f8      	str	r0, [r7, #12]
 8001278:	607a      	str	r2, [r7, #4]
 800127a:	603b      	str	r3, [r7, #0]
 800127c:	230a      	movs	r3, #10
 800127e:	18fb      	adds	r3, r7, r3
 8001280:	1c0a      	adds	r2, r1, #0
 8001282:	801a      	strh	r2, [r3, #0]
	uint32_t tickstart;

	__IO uint32_t I2C_Trials = 0UL;
 8001284:	2300      	movs	r3, #0
 8001286:	617b      	str	r3, [r7, #20]

	FlagStatus tmp1;
	FlagStatus tmp2;

	if (hi2c->State == HAL_I2C_STATE_READY) {
 8001288:	68fb      	ldr	r3, [r7, #12]
 800128a:	2241      	movs	r2, #65	; 0x41
 800128c:	5c9b      	ldrb	r3, [r3, r2]
 800128e:	b2db      	uxtb	r3, r3
 8001290:	2b20      	cmp	r3, #32
 8001292:	d000      	beq.n	8001296 <HAL_I2C_IsDeviceReady+0x26>
 8001294:	e0df      	b.n	8001456 <HAL_I2C_IsDeviceReady+0x1e6>
		if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) == SET) {
 8001296:	68fb      	ldr	r3, [r7, #12]
 8001298:	681b      	ldr	r3, [r3, #0]
 800129a:	699a      	ldr	r2, [r3, #24]
 800129c:	2380      	movs	r3, #128	; 0x80
 800129e:	021b      	lsls	r3, r3, #8
 80012a0:	401a      	ands	r2, r3
 80012a2:	2380      	movs	r3, #128	; 0x80
 80012a4:	021b      	lsls	r3, r3, #8
 80012a6:	429a      	cmp	r2, r3
 80012a8:	d101      	bne.n	80012ae <HAL_I2C_IsDeviceReady+0x3e>
			return HAL_BUSY;
 80012aa:	2302      	movs	r3, #2
 80012ac:	e0d4      	b.n	8001458 <HAL_I2C_IsDeviceReady+0x1e8>
		}

		/* Process Locked */
		__HAL_LOCK(hi2c);
 80012ae:	68fb      	ldr	r3, [r7, #12]
 80012b0:	2240      	movs	r2, #64	; 0x40
 80012b2:	5c9b      	ldrb	r3, [r3, r2]
 80012b4:	2b01      	cmp	r3, #1
 80012b6:	d101      	bne.n	80012bc <HAL_I2C_IsDeviceReady+0x4c>
 80012b8:	2302      	movs	r3, #2
 80012ba:	e0cd      	b.n	8001458 <HAL_I2C_IsDeviceReady+0x1e8>
 80012bc:	68fb      	ldr	r3, [r7, #12]
 80012be:	2240      	movs	r2, #64	; 0x40
 80012c0:	2101      	movs	r1, #1
 80012c2:	5499      	strb	r1, [r3, r2]

		hi2c->State = HAL_I2C_STATE_BUSY;
 80012c4:	68fb      	ldr	r3, [r7, #12]
 80012c6:	2241      	movs	r2, #65	; 0x41
 80012c8:	2124      	movs	r1, #36	; 0x24
 80012ca:	5499      	strb	r1, [r3, r2]
		hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80012cc:	68fb      	ldr	r3, [r7, #12]
 80012ce:	2200      	movs	r2, #0
 80012d0:	645a      	str	r2, [r3, #68]	; 0x44

		do {
			/* Generate Start */
			hi2c->Instance->CR2 = I2C_GENERATE_START(hi2c->Init.AddressingMode,
 80012d2:	68fb      	ldr	r3, [r7, #12]
 80012d4:	68db      	ldr	r3, [r3, #12]
 80012d6:	2b01      	cmp	r3, #1
 80012d8:	d107      	bne.n	80012ea <HAL_I2C_IsDeviceReady+0x7a>
 80012da:	230a      	movs	r3, #10
 80012dc:	18fb      	adds	r3, r7, r3
 80012de:	881b      	ldrh	r3, [r3, #0]
 80012e0:	059b      	lsls	r3, r3, #22
 80012e2:	0d9b      	lsrs	r3, r3, #22
 80012e4:	4a5e      	ldr	r2, [pc, #376]	; (8001460 <HAL_I2C_IsDeviceReady+0x1f0>)
 80012e6:	431a      	orrs	r2, r3
 80012e8:	e006      	b.n	80012f8 <HAL_I2C_IsDeviceReady+0x88>
 80012ea:	230a      	movs	r3, #10
 80012ec:	18fb      	adds	r3, r7, r3
 80012ee:	881b      	ldrh	r3, [r3, #0]
 80012f0:	059b      	lsls	r3, r3, #22
 80012f2:	0d9b      	lsrs	r3, r3, #22
 80012f4:	4a5b      	ldr	r2, [pc, #364]	; (8001464 <HAL_I2C_IsDeviceReady+0x1f4>)
 80012f6:	431a      	orrs	r2, r3
 80012f8:	68fb      	ldr	r3, [r7, #12]
 80012fa:	681b      	ldr	r3, [r3, #0]
 80012fc:	605a      	str	r2, [r3, #4]
					DevAddress);

			/* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
			/* Wait until STOPF flag is set or a NACK flag is set*/
			tickstart = HAL_GetTick();
 80012fe:	f7ff fc75 	bl	8000bec <HAL_GetTick>
 8001302:	0003      	movs	r3, r0
 8001304:	61bb      	str	r3, [r7, #24]

			tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF);
 8001306:	68fb      	ldr	r3, [r7, #12]
 8001308:	681b      	ldr	r3, [r3, #0]
 800130a:	699b      	ldr	r3, [r3, #24]
 800130c:	2220      	movs	r2, #32
 800130e:	4013      	ands	r3, r2
 8001310:	3b20      	subs	r3, #32
 8001312:	425a      	negs	r2, r3
 8001314:	4153      	adcs	r3, r2
 8001316:	b2da      	uxtb	r2, r3
 8001318:	231f      	movs	r3, #31
 800131a:	18fb      	adds	r3, r7, r3
 800131c:	701a      	strb	r2, [r3, #0]
			tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 800131e:	68fb      	ldr	r3, [r7, #12]
 8001320:	681b      	ldr	r3, [r3, #0]
 8001322:	699b      	ldr	r3, [r3, #24]
 8001324:	2210      	movs	r2, #16
 8001326:	4013      	ands	r3, r2
 8001328:	3b10      	subs	r3, #16
 800132a:	425a      	negs	r2, r3
 800132c:	4153      	adcs	r3, r2
 800132e:	b2da      	uxtb	r2, r3
 8001330:	231e      	movs	r3, #30
 8001332:	18fb      	adds	r3, r7, r3
 8001334:	701a      	strb	r2, [r3, #0]

			while ((tmp1 == RESET) && (tmp2 == RESET)) {
 8001336:	e035      	b.n	80013a4 <HAL_I2C_IsDeviceReady+0x134>
				if (Timeout != HAL_MAX_DELAY) {
 8001338:	683b      	ldr	r3, [r7, #0]
 800133a:	3301      	adds	r3, #1
 800133c:	d01a      	beq.n	8001374 <HAL_I2C_IsDeviceReady+0x104>
					if (((HAL_GetTick() - tickstart) > Timeout)
 800133e:	f7ff fc55 	bl	8000bec <HAL_GetTick>
 8001342:	0002      	movs	r2, r0
 8001344:	69bb      	ldr	r3, [r7, #24]
 8001346:	1ad3      	subs	r3, r2, r3
 8001348:	683a      	ldr	r2, [r7, #0]
 800134a:	429a      	cmp	r2, r3
 800134c:	d302      	bcc.n	8001354 <HAL_I2C_IsDeviceReady+0xe4>
							|| (Timeout == 0U)) {
 800134e:	683b      	ldr	r3, [r7, #0]
 8001350:	2b00      	cmp	r3, #0
 8001352:	d10f      	bne.n	8001374 <HAL_I2C_IsDeviceReady+0x104>
						/* Update I2C state */
						hi2c->State = HAL_I2C_STATE_READY;
 8001354:	68fb      	ldr	r3, [r7, #12]
 8001356:	2241      	movs	r2, #65	; 0x41
 8001358:	2120      	movs	r1, #32
 800135a:	5499      	strb	r1, [r3, r2]

						/* Update I2C error code */
						hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800135c:	68fb      	ldr	r3, [r7, #12]
 800135e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001360:	2220      	movs	r2, #32
 8001362:	431a      	orrs	r2, r3
 8001364:	68fb      	ldr	r3, [r7, #12]
 8001366:	645a      	str	r2, [r3, #68]	; 0x44

						/* Process Unlocked */
						__HAL_UNLOCK(hi2c);
 8001368:	68fb      	ldr	r3, [r7, #12]
 800136a:	2240      	movs	r2, #64	; 0x40
 800136c:	2100      	movs	r1, #0
 800136e:	5499      	strb	r1, [r3, r2]

						return HAL_ERROR;
 8001370:	2301      	movs	r3, #1
 8001372:	e071      	b.n	8001458 <HAL_I2C_IsDeviceReady+0x1e8>
					}
				}

				tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF);
 8001374:	68fb      	ldr	r3, [r7, #12]
 8001376:	681b      	ldr	r3, [r3, #0]
 8001378:	699b      	ldr	r3, [r3, #24]
 800137a:	2220      	movs	r2, #32
 800137c:	4013      	ands	r3, r2
 800137e:	3b20      	subs	r3, #32
 8001380:	425a      	negs	r2, r3
 8001382:	4153      	adcs	r3, r2
 8001384:	b2da      	uxtb	r2, r3
 8001386:	231f      	movs	r3, #31
 8001388:	18fb      	adds	r3, r7, r3
 800138a:	701a      	strb	r2, [r3, #0]
				tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 800138c:	68fb      	ldr	r3, [r7, #12]
 800138e:	681b      	ldr	r3, [r3, #0]
 8001390:	699b      	ldr	r3, [r3, #24]
 8001392:	2210      	movs	r2, #16
 8001394:	4013      	ands	r3, r2
 8001396:	3b10      	subs	r3, #16
 8001398:	425a      	negs	r2, r3
 800139a:	4153      	adcs	r3, r2
 800139c:	b2da      	uxtb	r2, r3
 800139e:	231e      	movs	r3, #30
 80013a0:	18fb      	adds	r3, r7, r3
 80013a2:	701a      	strb	r2, [r3, #0]
			while ((tmp1 == RESET) && (tmp2 == RESET)) {
 80013a4:	231f      	movs	r3, #31
 80013a6:	18fb      	adds	r3, r7, r3
 80013a8:	781b      	ldrb	r3, [r3, #0]
 80013aa:	2b00      	cmp	r3, #0
 80013ac:	d104      	bne.n	80013b8 <HAL_I2C_IsDeviceReady+0x148>
 80013ae:	231e      	movs	r3, #30
 80013b0:	18fb      	adds	r3, r7, r3
 80013b2:	781b      	ldrb	r3, [r3, #0]
 80013b4:	2b00      	cmp	r3, #0
 80013b6:	d0bf      	beq.n	8001338 <HAL_I2C_IsDeviceReady+0xc8>
			}

			/* Check if the NACKF flag has not been set */
			if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == RESET) {
 80013b8:	68fb      	ldr	r3, [r7, #12]
 80013ba:	681b      	ldr	r3, [r3, #0]
 80013bc:	699b      	ldr	r3, [r3, #24]
 80013be:	2210      	movs	r2, #16
 80013c0:	4013      	ands	r3, r2
 80013c2:	2b10      	cmp	r3, #16
 80013c4:	d01a      	beq.n	80013fc <HAL_I2C_IsDeviceReady+0x18c>
				/* Wait until STOPF flag is reset */
				if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET,
 80013c6:	683a      	ldr	r2, [r7, #0]
 80013c8:	68f8      	ldr	r0, [r7, #12]
 80013ca:	69bb      	ldr	r3, [r7, #24]
 80013cc:	9300      	str	r3, [sp, #0]
 80013ce:	0013      	movs	r3, r2
 80013d0:	2200      	movs	r2, #0
 80013d2:	2120      	movs	r1, #32
 80013d4:	f000 f86a 	bl	80014ac <I2C_WaitOnFlagUntilTimeout>
 80013d8:	1e03      	subs	r3, r0, #0
 80013da:	d001      	beq.n	80013e0 <HAL_I2C_IsDeviceReady+0x170>
						Timeout, tickstart) != HAL_OK) {
					return HAL_ERROR;
 80013dc:	2301      	movs	r3, #1
 80013de:	e03b      	b.n	8001458 <HAL_I2C_IsDeviceReady+0x1e8>
				}

				/* Clear STOP Flag */
				__HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80013e0:	68fb      	ldr	r3, [r7, #12]
 80013e2:	681b      	ldr	r3, [r3, #0]
 80013e4:	2220      	movs	r2, #32
 80013e6:	61da      	str	r2, [r3, #28]

				/* Device is ready */
				hi2c->State = HAL_I2C_STATE_READY;
 80013e8:	68fb      	ldr	r3, [r7, #12]
 80013ea:	2241      	movs	r2, #65	; 0x41
 80013ec:	2120      	movs	r1, #32
 80013ee:	5499      	strb	r1, [r3, r2]

				/* Process Unlocked */
				__HAL_UNLOCK(hi2c);
 80013f0:	68fb      	ldr	r3, [r7, #12]
 80013f2:	2240      	movs	r2, #64	; 0x40
 80013f4:	2100      	movs	r1, #0
 80013f6:	5499      	strb	r1, [r3, r2]

				return HAL_OK;
 80013f8:	2300      	movs	r3, #0
 80013fa:	e02d      	b.n	8001458 <HAL_I2C_IsDeviceReady+0x1e8>
			} else {
				/* Wait until STOPF flag is reset */
				if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET,
 80013fc:	683a      	ldr	r2, [r7, #0]
 80013fe:	68f8      	ldr	r0, [r7, #12]
 8001400:	69bb      	ldr	r3, [r7, #24]
 8001402:	9300      	str	r3, [sp, #0]
 8001404:	0013      	movs	r3, r2
 8001406:	2200      	movs	r2, #0
 8001408:	2120      	movs	r1, #32
 800140a:	f000 f84f 	bl	80014ac <I2C_WaitOnFlagUntilTimeout>
 800140e:	1e03      	subs	r3, r0, #0
 8001410:	d001      	beq.n	8001416 <HAL_I2C_IsDeviceReady+0x1a6>
						Timeout, tickstart) != HAL_OK) {
					return HAL_ERROR;
 8001412:	2301      	movs	r3, #1
 8001414:	e020      	b.n	8001458 <HAL_I2C_IsDeviceReady+0x1e8>
				}

				/* Clear NACK Flag */
				__HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001416:	68fb      	ldr	r3, [r7, #12]
 8001418:	681b      	ldr	r3, [r3, #0]
 800141a:	2210      	movs	r2, #16
 800141c:	61da      	str	r2, [r3, #28]

				/* Clear STOP Flag, auto generated with autoend*/
				__HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800141e:	68fb      	ldr	r3, [r7, #12]
 8001420:	681b      	ldr	r3, [r3, #0]
 8001422:	2220      	movs	r2, #32
 8001424:	61da      	str	r2, [r3, #28]
			}

			/* Increment Trials */
			I2C_Trials++;
 8001426:	697b      	ldr	r3, [r7, #20]
 8001428:	3301      	adds	r3, #1
 800142a:	617b      	str	r3, [r7, #20]
		} while (I2C_Trials < Trials);
 800142c:	697b      	ldr	r3, [r7, #20]
 800142e:	687a      	ldr	r2, [r7, #4]
 8001430:	429a      	cmp	r2, r3
 8001432:	d900      	bls.n	8001436 <HAL_I2C_IsDeviceReady+0x1c6>
 8001434:	e74d      	b.n	80012d2 <HAL_I2C_IsDeviceReady+0x62>

		/* Update I2C state */
		hi2c->State = HAL_I2C_STATE_READY;
 8001436:	68fb      	ldr	r3, [r7, #12]
 8001438:	2241      	movs	r2, #65	; 0x41
 800143a:	2120      	movs	r1, #32
 800143c:	5499      	strb	r1, [r3, r2]

		/* Update I2C error code */
		hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800143e:	68fb      	ldr	r3, [r7, #12]
 8001440:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001442:	2220      	movs	r2, #32
 8001444:	431a      	orrs	r2, r3
 8001446:	68fb      	ldr	r3, [r7, #12]
 8001448:	645a      	str	r2, [r3, #68]	; 0x44

		/* Process Unlocked */
		__HAL_UNLOCK(hi2c);
 800144a:	68fb      	ldr	r3, [r7, #12]
 800144c:	2240      	movs	r2, #64	; 0x40
 800144e:	2100      	movs	r1, #0
 8001450:	5499      	strb	r1, [r3, r2]

		return HAL_ERROR;
 8001452:	2301      	movs	r3, #1
 8001454:	e000      	b.n	8001458 <HAL_I2C_IsDeviceReady+0x1e8>
	} else {
		return HAL_BUSY;
 8001456:	2302      	movs	r3, #2
	}
}
 8001458:	0018      	movs	r0, r3
 800145a:	46bd      	mov	sp, r7
 800145c:	b008      	add	sp, #32
 800145e:	bd80      	pop	{r7, pc}
 8001460:	02002000 	.word	0x02002000
 8001464:	02002800 	.word	0x02002800

08001468 <I2C_Flush_TXDR>:
/**
 * @brief  I2C Tx data register flush process.
 * @param  hi2c I2C handle.
 * @retval None
 */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c) {
 8001468:	b580      	push	{r7, lr}
 800146a:	b082      	sub	sp, #8
 800146c:	af00      	add	r7, sp, #0
 800146e:	6078      	str	r0, [r7, #4]
	/* If a pending TXIS flag is set */
	/* Write a dummy data in TXDR to clear it */
	if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET) {
 8001470:	687b      	ldr	r3, [r7, #4]
 8001472:	681b      	ldr	r3, [r3, #0]
 8001474:	699b      	ldr	r3, [r3, #24]
 8001476:	2202      	movs	r2, #2
 8001478:	4013      	ands	r3, r2
 800147a:	2b02      	cmp	r3, #2
 800147c:	d103      	bne.n	8001486 <I2C_Flush_TXDR+0x1e>
		hi2c->Instance->TXDR = 0x00U;
 800147e:	687b      	ldr	r3, [r7, #4]
 8001480:	681b      	ldr	r3, [r3, #0]
 8001482:	2200      	movs	r2, #0
 8001484:	629a      	str	r2, [r3, #40]	; 0x28
	}

	/* Flush TX register if not empty */
	if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET) {
 8001486:	687b      	ldr	r3, [r7, #4]
 8001488:	681b      	ldr	r3, [r3, #0]
 800148a:	699b      	ldr	r3, [r3, #24]
 800148c:	2201      	movs	r2, #1
 800148e:	4013      	ands	r3, r2
 8001490:	2b01      	cmp	r3, #1
 8001492:	d007      	beq.n	80014a4 <I2C_Flush_TXDR+0x3c>
		__HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8001494:	687b      	ldr	r3, [r7, #4]
 8001496:	681b      	ldr	r3, [r3, #0]
 8001498:	699a      	ldr	r2, [r3, #24]
 800149a:	687b      	ldr	r3, [r7, #4]
 800149c:	681b      	ldr	r3, [r3, #0]
 800149e:	2101      	movs	r1, #1
 80014a0:	430a      	orrs	r2, r1
 80014a2:	619a      	str	r2, [r3, #24]
	}
}
 80014a4:	46c0      	nop			; (mov r8, r8)
 80014a6:	46bd      	mov	sp, r7
 80014a8:	b002      	add	sp, #8
 80014aa:	bd80      	pop	{r7, pc}

080014ac <I2C_WaitOnFlagUntilTimeout>:
 * @param  Timeout Timeout duration
 * @param  Tickstart Tick start value
 * @retval HAL status
 */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c,
		uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart) {
 80014ac:	b580      	push	{r7, lr}
 80014ae:	b084      	sub	sp, #16
 80014b0:	af00      	add	r7, sp, #0
 80014b2:	60f8      	str	r0, [r7, #12]
 80014b4:	60b9      	str	r1, [r7, #8]
 80014b6:	603b      	str	r3, [r7, #0]
 80014b8:	1dfb      	adds	r3, r7, #7
 80014ba:	701a      	strb	r2, [r3, #0]
	while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status) {
 80014bc:	e03a      	b.n	8001534 <I2C_WaitOnFlagUntilTimeout+0x88>
		/* Check if an error is detected */
		if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK) {
 80014be:	69ba      	ldr	r2, [r7, #24]
 80014c0:	6839      	ldr	r1, [r7, #0]
 80014c2:	68fb      	ldr	r3, [r7, #12]
 80014c4:	0018      	movs	r0, r3
 80014c6:	f000 f849 	bl	800155c <I2C_IsErrorOccurred>
 80014ca:	1e03      	subs	r3, r0, #0
 80014cc:	d001      	beq.n	80014d2 <I2C_WaitOnFlagUntilTimeout+0x26>
			return HAL_ERROR;
 80014ce:	2301      	movs	r3, #1
 80014d0:	e040      	b.n	8001554 <I2C_WaitOnFlagUntilTimeout+0xa8>
		}

		/* Check for the Timeout */
		if (Timeout != HAL_MAX_DELAY) {
 80014d2:	683b      	ldr	r3, [r7, #0]
 80014d4:	3301      	adds	r3, #1
 80014d6:	d02d      	beq.n	8001534 <I2C_WaitOnFlagUntilTimeout+0x88>
			if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U)) {
 80014d8:	f7ff fb88 	bl	8000bec <HAL_GetTick>
 80014dc:	0002      	movs	r2, r0
 80014de:	69bb      	ldr	r3, [r7, #24]
 80014e0:	1ad3      	subs	r3, r2, r3
 80014e2:	683a      	ldr	r2, [r7, #0]
 80014e4:	429a      	cmp	r2, r3
 80014e6:	d302      	bcc.n	80014ee <I2C_WaitOnFlagUntilTimeout+0x42>
 80014e8:	683b      	ldr	r3, [r7, #0]
 80014ea:	2b00      	cmp	r3, #0
 80014ec:	d122      	bne.n	8001534 <I2C_WaitOnFlagUntilTimeout+0x88>
				if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)) {
 80014ee:	68fb      	ldr	r3, [r7, #12]
 80014f0:	681b      	ldr	r3, [r3, #0]
 80014f2:	699b      	ldr	r3, [r3, #24]
 80014f4:	68ba      	ldr	r2, [r7, #8]
 80014f6:	4013      	ands	r3, r2
 80014f8:	68ba      	ldr	r2, [r7, #8]
 80014fa:	1ad3      	subs	r3, r2, r3
 80014fc:	425a      	negs	r2, r3
 80014fe:	4153      	adcs	r3, r2
 8001500:	b2db      	uxtb	r3, r3
 8001502:	001a      	movs	r2, r3
 8001504:	1dfb      	adds	r3, r7, #7
 8001506:	781b      	ldrb	r3, [r3, #0]
 8001508:	429a      	cmp	r2, r3
 800150a:	d113      	bne.n	8001534 <I2C_WaitOnFlagUntilTimeout+0x88>
					hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800150c:	68fb      	ldr	r3, [r7, #12]
 800150e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001510:	2220      	movs	r2, #32
 8001512:	431a      	orrs	r2, r3
 8001514:	68fb      	ldr	r3, [r7, #12]
 8001516:	645a      	str	r2, [r3, #68]	; 0x44
					hi2c->State = HAL_I2C_STATE_READY;
 8001518:	68fb      	ldr	r3, [r7, #12]
 800151a:	2241      	movs	r2, #65	; 0x41
 800151c:	2120      	movs	r1, #32
 800151e:	5499      	strb	r1, [r3, r2]
					hi2c->Mode = HAL_I2C_MODE_NONE;
 8001520:	68fb      	ldr	r3, [r7, #12]
 8001522:	2242      	movs	r2, #66	; 0x42
 8001524:	2100      	movs	r1, #0
 8001526:	5499      	strb	r1, [r3, r2]

					/* Process Unlocked */
					__HAL_UNLOCK(hi2c);
 8001528:	68fb      	ldr	r3, [r7, #12]
 800152a:	2240      	movs	r2, #64	; 0x40
 800152c:	2100      	movs	r1, #0
 800152e:	5499      	strb	r1, [r3, r2]
					return HAL_ERROR;
 8001530:	2301      	movs	r3, #1
 8001532:	e00f      	b.n	8001554 <I2C_WaitOnFlagUntilTimeout+0xa8>
	while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status) {
 8001534:	68fb      	ldr	r3, [r7, #12]
 8001536:	681b      	ldr	r3, [r3, #0]
 8001538:	699b      	ldr	r3, [r3, #24]
 800153a:	68ba      	ldr	r2, [r7, #8]
 800153c:	4013      	ands	r3, r2
 800153e:	68ba      	ldr	r2, [r7, #8]
 8001540:	1ad3      	subs	r3, r2, r3
 8001542:	425a      	negs	r2, r3
 8001544:	4153      	adcs	r3, r2
 8001546:	b2db      	uxtb	r3, r3
 8001548:	001a      	movs	r2, r3
 800154a:	1dfb      	adds	r3, r7, #7
 800154c:	781b      	ldrb	r3, [r3, #0]
 800154e:	429a      	cmp	r2, r3
 8001550:	d0b5      	beq.n	80014be <I2C_WaitOnFlagUntilTimeout+0x12>
				}
			}
		}
	}
	return HAL_OK;
 8001552:	2300      	movs	r3, #0
}
 8001554:	0018      	movs	r0, r3
 8001556:	46bd      	mov	sp, r7
 8001558:	b004      	add	sp, #16
 800155a:	bd80      	pop	{r7, pc}

0800155c <I2C_IsErrorOccurred>:
 * @param  Timeout Timeout duration
 * @param  Tickstart Tick start value
 * @retval HAL status
 */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c,
		uint32_t Timeout, uint32_t Tickstart) {
 800155c:	b590      	push	{r4, r7, lr}
 800155e:	b08b      	sub	sp, #44	; 0x2c
 8001560:	af00      	add	r7, sp, #0
 8001562:	60f8      	str	r0, [r7, #12]
 8001564:	60b9      	str	r1, [r7, #8]
 8001566:	607a      	str	r2, [r7, #4]
	HAL_StatusTypeDef status = HAL_OK;
 8001568:	2327      	movs	r3, #39	; 0x27
 800156a:	18fb      	adds	r3, r7, r3
 800156c:	2200      	movs	r2, #0
 800156e:	701a      	strb	r2, [r3, #0]
	uint32_t itflag = hi2c->Instance->ISR;
 8001570:	68fb      	ldr	r3, [r7, #12]
 8001572:	681b      	ldr	r3, [r3, #0]
 8001574:	699b      	ldr	r3, [r3, #24]
 8001576:	61bb      	str	r3, [r7, #24]
	uint32_t error_code = 0;
 8001578:	2300      	movs	r3, #0
 800157a:	623b      	str	r3, [r7, #32]
	uint32_t tickstart = Tickstart;
 800157c:	687b      	ldr	r3, [r7, #4]
 800157e:	61fb      	str	r3, [r7, #28]
	uint32_t tmp1;
	HAL_I2C_ModeTypeDef tmp2;

	if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF)) {
 8001580:	69bb      	ldr	r3, [r7, #24]
 8001582:	2210      	movs	r2, #16
 8001584:	4013      	ands	r3, r2
 8001586:	d100      	bne.n	800158a <I2C_IsErrorOccurred+0x2e>
 8001588:	e082      	b.n	8001690 <I2C_IsErrorOccurred+0x134>
		/* Clear NACKF Flag */
		__HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800158a:	68fb      	ldr	r3, [r7, #12]
 800158c:	681b      	ldr	r3, [r3, #0]
 800158e:	2210      	movs	r2, #16
 8001590:	61da      	str	r2, [r3, #28]

		/* Wait until STOP Flag is set or timeout occurred */
		/* AutoEnd should be initiate after AF */
		while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8001592:	e060      	b.n	8001656 <I2C_IsErrorOccurred+0xfa>
 8001594:	2427      	movs	r4, #39	; 0x27
 8001596:	193b      	adds	r3, r7, r4
 8001598:	193a      	adds	r2, r7, r4
 800159a:	7812      	ldrb	r2, [r2, #0]
 800159c:	701a      	strb	r2, [r3, #0]
				&& (status == HAL_OK)) {
			/* Check for the Timeout */
			if (Timeout != HAL_MAX_DELAY) {
 800159e:	68bb      	ldr	r3, [r7, #8]
 80015a0:	3301      	adds	r3, #1
 80015a2:	d058      	beq.n	8001656 <I2C_IsErrorOccurred+0xfa>
				if (((HAL_GetTick() - tickstart) > Timeout)
 80015a4:	f7ff fb22 	bl	8000bec <HAL_GetTick>
 80015a8:	0002      	movs	r2, r0
 80015aa:	69fb      	ldr	r3, [r7, #28]
 80015ac:	1ad3      	subs	r3, r2, r3
 80015ae:	68ba      	ldr	r2, [r7, #8]
 80015b0:	429a      	cmp	r2, r3
 80015b2:	d306      	bcc.n	80015c2 <I2C_IsErrorOccurred+0x66>
 80015b4:	193b      	adds	r3, r7, r4
 80015b6:	193a      	adds	r2, r7, r4
 80015b8:	7812      	ldrb	r2, [r2, #0]
 80015ba:	701a      	strb	r2, [r3, #0]
						|| (Timeout == 0U)) {
 80015bc:	68bb      	ldr	r3, [r7, #8]
 80015be:	2b00      	cmp	r3, #0
 80015c0:	d149      	bne.n	8001656 <I2C_IsErrorOccurred+0xfa>
					tmp1 = (uint32_t) (hi2c->Instance->CR2 & I2C_CR2_STOP);
 80015c2:	68fb      	ldr	r3, [r7, #12]
 80015c4:	681b      	ldr	r3, [r3, #0]
 80015c6:	685a      	ldr	r2, [r3, #4]
 80015c8:	2380      	movs	r3, #128	; 0x80
 80015ca:	01db      	lsls	r3, r3, #7
 80015cc:	4013      	ands	r3, r2
 80015ce:	617b      	str	r3, [r7, #20]
					tmp2 = hi2c->Mode;
 80015d0:	2013      	movs	r0, #19
 80015d2:	183b      	adds	r3, r7, r0
 80015d4:	68fa      	ldr	r2, [r7, #12]
 80015d6:	2142      	movs	r1, #66	; 0x42
 80015d8:	5c52      	ldrb	r2, [r2, r1]
 80015da:	701a      	strb	r2, [r3, #0]

					/* In case of I2C still busy, try to regenerate a STOP manually */
					if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET)
 80015dc:	68fb      	ldr	r3, [r7, #12]
 80015de:	681b      	ldr	r3, [r3, #0]
 80015e0:	699a      	ldr	r2, [r3, #24]
 80015e2:	2380      	movs	r3, #128	; 0x80
 80015e4:	021b      	lsls	r3, r3, #8
 80015e6:	401a      	ands	r2, r3
 80015e8:	2380      	movs	r3, #128	; 0x80
 80015ea:	021b      	lsls	r3, r3, #8
 80015ec:	429a      	cmp	r2, r3
 80015ee:	d126      	bne.n	800163e <I2C_IsErrorOccurred+0xe2>
							&& (tmp1 != I2C_CR2_STOP)
 80015f0:	697a      	ldr	r2, [r7, #20]
 80015f2:	2380      	movs	r3, #128	; 0x80
 80015f4:	01db      	lsls	r3, r3, #7
 80015f6:	429a      	cmp	r2, r3
 80015f8:	d021      	beq.n	800163e <I2C_IsErrorOccurred+0xe2>
							&& (tmp2 != HAL_I2C_MODE_SLAVE)) {
 80015fa:	183b      	adds	r3, r7, r0
 80015fc:	781b      	ldrb	r3, [r3, #0]
 80015fe:	2b20      	cmp	r3, #32
 8001600:	d01d      	beq.n	800163e <I2C_IsErrorOccurred+0xe2>
						/* Generate Stop */
						hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8001602:	68fb      	ldr	r3, [r7, #12]
 8001604:	681b      	ldr	r3, [r3, #0]
 8001606:	685a      	ldr	r2, [r3, #4]
 8001608:	68fb      	ldr	r3, [r7, #12]
 800160a:	681b      	ldr	r3, [r3, #0]
 800160c:	2180      	movs	r1, #128	; 0x80
 800160e:	01c9      	lsls	r1, r1, #7
 8001610:	430a      	orrs	r2, r1
 8001612:	605a      	str	r2, [r3, #4]

						/* Update Tick with new reference */
						tickstart = HAL_GetTick();
 8001614:	f7ff faea 	bl	8000bec <HAL_GetTick>
 8001618:	0003      	movs	r3, r0
 800161a:	61fb      	str	r3, [r7, #28]
					}

					while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) {
 800161c:	e00f      	b.n	800163e <I2C_IsErrorOccurred+0xe2>
						/* Check for the Timeout */
						if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF) {
 800161e:	f7ff fae5 	bl	8000bec <HAL_GetTick>
 8001622:	0002      	movs	r2, r0
 8001624:	69fb      	ldr	r3, [r7, #28]
 8001626:	1ad3      	subs	r3, r2, r3
 8001628:	2b19      	cmp	r3, #25
 800162a:	d908      	bls.n	800163e <I2C_IsErrorOccurred+0xe2>
							error_code |= HAL_I2C_ERROR_TIMEOUT;
 800162c:	6a3b      	ldr	r3, [r7, #32]
 800162e:	2220      	movs	r2, #32
 8001630:	4313      	orrs	r3, r2
 8001632:	623b      	str	r3, [r7, #32]

							status = HAL_ERROR;
 8001634:	2327      	movs	r3, #39	; 0x27
 8001636:	18fb      	adds	r3, r7, r3
 8001638:	2201      	movs	r2, #1
 800163a:	701a      	strb	r2, [r3, #0]

							break;
 800163c:	e00b      	b.n	8001656 <I2C_IsErrorOccurred+0xfa>
					while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) {
 800163e:	68fb      	ldr	r3, [r7, #12]
 8001640:	681b      	ldr	r3, [r3, #0]
 8001642:	699b      	ldr	r3, [r3, #24]
 8001644:	2220      	movs	r2, #32
 8001646:	4013      	ands	r3, r2
 8001648:	2127      	movs	r1, #39	; 0x27
 800164a:	187a      	adds	r2, r7, r1
 800164c:	1879      	adds	r1, r7, r1
 800164e:	7809      	ldrb	r1, [r1, #0]
 8001650:	7011      	strb	r1, [r2, #0]
 8001652:	2b20      	cmp	r3, #32
 8001654:	d1e3      	bne.n	800161e <I2C_IsErrorOccurred+0xc2>
		while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8001656:	68fb      	ldr	r3, [r7, #12]
 8001658:	681b      	ldr	r3, [r3, #0]
 800165a:	699b      	ldr	r3, [r3, #24]
 800165c:	2220      	movs	r2, #32
 800165e:	4013      	ands	r3, r2
				&& (status == HAL_OK)) {
 8001660:	2b20      	cmp	r3, #32
 8001662:	d004      	beq.n	800166e <I2C_IsErrorOccurred+0x112>
 8001664:	2327      	movs	r3, #39	; 0x27
 8001666:	18fb      	adds	r3, r7, r3
 8001668:	781b      	ldrb	r3, [r3, #0]
 800166a:	2b00      	cmp	r3, #0
 800166c:	d092      	beq.n	8001594 <I2C_IsErrorOccurred+0x38>
				}
			}
		}

		/* In case STOP Flag is detected, clear it */
		if (status == HAL_OK) {
 800166e:	2327      	movs	r3, #39	; 0x27
 8001670:	18fb      	adds	r3, r7, r3
 8001672:	781b      	ldrb	r3, [r3, #0]
 8001674:	2b00      	cmp	r3, #0
 8001676:	d103      	bne.n	8001680 <I2C_IsErrorOccurred+0x124>
			/* Clear STOP Flag */
			__HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8001678:	68fb      	ldr	r3, [r7, #12]
 800167a:	681b      	ldr	r3, [r3, #0]
 800167c:	2220      	movs	r2, #32
 800167e:	61da      	str	r2, [r3, #28]
		}

		error_code |= HAL_I2C_ERROR_AF;
 8001680:	6a3b      	ldr	r3, [r7, #32]
 8001682:	2204      	movs	r2, #4
 8001684:	4313      	orrs	r3, r2
 8001686:	623b      	str	r3, [r7, #32]

		status = HAL_ERROR;
 8001688:	2327      	movs	r3, #39	; 0x27
 800168a:	18fb      	adds	r3, r7, r3
 800168c:	2201      	movs	r2, #1
 800168e:	701a      	strb	r2, [r3, #0]
	}

	/* Refresh Content of Status register */
	itflag = hi2c->Instance->ISR;
 8001690:	68fb      	ldr	r3, [r7, #12]
 8001692:	681b      	ldr	r3, [r3, #0]
 8001694:	699b      	ldr	r3, [r3, #24]
 8001696:	61bb      	str	r3, [r7, #24]

	/* Then verify if an additional errors occurs */
	/* Check if a Bus error occurred */
	if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR)) {
 8001698:	69ba      	ldr	r2, [r7, #24]
 800169a:	2380      	movs	r3, #128	; 0x80
 800169c:	005b      	lsls	r3, r3, #1
 800169e:	4013      	ands	r3, r2
 80016a0:	d00c      	beq.n	80016bc <I2C_IsErrorOccurred+0x160>
		error_code |= HAL_I2C_ERROR_BERR;
 80016a2:	6a3b      	ldr	r3, [r7, #32]
 80016a4:	2201      	movs	r2, #1
 80016a6:	4313      	orrs	r3, r2
 80016a8:	623b      	str	r3, [r7, #32]

		/* Clear BERR flag */
		__HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 80016aa:	68fb      	ldr	r3, [r7, #12]
 80016ac:	681b      	ldr	r3, [r3, #0]
 80016ae:	2280      	movs	r2, #128	; 0x80
 80016b0:	0052      	lsls	r2, r2, #1
 80016b2:	61da      	str	r2, [r3, #28]

		status = HAL_ERROR;
 80016b4:	2327      	movs	r3, #39	; 0x27
 80016b6:	18fb      	adds	r3, r7, r3
 80016b8:	2201      	movs	r2, #1
 80016ba:	701a      	strb	r2, [r3, #0]
	}

	/* Check if an Over-Run/Under-Run error occurred */
	if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR)) {
 80016bc:	69ba      	ldr	r2, [r7, #24]
 80016be:	2380      	movs	r3, #128	; 0x80
 80016c0:	00db      	lsls	r3, r3, #3
 80016c2:	4013      	ands	r3, r2
 80016c4:	d00c      	beq.n	80016e0 <I2C_IsErrorOccurred+0x184>
		error_code |= HAL_I2C_ERROR_OVR;
 80016c6:	6a3b      	ldr	r3, [r7, #32]
 80016c8:	2208      	movs	r2, #8
 80016ca:	4313      	orrs	r3, r2
 80016cc:	623b      	str	r3, [r7, #32]

		/* Clear OVR flag */
		__HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 80016ce:	68fb      	ldr	r3, [r7, #12]
 80016d0:	681b      	ldr	r3, [r3, #0]
 80016d2:	2280      	movs	r2, #128	; 0x80
 80016d4:	00d2      	lsls	r2, r2, #3
 80016d6:	61da      	str	r2, [r3, #28]

		status = HAL_ERROR;
 80016d8:	2327      	movs	r3, #39	; 0x27
 80016da:	18fb      	adds	r3, r7, r3
 80016dc:	2201      	movs	r2, #1
 80016de:	701a      	strb	r2, [r3, #0]
	}

	/* Check if an Arbitration Loss error occurred */
	if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO)) {
 80016e0:	69ba      	ldr	r2, [r7, #24]
 80016e2:	2380      	movs	r3, #128	; 0x80
 80016e4:	009b      	lsls	r3, r3, #2
 80016e6:	4013      	ands	r3, r2
 80016e8:	d00c      	beq.n	8001704 <I2C_IsErrorOccurred+0x1a8>
		error_code |= HAL_I2C_ERROR_ARLO;
 80016ea:	6a3b      	ldr	r3, [r7, #32]
 80016ec:	2202      	movs	r2, #2
 80016ee:	4313      	orrs	r3, r2
 80016f0:	623b      	str	r3, [r7, #32]

		/* Clear ARLO flag */
		__HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 80016f2:	68fb      	ldr	r3, [r7, #12]
 80016f4:	681b      	ldr	r3, [r3, #0]
 80016f6:	2280      	movs	r2, #128	; 0x80
 80016f8:	0092      	lsls	r2, r2, #2
 80016fa:	61da      	str	r2, [r3, #28]

		status = HAL_ERROR;
 80016fc:	2327      	movs	r3, #39	; 0x27
 80016fe:	18fb      	adds	r3, r7, r3
 8001700:	2201      	movs	r2, #1
 8001702:	701a      	strb	r2, [r3, #0]
	}

	if (status != HAL_OK) {
 8001704:	2327      	movs	r3, #39	; 0x27
 8001706:	18fb      	adds	r3, r7, r3
 8001708:	781b      	ldrb	r3, [r3, #0]
 800170a:	2b00      	cmp	r3, #0
 800170c:	d01d      	beq.n	800174a <I2C_IsErrorOccurred+0x1ee>
		/* Flush TX register */
		I2C_Flush_TXDR(hi2c);
 800170e:	68fb      	ldr	r3, [r7, #12]
 8001710:	0018      	movs	r0, r3
 8001712:	f7ff fea9 	bl	8001468 <I2C_Flush_TXDR>

		/* Clear Configuration Register 2 */
		I2C_RESET_CR2(hi2c);
 8001716:	68fb      	ldr	r3, [r7, #12]
 8001718:	681b      	ldr	r3, [r3, #0]
 800171a:	685a      	ldr	r2, [r3, #4]
 800171c:	68fb      	ldr	r3, [r7, #12]
 800171e:	681b      	ldr	r3, [r3, #0]
 8001720:	490d      	ldr	r1, [pc, #52]	; (8001758 <I2C_IsErrorOccurred+0x1fc>)
 8001722:	400a      	ands	r2, r1
 8001724:	605a      	str	r2, [r3, #4]

		hi2c->ErrorCode |= error_code;
 8001726:	68fb      	ldr	r3, [r7, #12]
 8001728:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800172a:	6a3b      	ldr	r3, [r7, #32]
 800172c:	431a      	orrs	r2, r3
 800172e:	68fb      	ldr	r3, [r7, #12]
 8001730:	645a      	str	r2, [r3, #68]	; 0x44
		hi2c->State = HAL_I2C_STATE_READY;
 8001732:	68fb      	ldr	r3, [r7, #12]
 8001734:	2241      	movs	r2, #65	; 0x41
 8001736:	2120      	movs	r1, #32
 8001738:	5499      	strb	r1, [r3, r2]
		hi2c->Mode = HAL_I2C_MODE_NONE;
 800173a:	68fb      	ldr	r3, [r7, #12]
 800173c:	2242      	movs	r2, #66	; 0x42
 800173e:	2100      	movs	r1, #0
 8001740:	5499      	strb	r1, [r3, r2]

		/* Process Unlocked */
		__HAL_UNLOCK(hi2c);
 8001742:	68fb      	ldr	r3, [r7, #12]
 8001744:	2240      	movs	r2, #64	; 0x40
 8001746:	2100      	movs	r1, #0
 8001748:	5499      	strb	r1, [r3, r2]
	}

	return status;
 800174a:	2327      	movs	r3, #39	; 0x27
 800174c:	18fb      	adds	r3, r7, r3
 800174e:	781b      	ldrb	r3, [r3, #0]
}
 8001750:	0018      	movs	r0, r3
 8001752:	46bd      	mov	sp, r7
 8001754:	b00b      	add	sp, #44	; 0x2c
 8001756:	bd90      	pop	{r4, r7, pc}
 8001758:	fe00e800 	.word	0xfe00e800

0800175c <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 800175c:	b580      	push	{r7, lr}
 800175e:	b082      	sub	sp, #8
 8001760:	af00      	add	r7, sp, #0
 8001762:	6078      	str	r0, [r7, #4]
 8001764:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001766:	687b      	ldr	r3, [r7, #4]
 8001768:	2241      	movs	r2, #65	; 0x41
 800176a:	5c9b      	ldrb	r3, [r3, r2]
 800176c:	b2db      	uxtb	r3, r3
 800176e:	2b20      	cmp	r3, #32
 8001770:	d138      	bne.n	80017e4 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001772:	687b      	ldr	r3, [r7, #4]
 8001774:	2240      	movs	r2, #64	; 0x40
 8001776:	5c9b      	ldrb	r3, [r3, r2]
 8001778:	2b01      	cmp	r3, #1
 800177a:	d101      	bne.n	8001780 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 800177c:	2302      	movs	r3, #2
 800177e:	e032      	b.n	80017e6 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8001780:	687b      	ldr	r3, [r7, #4]
 8001782:	2240      	movs	r2, #64	; 0x40
 8001784:	2101      	movs	r1, #1
 8001786:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8001788:	687b      	ldr	r3, [r7, #4]
 800178a:	2241      	movs	r2, #65	; 0x41
 800178c:	2124      	movs	r1, #36	; 0x24
 800178e:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8001790:	687b      	ldr	r3, [r7, #4]
 8001792:	681b      	ldr	r3, [r3, #0]
 8001794:	681a      	ldr	r2, [r3, #0]
 8001796:	687b      	ldr	r3, [r7, #4]
 8001798:	681b      	ldr	r3, [r3, #0]
 800179a:	2101      	movs	r1, #1
 800179c:	438a      	bics	r2, r1
 800179e:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 80017a0:	687b      	ldr	r3, [r7, #4]
 80017a2:	681b      	ldr	r3, [r3, #0]
 80017a4:	681a      	ldr	r2, [r3, #0]
 80017a6:	687b      	ldr	r3, [r7, #4]
 80017a8:	681b      	ldr	r3, [r3, #0]
 80017aa:	4911      	ldr	r1, [pc, #68]	; (80017f0 <HAL_I2CEx_ConfigAnalogFilter+0x94>)
 80017ac:	400a      	ands	r2, r1
 80017ae:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 80017b0:	687b      	ldr	r3, [r7, #4]
 80017b2:	681b      	ldr	r3, [r3, #0]
 80017b4:	6819      	ldr	r1, [r3, #0]
 80017b6:	687b      	ldr	r3, [r7, #4]
 80017b8:	681b      	ldr	r3, [r3, #0]
 80017ba:	683a      	ldr	r2, [r7, #0]
 80017bc:	430a      	orrs	r2, r1
 80017be:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80017c0:	687b      	ldr	r3, [r7, #4]
 80017c2:	681b      	ldr	r3, [r3, #0]
 80017c4:	681a      	ldr	r2, [r3, #0]
 80017c6:	687b      	ldr	r3, [r7, #4]
 80017c8:	681b      	ldr	r3, [r3, #0]
 80017ca:	2101      	movs	r1, #1
 80017cc:	430a      	orrs	r2, r1
 80017ce:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80017d0:	687b      	ldr	r3, [r7, #4]
 80017d2:	2241      	movs	r2, #65	; 0x41
 80017d4:	2120      	movs	r1, #32
 80017d6:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80017d8:	687b      	ldr	r3, [r7, #4]
 80017da:	2240      	movs	r2, #64	; 0x40
 80017dc:	2100      	movs	r1, #0
 80017de:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 80017e0:	2300      	movs	r3, #0
 80017e2:	e000      	b.n	80017e6 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 80017e4:	2302      	movs	r3, #2
  }
}
 80017e6:	0018      	movs	r0, r3
 80017e8:	46bd      	mov	sp, r7
 80017ea:	b002      	add	sp, #8
 80017ec:	bd80      	pop	{r7, pc}
 80017ee:	46c0      	nop			; (mov r8, r8)
 80017f0:	ffffefff 	.word	0xffffefff

080017f4 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 80017f4:	b580      	push	{r7, lr}
 80017f6:	b084      	sub	sp, #16
 80017f8:	af00      	add	r7, sp, #0
 80017fa:	6078      	str	r0, [r7, #4]
 80017fc:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80017fe:	687b      	ldr	r3, [r7, #4]
 8001800:	2241      	movs	r2, #65	; 0x41
 8001802:	5c9b      	ldrb	r3, [r3, r2]
 8001804:	b2db      	uxtb	r3, r3
 8001806:	2b20      	cmp	r3, #32
 8001808:	d139      	bne.n	800187e <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800180a:	687b      	ldr	r3, [r7, #4]
 800180c:	2240      	movs	r2, #64	; 0x40
 800180e:	5c9b      	ldrb	r3, [r3, r2]
 8001810:	2b01      	cmp	r3, #1
 8001812:	d101      	bne.n	8001818 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8001814:	2302      	movs	r3, #2
 8001816:	e033      	b.n	8001880 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8001818:	687b      	ldr	r3, [r7, #4]
 800181a:	2240      	movs	r2, #64	; 0x40
 800181c:	2101      	movs	r1, #1
 800181e:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8001820:	687b      	ldr	r3, [r7, #4]
 8001822:	2241      	movs	r2, #65	; 0x41
 8001824:	2124      	movs	r1, #36	; 0x24
 8001826:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8001828:	687b      	ldr	r3, [r7, #4]
 800182a:	681b      	ldr	r3, [r3, #0]
 800182c:	681a      	ldr	r2, [r3, #0]
 800182e:	687b      	ldr	r3, [r7, #4]
 8001830:	681b      	ldr	r3, [r3, #0]
 8001832:	2101      	movs	r1, #1
 8001834:	438a      	bics	r2, r1
 8001836:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8001838:	687b      	ldr	r3, [r7, #4]
 800183a:	681b      	ldr	r3, [r3, #0]
 800183c:	681b      	ldr	r3, [r3, #0]
 800183e:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8001840:	68fb      	ldr	r3, [r7, #12]
 8001842:	4a11      	ldr	r2, [pc, #68]	; (8001888 <HAL_I2CEx_ConfigDigitalFilter+0x94>)
 8001844:	4013      	ands	r3, r2
 8001846:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8001848:	683b      	ldr	r3, [r7, #0]
 800184a:	021b      	lsls	r3, r3, #8
 800184c:	68fa      	ldr	r2, [r7, #12]
 800184e:	4313      	orrs	r3, r2
 8001850:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8001852:	687b      	ldr	r3, [r7, #4]
 8001854:	681b      	ldr	r3, [r3, #0]
 8001856:	68fa      	ldr	r2, [r7, #12]
 8001858:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800185a:	687b      	ldr	r3, [r7, #4]
 800185c:	681b      	ldr	r3, [r3, #0]
 800185e:	681a      	ldr	r2, [r3, #0]
 8001860:	687b      	ldr	r3, [r7, #4]
 8001862:	681b      	ldr	r3, [r3, #0]
 8001864:	2101      	movs	r1, #1
 8001866:	430a      	orrs	r2, r1
 8001868:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800186a:	687b      	ldr	r3, [r7, #4]
 800186c:	2241      	movs	r2, #65	; 0x41
 800186e:	2120      	movs	r1, #32
 8001870:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001872:	687b      	ldr	r3, [r7, #4]
 8001874:	2240      	movs	r2, #64	; 0x40
 8001876:	2100      	movs	r1, #0
 8001878:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 800187a:	2300      	movs	r3, #0
 800187c:	e000      	b.n	8001880 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 800187e:	2302      	movs	r3, #2
  }
}
 8001880:	0018      	movs	r0, r3
 8001882:	46bd      	mov	sp, r7
 8001884:	b004      	add	sp, #16
 8001886:	bd80      	pop	{r7, pc}
 8001888:	fffff0ff 	.word	0xfffff0ff

0800188c <HAL_PWREx_ControlVoltageScaling>:
 * @note  When moving from Range 2 to Range 1, the API waits for VOSF flag to be
 *        cleared before returning the status. If the flag is not cleared within
 *        6 microseconds, HAL_TIMEOUT status is reported.
 * @retval HAL Status
 */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling) {
 800188c:	b580      	push	{r7, lr}
 800188e:	b084      	sub	sp, #16
 8001890:	af00      	add	r7, sp, #0
 8001892:	6078      	str	r0, [r7, #4]
	uint32_t wait_loop_index;

	assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

	/* Modify voltage scaling range */
	MODIFY_REG(PWR->CR1, PWR_CR1_VOS, VoltageScaling);
 8001894:	4b19      	ldr	r3, [pc, #100]	; (80018fc <HAL_PWREx_ControlVoltageScaling+0x70>)
 8001896:	681b      	ldr	r3, [r3, #0]
 8001898:	4a19      	ldr	r2, [pc, #100]	; (8001900 <HAL_PWREx_ControlVoltageScaling+0x74>)
 800189a:	4013      	ands	r3, r2
 800189c:	0019      	movs	r1, r3
 800189e:	4b17      	ldr	r3, [pc, #92]	; (80018fc <HAL_PWREx_ControlVoltageScaling+0x70>)
 80018a0:	687a      	ldr	r2, [r7, #4]
 80018a2:	430a      	orrs	r2, r1
 80018a4:	601a      	str	r2, [r3, #0]

	/* In case of Range 1 selected, we need to ensure that main regulator reaches new value */
	if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1) {
 80018a6:	687a      	ldr	r2, [r7, #4]
 80018a8:	2380      	movs	r3, #128	; 0x80
 80018aa:	009b      	lsls	r3, r3, #2
 80018ac:	429a      	cmp	r2, r3
 80018ae:	d11f      	bne.n	80018f0 <HAL_PWREx_ControlVoltageScaling+0x64>
		/* Set timeout value */
		wait_loop_index = ((PWR_VOSF_SETTING_DELAY_6_US * SystemCoreClock)
 80018b0:	4b14      	ldr	r3, [pc, #80]	; (8001904 <HAL_PWREx_ControlVoltageScaling+0x78>)
 80018b2:	681a      	ldr	r2, [r3, #0]
 80018b4:	0013      	movs	r3, r2
 80018b6:	005b      	lsls	r3, r3, #1
 80018b8:	189b      	adds	r3, r3, r2
 80018ba:	005b      	lsls	r3, r3, #1
				/ 1000000U) + 1U;
 80018bc:	4912      	ldr	r1, [pc, #72]	; (8001908 <HAL_PWREx_ControlVoltageScaling+0x7c>)
 80018be:	0018      	movs	r0, r3
 80018c0:	f7fe fc2a 	bl	8000118 <__udivsi3>
 80018c4:	0003      	movs	r3, r0
		wait_loop_index = ((PWR_VOSF_SETTING_DELAY_6_US * SystemCoreClock)
 80018c6:	3301      	adds	r3, #1
 80018c8:	60fb      	str	r3, [r7, #12]

		/* Wait until VOSF is reset */
		while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) {
 80018ca:	e008      	b.n	80018de <HAL_PWREx_ControlVoltageScaling+0x52>
			if (wait_loop_index != 0U) {
 80018cc:	68fb      	ldr	r3, [r7, #12]
 80018ce:	2b00      	cmp	r3, #0
 80018d0:	d003      	beq.n	80018da <HAL_PWREx_ControlVoltageScaling+0x4e>
				wait_loop_index--;
 80018d2:	68fb      	ldr	r3, [r7, #12]
 80018d4:	3b01      	subs	r3, #1
 80018d6:	60fb      	str	r3, [r7, #12]
 80018d8:	e001      	b.n	80018de <HAL_PWREx_ControlVoltageScaling+0x52>
			} else {
				return HAL_TIMEOUT;
 80018da:	2303      	movs	r3, #3
 80018dc:	e009      	b.n	80018f2 <HAL_PWREx_ControlVoltageScaling+0x66>
		while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) {
 80018de:	4b07      	ldr	r3, [pc, #28]	; (80018fc <HAL_PWREx_ControlVoltageScaling+0x70>)
 80018e0:	695a      	ldr	r2, [r3, #20]
 80018e2:	2380      	movs	r3, #128	; 0x80
 80018e4:	00db      	lsls	r3, r3, #3
 80018e6:	401a      	ands	r2, r3
 80018e8:	2380      	movs	r3, #128	; 0x80
 80018ea:	00db      	lsls	r3, r3, #3
 80018ec:	429a      	cmp	r2, r3
 80018ee:	d0ed      	beq.n	80018cc <HAL_PWREx_ControlVoltageScaling+0x40>
			}
		}
	}

	return HAL_OK;
 80018f0:	2300      	movs	r3, #0
}
 80018f2:	0018      	movs	r0, r3
 80018f4:	46bd      	mov	sp, r7
 80018f6:	b004      	add	sp, #16
 80018f8:	bd80      	pop	{r7, pc}
 80018fa:	46c0      	nop			; (mov r8, r8)
 80018fc:	40007000 	.word	0x40007000
 8001900:	fffff9ff 	.word	0xfffff9ff
 8001904:	20000000 	.word	0x20000000
 8001908:	000f4240 	.word	0x000f4240

0800190c <LL_RCC_GetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_4
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB1Prescaler(void)
{
 800190c:	b580      	push	{r7, lr}
 800190e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE));
 8001910:	4b03      	ldr	r3, [pc, #12]	; (8001920 <LL_RCC_GetAPB1Prescaler+0x14>)
 8001912:	689a      	ldr	r2, [r3, #8]
 8001914:	23e0      	movs	r3, #224	; 0xe0
 8001916:	01db      	lsls	r3, r3, #7
 8001918:	4013      	ands	r3, r2
}
 800191a:	0018      	movs	r0, r3
 800191c:	46bd      	mov	sp, r7
 800191e:	bd80      	pop	{r7, pc}
 8001920:	40021000 	.word	0x40021000

08001924 <HAL_RCC_OscConfig>:
 * @note   Transition LSE Bypass to LSE On and LSE On to LSE Bypass are not
 *         supported by this function. User should request a transition to LSE Off
 *         first and then to LSE On or LSE Bypass.
 * @retval HAL status
 */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef *RCC_OscInitStruct) {
 8001924:	b580      	push	{r7, lr}
 8001926:	b088      	sub	sp, #32
 8001928:	af00      	add	r7, sp, #0
 800192a:	6078      	str	r0, [r7, #4]
	uint32_t tickstart;
	uint32_t temp_sysclksrc;
	uint32_t temp_pllckcfg;

	/* Check Null pointer */
	if (RCC_OscInitStruct == NULL) {
 800192c:	687b      	ldr	r3, [r7, #4]
 800192e:	2b00      	cmp	r3, #0
 8001930:	d101      	bne.n	8001936 <HAL_RCC_OscConfig+0x12>
		return HAL_ERROR;
 8001932:	2301      	movs	r3, #1
 8001934:	e2fe      	b.n	8001f34 <HAL_RCC_OscConfig+0x610>

	/* Check the parameters */
	assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

	/*------------------------------- HSE Configuration ------------------------*/
	if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE)
 8001936:	687b      	ldr	r3, [r7, #4]
 8001938:	681b      	ldr	r3, [r3, #0]
 800193a:	2201      	movs	r2, #1
 800193c:	4013      	ands	r3, r2
 800193e:	d100      	bne.n	8001942 <HAL_RCC_OscConfig+0x1e>
 8001940:	e07c      	b.n	8001a3c <HAL_RCC_OscConfig+0x118>
			== RCC_OSCILLATORTYPE_HSE) {
		/* Check the parameters */
		assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

		temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001942:	4bc3      	ldr	r3, [pc, #780]	; (8001c50 <HAL_RCC_OscConfig+0x32c>)
 8001944:	689b      	ldr	r3, [r3, #8]
 8001946:	2238      	movs	r2, #56	; 0x38
 8001948:	4013      	ands	r3, r2
 800194a:	61bb      	str	r3, [r7, #24]
		temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 800194c:	4bc0      	ldr	r3, [pc, #768]	; (8001c50 <HAL_RCC_OscConfig+0x32c>)
 800194e:	68db      	ldr	r3, [r3, #12]
 8001950:	2203      	movs	r2, #3
 8001952:	4013      	ands	r3, r2
 8001954:	617b      	str	r3, [r7, #20]

		/* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
		if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001956:	69bb      	ldr	r3, [r7, #24]
 8001958:	2b10      	cmp	r3, #16
 800195a:	d102      	bne.n	8001962 <HAL_RCC_OscConfig+0x3e>
				&& (temp_pllckcfg == RCC_PLLSOURCE_HSE))
 800195c:	697b      	ldr	r3, [r7, #20]
 800195e:	2b03      	cmp	r3, #3
 8001960:	d002      	beq.n	8001968 <HAL_RCC_OscConfig+0x44>
				|| (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE)) {
 8001962:	69bb      	ldr	r3, [r7, #24]
 8001964:	2b08      	cmp	r3, #8
 8001966:	d10b      	bne.n	8001980 <HAL_RCC_OscConfig+0x5c>
			if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001968:	4bb9      	ldr	r3, [pc, #740]	; (8001c50 <HAL_RCC_OscConfig+0x32c>)
 800196a:	681a      	ldr	r2, [r3, #0]
 800196c:	2380      	movs	r3, #128	; 0x80
 800196e:	029b      	lsls	r3, r3, #10
 8001970:	4013      	ands	r3, r2
 8001972:	d062      	beq.n	8001a3a <HAL_RCC_OscConfig+0x116>
					&& (RCC_OscInitStruct->HSEState == RCC_HSE_OFF)) {
 8001974:	687b      	ldr	r3, [r7, #4]
 8001976:	685b      	ldr	r3, [r3, #4]
 8001978:	2b00      	cmp	r3, #0
 800197a:	d15e      	bne.n	8001a3a <HAL_RCC_OscConfig+0x116>
				return HAL_ERROR;
 800197c:	2301      	movs	r3, #1
 800197e:	e2d9      	b.n	8001f34 <HAL_RCC_OscConfig+0x610>
			}
		} else {
			/* Set the new HSE configuration ---------------------------------------*/
			__HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001980:	687b      	ldr	r3, [r7, #4]
 8001982:	685a      	ldr	r2, [r3, #4]
 8001984:	2380      	movs	r3, #128	; 0x80
 8001986:	025b      	lsls	r3, r3, #9
 8001988:	429a      	cmp	r2, r3
 800198a:	d107      	bne.n	800199c <HAL_RCC_OscConfig+0x78>
 800198c:	4bb0      	ldr	r3, [pc, #704]	; (8001c50 <HAL_RCC_OscConfig+0x32c>)
 800198e:	681a      	ldr	r2, [r3, #0]
 8001990:	4baf      	ldr	r3, [pc, #700]	; (8001c50 <HAL_RCC_OscConfig+0x32c>)
 8001992:	2180      	movs	r1, #128	; 0x80
 8001994:	0249      	lsls	r1, r1, #9
 8001996:	430a      	orrs	r2, r1
 8001998:	601a      	str	r2, [r3, #0]
 800199a:	e020      	b.n	80019de <HAL_RCC_OscConfig+0xba>
 800199c:	687b      	ldr	r3, [r7, #4]
 800199e:	685a      	ldr	r2, [r3, #4]
 80019a0:	23a0      	movs	r3, #160	; 0xa0
 80019a2:	02db      	lsls	r3, r3, #11
 80019a4:	429a      	cmp	r2, r3
 80019a6:	d10e      	bne.n	80019c6 <HAL_RCC_OscConfig+0xa2>
 80019a8:	4ba9      	ldr	r3, [pc, #676]	; (8001c50 <HAL_RCC_OscConfig+0x32c>)
 80019aa:	681a      	ldr	r2, [r3, #0]
 80019ac:	4ba8      	ldr	r3, [pc, #672]	; (8001c50 <HAL_RCC_OscConfig+0x32c>)
 80019ae:	2180      	movs	r1, #128	; 0x80
 80019b0:	02c9      	lsls	r1, r1, #11
 80019b2:	430a      	orrs	r2, r1
 80019b4:	601a      	str	r2, [r3, #0]
 80019b6:	4ba6      	ldr	r3, [pc, #664]	; (8001c50 <HAL_RCC_OscConfig+0x32c>)
 80019b8:	681a      	ldr	r2, [r3, #0]
 80019ba:	4ba5      	ldr	r3, [pc, #660]	; (8001c50 <HAL_RCC_OscConfig+0x32c>)
 80019bc:	2180      	movs	r1, #128	; 0x80
 80019be:	0249      	lsls	r1, r1, #9
 80019c0:	430a      	orrs	r2, r1
 80019c2:	601a      	str	r2, [r3, #0]
 80019c4:	e00b      	b.n	80019de <HAL_RCC_OscConfig+0xba>
 80019c6:	4ba2      	ldr	r3, [pc, #648]	; (8001c50 <HAL_RCC_OscConfig+0x32c>)
 80019c8:	681a      	ldr	r2, [r3, #0]
 80019ca:	4ba1      	ldr	r3, [pc, #644]	; (8001c50 <HAL_RCC_OscConfig+0x32c>)
 80019cc:	49a1      	ldr	r1, [pc, #644]	; (8001c54 <HAL_RCC_OscConfig+0x330>)
 80019ce:	400a      	ands	r2, r1
 80019d0:	601a      	str	r2, [r3, #0]
 80019d2:	4b9f      	ldr	r3, [pc, #636]	; (8001c50 <HAL_RCC_OscConfig+0x32c>)
 80019d4:	681a      	ldr	r2, [r3, #0]
 80019d6:	4b9e      	ldr	r3, [pc, #632]	; (8001c50 <HAL_RCC_OscConfig+0x32c>)
 80019d8:	499f      	ldr	r1, [pc, #636]	; (8001c58 <HAL_RCC_OscConfig+0x334>)
 80019da:	400a      	ands	r2, r1
 80019dc:	601a      	str	r2, [r3, #0]

			/* Check the HSE State */
			if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF) {
 80019de:	687b      	ldr	r3, [r7, #4]
 80019e0:	685b      	ldr	r3, [r3, #4]
 80019e2:	2b00      	cmp	r3, #0
 80019e4:	d014      	beq.n	8001a10 <HAL_RCC_OscConfig+0xec>
				/* Get Start Tick*/
				tickstart = HAL_GetTick();
 80019e6:	f7ff f901 	bl	8000bec <HAL_GetTick>
 80019ea:	0003      	movs	r3, r0
 80019ec:	613b      	str	r3, [r7, #16]

				/* Wait till HSE is ready */
				while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U) {
 80019ee:	e008      	b.n	8001a02 <HAL_RCC_OscConfig+0xde>
					if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE) {
 80019f0:	f7ff f8fc 	bl	8000bec <HAL_GetTick>
 80019f4:	0002      	movs	r2, r0
 80019f6:	693b      	ldr	r3, [r7, #16]
 80019f8:	1ad3      	subs	r3, r2, r3
 80019fa:	2b64      	cmp	r3, #100	; 0x64
 80019fc:	d901      	bls.n	8001a02 <HAL_RCC_OscConfig+0xde>
						return HAL_TIMEOUT;
 80019fe:	2303      	movs	r3, #3
 8001a00:	e298      	b.n	8001f34 <HAL_RCC_OscConfig+0x610>
				while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U) {
 8001a02:	4b93      	ldr	r3, [pc, #588]	; (8001c50 <HAL_RCC_OscConfig+0x32c>)
 8001a04:	681a      	ldr	r2, [r3, #0]
 8001a06:	2380      	movs	r3, #128	; 0x80
 8001a08:	029b      	lsls	r3, r3, #10
 8001a0a:	4013      	ands	r3, r2
 8001a0c:	d0f0      	beq.n	80019f0 <HAL_RCC_OscConfig+0xcc>
 8001a0e:	e015      	b.n	8001a3c <HAL_RCC_OscConfig+0x118>
					}
				}
			} else {
				/* Get Start Tick*/
				tickstart = HAL_GetTick();
 8001a10:	f7ff f8ec 	bl	8000bec <HAL_GetTick>
 8001a14:	0003      	movs	r3, r0
 8001a16:	613b      	str	r3, [r7, #16]

				/* Wait till HSE is disabled */
				while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) {
 8001a18:	e008      	b.n	8001a2c <HAL_RCC_OscConfig+0x108>
					if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE) {
 8001a1a:	f7ff f8e7 	bl	8000bec <HAL_GetTick>
 8001a1e:	0002      	movs	r2, r0
 8001a20:	693b      	ldr	r3, [r7, #16]
 8001a22:	1ad3      	subs	r3, r2, r3
 8001a24:	2b64      	cmp	r3, #100	; 0x64
 8001a26:	d901      	bls.n	8001a2c <HAL_RCC_OscConfig+0x108>
						return HAL_TIMEOUT;
 8001a28:	2303      	movs	r3, #3
 8001a2a:	e283      	b.n	8001f34 <HAL_RCC_OscConfig+0x610>
				while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) {
 8001a2c:	4b88      	ldr	r3, [pc, #544]	; (8001c50 <HAL_RCC_OscConfig+0x32c>)
 8001a2e:	681a      	ldr	r2, [r3, #0]
 8001a30:	2380      	movs	r3, #128	; 0x80
 8001a32:	029b      	lsls	r3, r3, #10
 8001a34:	4013      	ands	r3, r2
 8001a36:	d1f0      	bne.n	8001a1a <HAL_RCC_OscConfig+0xf6>
 8001a38:	e000      	b.n	8001a3c <HAL_RCC_OscConfig+0x118>
			if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001a3a:	46c0      	nop			; (mov r8, r8)
				}
			}
		}
	}
	/*----------------------------- HSI Configuration --------------------------*/
	if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI)
 8001a3c:	687b      	ldr	r3, [r7, #4]
 8001a3e:	681b      	ldr	r3, [r3, #0]
 8001a40:	2202      	movs	r2, #2
 8001a42:	4013      	ands	r3, r2
 8001a44:	d100      	bne.n	8001a48 <HAL_RCC_OscConfig+0x124>
 8001a46:	e099      	b.n	8001b7c <HAL_RCC_OscConfig+0x258>
		assert_param(
				IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
		assert_param(IS_RCC_HSIDIV(RCC_OscInitStruct->HSIDiv));

		/* Check if HSI16 is used as system clock or as PLL source when PLL is selected as system clock */
		temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001a48:	4b81      	ldr	r3, [pc, #516]	; (8001c50 <HAL_RCC_OscConfig+0x32c>)
 8001a4a:	689b      	ldr	r3, [r3, #8]
 8001a4c:	2238      	movs	r2, #56	; 0x38
 8001a4e:	4013      	ands	r3, r2
 8001a50:	61bb      	str	r3, [r7, #24]
		temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001a52:	4b7f      	ldr	r3, [pc, #508]	; (8001c50 <HAL_RCC_OscConfig+0x32c>)
 8001a54:	68db      	ldr	r3, [r3, #12]
 8001a56:	2203      	movs	r2, #3
 8001a58:	4013      	ands	r3, r2
 8001a5a:	617b      	str	r3, [r7, #20]
		if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001a5c:	69bb      	ldr	r3, [r7, #24]
 8001a5e:	2b10      	cmp	r3, #16
 8001a60:	d102      	bne.n	8001a68 <HAL_RCC_OscConfig+0x144>
				&& (temp_pllckcfg == RCC_PLLSOURCE_HSI))
 8001a62:	697b      	ldr	r3, [r7, #20]
 8001a64:	2b02      	cmp	r3, #2
 8001a66:	d002      	beq.n	8001a6e <HAL_RCC_OscConfig+0x14a>
				|| (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)) {
 8001a68:	69bb      	ldr	r3, [r7, #24]
 8001a6a:	2b00      	cmp	r3, #0
 8001a6c:	d135      	bne.n	8001ada <HAL_RCC_OscConfig+0x1b6>
			/* When HSI is used as system clock or as PLL input clock it can not be disabled */
			if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001a6e:	4b78      	ldr	r3, [pc, #480]	; (8001c50 <HAL_RCC_OscConfig+0x32c>)
 8001a70:	681a      	ldr	r2, [r3, #0]
 8001a72:	2380      	movs	r3, #128	; 0x80
 8001a74:	00db      	lsls	r3, r3, #3
 8001a76:	4013      	ands	r3, r2
 8001a78:	d005      	beq.n	8001a86 <HAL_RCC_OscConfig+0x162>
					&& (RCC_OscInitStruct->HSIState == RCC_HSI_OFF)) {
 8001a7a:	687b      	ldr	r3, [r7, #4]
 8001a7c:	68db      	ldr	r3, [r3, #12]
 8001a7e:	2b00      	cmp	r3, #0
 8001a80:	d101      	bne.n	8001a86 <HAL_RCC_OscConfig+0x162>
				return HAL_ERROR;
 8001a82:	2301      	movs	r3, #1
 8001a84:	e256      	b.n	8001f34 <HAL_RCC_OscConfig+0x610>
			}
			/* Otherwise, just the calibration is allowed */
			else {
				/* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
				__HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(
 8001a86:	4b72      	ldr	r3, [pc, #456]	; (8001c50 <HAL_RCC_OscConfig+0x32c>)
 8001a88:	685b      	ldr	r3, [r3, #4]
 8001a8a:	4a74      	ldr	r2, [pc, #464]	; (8001c5c <HAL_RCC_OscConfig+0x338>)
 8001a8c:	4013      	ands	r3, r2
 8001a8e:	0019      	movs	r1, r3
 8001a90:	687b      	ldr	r3, [r7, #4]
 8001a92:	695b      	ldr	r3, [r3, #20]
 8001a94:	021a      	lsls	r2, r3, #8
 8001a96:	4b6e      	ldr	r3, [pc, #440]	; (8001c50 <HAL_RCC_OscConfig+0x32c>)
 8001a98:	430a      	orrs	r2, r1
 8001a9a:	605a      	str	r2, [r3, #4]
						RCC_OscInitStruct->HSICalibrationValue);

				if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI) {
 8001a9c:	69bb      	ldr	r3, [r7, #24]
 8001a9e:	2b00      	cmp	r3, #0
 8001aa0:	d112      	bne.n	8001ac8 <HAL_RCC_OscConfig+0x1a4>
					/* Adjust the HSI16 division factor */
					__HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 8001aa2:	4b6b      	ldr	r3, [pc, #428]	; (8001c50 <HAL_RCC_OscConfig+0x32c>)
 8001aa4:	681b      	ldr	r3, [r3, #0]
 8001aa6:	4a6e      	ldr	r2, [pc, #440]	; (8001c60 <HAL_RCC_OscConfig+0x33c>)
 8001aa8:	4013      	ands	r3, r2
 8001aaa:	0019      	movs	r1, r3
 8001aac:	687b      	ldr	r3, [r7, #4]
 8001aae:	691a      	ldr	r2, [r3, #16]
 8001ab0:	4b67      	ldr	r3, [pc, #412]	; (8001c50 <HAL_RCC_OscConfig+0x32c>)
 8001ab2:	430a      	orrs	r2, r1
 8001ab4:	601a      	str	r2, [r3, #0]

					/* Update the SystemCoreClock global variable with HSISYS value  */
					SystemCoreClock = (HSI_VALUE
							/ (1UL
									<< ((READ_BIT(RCC->CR, RCC_CR_HSIDIV))
 8001ab6:	4b66      	ldr	r3, [pc, #408]	; (8001c50 <HAL_RCC_OscConfig+0x32c>)
 8001ab8:	681b      	ldr	r3, [r3, #0]
											>> RCC_CR_HSIDIV_Pos)));
 8001aba:	0adb      	lsrs	r3, r3, #11
 8001abc:	2207      	movs	r2, #7
 8001abe:	4013      	ands	r3, r2
							/ (1UL
 8001ac0:	4a68      	ldr	r2, [pc, #416]	; (8001c64 <HAL_RCC_OscConfig+0x340>)
 8001ac2:	40da      	lsrs	r2, r3
					SystemCoreClock = (HSI_VALUE
 8001ac4:	4b68      	ldr	r3, [pc, #416]	; (8001c68 <HAL_RCC_OscConfig+0x344>)
 8001ac6:	601a      	str	r2, [r3, #0]
				}

				/* Adapt Systick interrupt period */
				if (HAL_InitTick(uwTickPrio) != HAL_OK) {
 8001ac8:	4b68      	ldr	r3, [pc, #416]	; (8001c6c <HAL_RCC_OscConfig+0x348>)
 8001aca:	681b      	ldr	r3, [r3, #0]
 8001acc:	0018      	movs	r0, r3
 8001ace:	f7ff f831 	bl	8000b34 <HAL_InitTick>
 8001ad2:	1e03      	subs	r3, r0, #0
 8001ad4:	d051      	beq.n	8001b7a <HAL_RCC_OscConfig+0x256>
					return HAL_ERROR;
 8001ad6:	2301      	movs	r3, #1
 8001ad8:	e22c      	b.n	8001f34 <HAL_RCC_OscConfig+0x610>
				}
			}
		} else {
			/* Check the HSI State */
			if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF) {
 8001ada:	687b      	ldr	r3, [r7, #4]
 8001adc:	68db      	ldr	r3, [r3, #12]
 8001ade:	2b00      	cmp	r3, #0
 8001ae0:	d030      	beq.n	8001b44 <HAL_RCC_OscConfig+0x220>
				/* Configure the HSI16 division factor */
				__HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 8001ae2:	4b5b      	ldr	r3, [pc, #364]	; (8001c50 <HAL_RCC_OscConfig+0x32c>)
 8001ae4:	681b      	ldr	r3, [r3, #0]
 8001ae6:	4a5e      	ldr	r2, [pc, #376]	; (8001c60 <HAL_RCC_OscConfig+0x33c>)
 8001ae8:	4013      	ands	r3, r2
 8001aea:	0019      	movs	r1, r3
 8001aec:	687b      	ldr	r3, [r7, #4]
 8001aee:	691a      	ldr	r2, [r3, #16]
 8001af0:	4b57      	ldr	r3, [pc, #348]	; (8001c50 <HAL_RCC_OscConfig+0x32c>)
 8001af2:	430a      	orrs	r2, r1
 8001af4:	601a      	str	r2, [r3, #0]

				/* Enable the Internal High Speed oscillator (HSI16). */
				__HAL_RCC_HSI_ENABLE();
 8001af6:	4b56      	ldr	r3, [pc, #344]	; (8001c50 <HAL_RCC_OscConfig+0x32c>)
 8001af8:	681a      	ldr	r2, [r3, #0]
 8001afa:	4b55      	ldr	r3, [pc, #340]	; (8001c50 <HAL_RCC_OscConfig+0x32c>)
 8001afc:	2180      	movs	r1, #128	; 0x80
 8001afe:	0049      	lsls	r1, r1, #1
 8001b00:	430a      	orrs	r2, r1
 8001b02:	601a      	str	r2, [r3, #0]

				/* Get Start Tick*/
				tickstart = HAL_GetTick();
 8001b04:	f7ff f872 	bl	8000bec <HAL_GetTick>
 8001b08:	0003      	movs	r3, r0
 8001b0a:	613b      	str	r3, [r7, #16]

				/* Wait till HSI is ready */
				while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U) {
 8001b0c:	e008      	b.n	8001b20 <HAL_RCC_OscConfig+0x1fc>
					if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE) {
 8001b0e:	f7ff f86d 	bl	8000bec <HAL_GetTick>
 8001b12:	0002      	movs	r2, r0
 8001b14:	693b      	ldr	r3, [r7, #16]
 8001b16:	1ad3      	subs	r3, r2, r3
 8001b18:	2b02      	cmp	r3, #2
 8001b1a:	d901      	bls.n	8001b20 <HAL_RCC_OscConfig+0x1fc>
						return HAL_TIMEOUT;
 8001b1c:	2303      	movs	r3, #3
 8001b1e:	e209      	b.n	8001f34 <HAL_RCC_OscConfig+0x610>
				while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U) {
 8001b20:	4b4b      	ldr	r3, [pc, #300]	; (8001c50 <HAL_RCC_OscConfig+0x32c>)
 8001b22:	681a      	ldr	r2, [r3, #0]
 8001b24:	2380      	movs	r3, #128	; 0x80
 8001b26:	00db      	lsls	r3, r3, #3
 8001b28:	4013      	ands	r3, r2
 8001b2a:	d0f0      	beq.n	8001b0e <HAL_RCC_OscConfig+0x1ea>
					}
				}

				/* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
				__HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(
 8001b2c:	4b48      	ldr	r3, [pc, #288]	; (8001c50 <HAL_RCC_OscConfig+0x32c>)
 8001b2e:	685b      	ldr	r3, [r3, #4]
 8001b30:	4a4a      	ldr	r2, [pc, #296]	; (8001c5c <HAL_RCC_OscConfig+0x338>)
 8001b32:	4013      	ands	r3, r2
 8001b34:	0019      	movs	r1, r3
 8001b36:	687b      	ldr	r3, [r7, #4]
 8001b38:	695b      	ldr	r3, [r3, #20]
 8001b3a:	021a      	lsls	r2, r3, #8
 8001b3c:	4b44      	ldr	r3, [pc, #272]	; (8001c50 <HAL_RCC_OscConfig+0x32c>)
 8001b3e:	430a      	orrs	r2, r1
 8001b40:	605a      	str	r2, [r3, #4]
 8001b42:	e01b      	b.n	8001b7c <HAL_RCC_OscConfig+0x258>
						RCC_OscInitStruct->HSICalibrationValue);
			} else {
				/* Disable the Internal High Speed oscillator (HSI16). */
				__HAL_RCC_HSI_DISABLE();
 8001b44:	4b42      	ldr	r3, [pc, #264]	; (8001c50 <HAL_RCC_OscConfig+0x32c>)
 8001b46:	681a      	ldr	r2, [r3, #0]
 8001b48:	4b41      	ldr	r3, [pc, #260]	; (8001c50 <HAL_RCC_OscConfig+0x32c>)
 8001b4a:	4949      	ldr	r1, [pc, #292]	; (8001c70 <HAL_RCC_OscConfig+0x34c>)
 8001b4c:	400a      	ands	r2, r1
 8001b4e:	601a      	str	r2, [r3, #0]

				/* Get Start Tick*/
				tickstart = HAL_GetTick();
 8001b50:	f7ff f84c 	bl	8000bec <HAL_GetTick>
 8001b54:	0003      	movs	r3, r0
 8001b56:	613b      	str	r3, [r7, #16]

				/* Wait till HSI is disabled */
				while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) {
 8001b58:	e008      	b.n	8001b6c <HAL_RCC_OscConfig+0x248>
					if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE) {
 8001b5a:	f7ff f847 	bl	8000bec <HAL_GetTick>
 8001b5e:	0002      	movs	r2, r0
 8001b60:	693b      	ldr	r3, [r7, #16]
 8001b62:	1ad3      	subs	r3, r2, r3
 8001b64:	2b02      	cmp	r3, #2
 8001b66:	d901      	bls.n	8001b6c <HAL_RCC_OscConfig+0x248>
						return HAL_TIMEOUT;
 8001b68:	2303      	movs	r3, #3
 8001b6a:	e1e3      	b.n	8001f34 <HAL_RCC_OscConfig+0x610>
				while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) {
 8001b6c:	4b38      	ldr	r3, [pc, #224]	; (8001c50 <HAL_RCC_OscConfig+0x32c>)
 8001b6e:	681a      	ldr	r2, [r3, #0]
 8001b70:	2380      	movs	r3, #128	; 0x80
 8001b72:	00db      	lsls	r3, r3, #3
 8001b74:	4013      	ands	r3, r2
 8001b76:	d1f0      	bne.n	8001b5a <HAL_RCC_OscConfig+0x236>
 8001b78:	e000      	b.n	8001b7c <HAL_RCC_OscConfig+0x258>
			if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001b7a:	46c0      	nop			; (mov r8, r8)
				}
			}
		}
	}
	/*------------------------------ LSI Configuration -------------------------*/
	if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI)
 8001b7c:	687b      	ldr	r3, [r7, #4]
 8001b7e:	681b      	ldr	r3, [r3, #0]
 8001b80:	2208      	movs	r2, #8
 8001b82:	4013      	ands	r3, r2
 8001b84:	d047      	beq.n	8001c16 <HAL_RCC_OscConfig+0x2f2>
			== RCC_OSCILLATORTYPE_LSI) {
		/* Check the parameters */
		assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

		/* Check if LSI is used as system clock */
		if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI) {
 8001b86:	4b32      	ldr	r3, [pc, #200]	; (8001c50 <HAL_RCC_OscConfig+0x32c>)
 8001b88:	689b      	ldr	r3, [r3, #8]
 8001b8a:	2238      	movs	r2, #56	; 0x38
 8001b8c:	4013      	ands	r3, r2
 8001b8e:	2b18      	cmp	r3, #24
 8001b90:	d10a      	bne.n	8001ba8 <HAL_RCC_OscConfig+0x284>
			/* When LSI is used as system clock it will not be disabled */
			if ((((RCC->CSR) & RCC_CSR_LSIRDY) != 0U)
 8001b92:	4b2f      	ldr	r3, [pc, #188]	; (8001c50 <HAL_RCC_OscConfig+0x32c>)
 8001b94:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001b96:	2202      	movs	r2, #2
 8001b98:	4013      	ands	r3, r2
 8001b9a:	d03c      	beq.n	8001c16 <HAL_RCC_OscConfig+0x2f2>
					&& (RCC_OscInitStruct->LSIState == RCC_LSI_OFF)) {
 8001b9c:	687b      	ldr	r3, [r7, #4]
 8001b9e:	699b      	ldr	r3, [r3, #24]
 8001ba0:	2b00      	cmp	r3, #0
 8001ba2:	d138      	bne.n	8001c16 <HAL_RCC_OscConfig+0x2f2>
				return HAL_ERROR;
 8001ba4:	2301      	movs	r3, #1
 8001ba6:	e1c5      	b.n	8001f34 <HAL_RCC_OscConfig+0x610>
			}
		} else {
			/* Check the LSI State */
			if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF) {
 8001ba8:	687b      	ldr	r3, [r7, #4]
 8001baa:	699b      	ldr	r3, [r3, #24]
 8001bac:	2b00      	cmp	r3, #0
 8001bae:	d019      	beq.n	8001be4 <HAL_RCC_OscConfig+0x2c0>
				/* Enable the Internal Low Speed oscillator (LSI). */
				__HAL_RCC_LSI_ENABLE();
 8001bb0:	4b27      	ldr	r3, [pc, #156]	; (8001c50 <HAL_RCC_OscConfig+0x32c>)
 8001bb2:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8001bb4:	4b26      	ldr	r3, [pc, #152]	; (8001c50 <HAL_RCC_OscConfig+0x32c>)
 8001bb6:	2101      	movs	r1, #1
 8001bb8:	430a      	orrs	r2, r1
 8001bba:	661a      	str	r2, [r3, #96]	; 0x60

				/* Get Start Tick*/
				tickstart = HAL_GetTick();
 8001bbc:	f7ff f816 	bl	8000bec <HAL_GetTick>
 8001bc0:	0003      	movs	r3, r0
 8001bc2:	613b      	str	r3, [r7, #16]

				/* Wait till LSI is ready */
				while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U) {
 8001bc4:	e008      	b.n	8001bd8 <HAL_RCC_OscConfig+0x2b4>
					if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE) {
 8001bc6:	f7ff f811 	bl	8000bec <HAL_GetTick>
 8001bca:	0002      	movs	r2, r0
 8001bcc:	693b      	ldr	r3, [r7, #16]
 8001bce:	1ad3      	subs	r3, r2, r3
 8001bd0:	2b02      	cmp	r3, #2
 8001bd2:	d901      	bls.n	8001bd8 <HAL_RCC_OscConfig+0x2b4>
						return HAL_TIMEOUT;
 8001bd4:	2303      	movs	r3, #3
 8001bd6:	e1ad      	b.n	8001f34 <HAL_RCC_OscConfig+0x610>
				while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U) {
 8001bd8:	4b1d      	ldr	r3, [pc, #116]	; (8001c50 <HAL_RCC_OscConfig+0x32c>)
 8001bda:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001bdc:	2202      	movs	r2, #2
 8001bde:	4013      	ands	r3, r2
 8001be0:	d0f1      	beq.n	8001bc6 <HAL_RCC_OscConfig+0x2a2>
 8001be2:	e018      	b.n	8001c16 <HAL_RCC_OscConfig+0x2f2>
					}
				}
			} else {
				/* Disable the Internal Low Speed oscillator (LSI). */
				__HAL_RCC_LSI_DISABLE();
 8001be4:	4b1a      	ldr	r3, [pc, #104]	; (8001c50 <HAL_RCC_OscConfig+0x32c>)
 8001be6:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8001be8:	4b19      	ldr	r3, [pc, #100]	; (8001c50 <HAL_RCC_OscConfig+0x32c>)
 8001bea:	2101      	movs	r1, #1
 8001bec:	438a      	bics	r2, r1
 8001bee:	661a      	str	r2, [r3, #96]	; 0x60

				/* Get Start Tick*/
				tickstart = HAL_GetTick();
 8001bf0:	f7fe fffc 	bl	8000bec <HAL_GetTick>
 8001bf4:	0003      	movs	r3, r0
 8001bf6:	613b      	str	r3, [r7, #16]

				/* Wait till LSI is disabled */
				while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U) {
 8001bf8:	e008      	b.n	8001c0c <HAL_RCC_OscConfig+0x2e8>
					if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE) {
 8001bfa:	f7fe fff7 	bl	8000bec <HAL_GetTick>
 8001bfe:	0002      	movs	r2, r0
 8001c00:	693b      	ldr	r3, [r7, #16]
 8001c02:	1ad3      	subs	r3, r2, r3
 8001c04:	2b02      	cmp	r3, #2
 8001c06:	d901      	bls.n	8001c0c <HAL_RCC_OscConfig+0x2e8>
						return HAL_TIMEOUT;
 8001c08:	2303      	movs	r3, #3
 8001c0a:	e193      	b.n	8001f34 <HAL_RCC_OscConfig+0x610>
				while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U) {
 8001c0c:	4b10      	ldr	r3, [pc, #64]	; (8001c50 <HAL_RCC_OscConfig+0x32c>)
 8001c0e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001c10:	2202      	movs	r2, #2
 8001c12:	4013      	ands	r3, r2
 8001c14:	d1f1      	bne.n	8001bfa <HAL_RCC_OscConfig+0x2d6>
				}
			}
		}
	}
	/*------------------------------ LSE Configuration -------------------------*/
	if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE)
 8001c16:	687b      	ldr	r3, [r7, #4]
 8001c18:	681b      	ldr	r3, [r3, #0]
 8001c1a:	2204      	movs	r2, #4
 8001c1c:	4013      	ands	r3, r2
 8001c1e:	d100      	bne.n	8001c22 <HAL_RCC_OscConfig+0x2fe>
 8001c20:	e0c6      	b.n	8001db0 <HAL_RCC_OscConfig+0x48c>
			== RCC_OSCILLATORTYPE_LSE) {
		FlagStatus pwrclkchanged = RESET;
 8001c22:	231f      	movs	r3, #31
 8001c24:	18fb      	adds	r3, r7, r3
 8001c26:	2200      	movs	r2, #0
 8001c28:	701a      	strb	r2, [r3, #0]

		/* Check the parameters */
		assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

		/* When the LSE is used as system clock, it is not allowed disable it */
		if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE) {
 8001c2a:	4b09      	ldr	r3, [pc, #36]	; (8001c50 <HAL_RCC_OscConfig+0x32c>)
 8001c2c:	689b      	ldr	r3, [r3, #8]
 8001c2e:	2238      	movs	r2, #56	; 0x38
 8001c30:	4013      	ands	r3, r2
 8001c32:	2b20      	cmp	r3, #32
 8001c34:	d11e      	bne.n	8001c74 <HAL_RCC_OscConfig+0x350>
			if ((((RCC->BDCR) & RCC_BDCR_LSERDY) != 0U)
 8001c36:	4b06      	ldr	r3, [pc, #24]	; (8001c50 <HAL_RCC_OscConfig+0x32c>)
 8001c38:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001c3a:	2202      	movs	r2, #2
 8001c3c:	4013      	ands	r3, r2
 8001c3e:	d100      	bne.n	8001c42 <HAL_RCC_OscConfig+0x31e>
 8001c40:	e0b6      	b.n	8001db0 <HAL_RCC_OscConfig+0x48c>
					&& (RCC_OscInitStruct->LSEState == RCC_LSE_OFF)) {
 8001c42:	687b      	ldr	r3, [r7, #4]
 8001c44:	689b      	ldr	r3, [r3, #8]
 8001c46:	2b00      	cmp	r3, #0
 8001c48:	d000      	beq.n	8001c4c <HAL_RCC_OscConfig+0x328>
 8001c4a:	e0b1      	b.n	8001db0 <HAL_RCC_OscConfig+0x48c>
				return HAL_ERROR;
 8001c4c:	2301      	movs	r3, #1
 8001c4e:	e171      	b.n	8001f34 <HAL_RCC_OscConfig+0x610>
 8001c50:	40021000 	.word	0x40021000
 8001c54:	fffeffff 	.word	0xfffeffff
 8001c58:	fffbffff 	.word	0xfffbffff
 8001c5c:	ffff80ff 	.word	0xffff80ff
 8001c60:	ffffc7ff 	.word	0xffffc7ff
 8001c64:	00f42400 	.word	0x00f42400
 8001c68:	20000000 	.word	0x20000000
 8001c6c:	20000004 	.word	0x20000004
 8001c70:	fffffeff 	.word	0xfffffeff
			}
		} else {
			/* Update LSE configuration in Backup Domain control register    */
			/* Requires to enable write access to Backup Domain of necessary */
			if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U) {
 8001c74:	4bb1      	ldr	r3, [pc, #708]	; (8001f3c <HAL_RCC_OscConfig+0x618>)
 8001c76:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8001c78:	2380      	movs	r3, #128	; 0x80
 8001c7a:	055b      	lsls	r3, r3, #21
 8001c7c:	4013      	ands	r3, r2
 8001c7e:	d101      	bne.n	8001c84 <HAL_RCC_OscConfig+0x360>
 8001c80:	2301      	movs	r3, #1
 8001c82:	e000      	b.n	8001c86 <HAL_RCC_OscConfig+0x362>
 8001c84:	2300      	movs	r3, #0
 8001c86:	2b00      	cmp	r3, #0
 8001c88:	d011      	beq.n	8001cae <HAL_RCC_OscConfig+0x38a>
				__HAL_RCC_PWR_CLK_ENABLE();
 8001c8a:	4bac      	ldr	r3, [pc, #688]	; (8001f3c <HAL_RCC_OscConfig+0x618>)
 8001c8c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8001c8e:	4bab      	ldr	r3, [pc, #684]	; (8001f3c <HAL_RCC_OscConfig+0x618>)
 8001c90:	2180      	movs	r1, #128	; 0x80
 8001c92:	0549      	lsls	r1, r1, #21
 8001c94:	430a      	orrs	r2, r1
 8001c96:	63da      	str	r2, [r3, #60]	; 0x3c
 8001c98:	4ba8      	ldr	r3, [pc, #672]	; (8001f3c <HAL_RCC_OscConfig+0x618>)
 8001c9a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8001c9c:	2380      	movs	r3, #128	; 0x80
 8001c9e:	055b      	lsls	r3, r3, #21
 8001ca0:	4013      	ands	r3, r2
 8001ca2:	60fb      	str	r3, [r7, #12]
 8001ca4:	68fb      	ldr	r3, [r7, #12]
				pwrclkchanged = SET;
 8001ca6:	231f      	movs	r3, #31
 8001ca8:	18fb      	adds	r3, r7, r3
 8001caa:	2201      	movs	r2, #1
 8001cac:	701a      	strb	r2, [r3, #0]
			}

			if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP)) {
 8001cae:	4ba4      	ldr	r3, [pc, #656]	; (8001f40 <HAL_RCC_OscConfig+0x61c>)
 8001cb0:	681a      	ldr	r2, [r3, #0]
 8001cb2:	2380      	movs	r3, #128	; 0x80
 8001cb4:	005b      	lsls	r3, r3, #1
 8001cb6:	4013      	ands	r3, r2
 8001cb8:	d11a      	bne.n	8001cf0 <HAL_RCC_OscConfig+0x3cc>
				/* Enable write access to Backup domain */
				SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001cba:	4ba1      	ldr	r3, [pc, #644]	; (8001f40 <HAL_RCC_OscConfig+0x61c>)
 8001cbc:	681a      	ldr	r2, [r3, #0]
 8001cbe:	4ba0      	ldr	r3, [pc, #640]	; (8001f40 <HAL_RCC_OscConfig+0x61c>)
 8001cc0:	2180      	movs	r1, #128	; 0x80
 8001cc2:	0049      	lsls	r1, r1, #1
 8001cc4:	430a      	orrs	r2, r1
 8001cc6:	601a      	str	r2, [r3, #0]

				/* Wait for Backup domain Write protection disable */
				tickstart = HAL_GetTick();
 8001cc8:	f7fe ff90 	bl	8000bec <HAL_GetTick>
 8001ccc:	0003      	movs	r3, r0
 8001cce:	613b      	str	r3, [r7, #16]

				while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP)) {
 8001cd0:	e008      	b.n	8001ce4 <HAL_RCC_OscConfig+0x3c0>
					if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE) {
 8001cd2:	f7fe ff8b 	bl	8000bec <HAL_GetTick>
 8001cd6:	0002      	movs	r2, r0
 8001cd8:	693b      	ldr	r3, [r7, #16]
 8001cda:	1ad3      	subs	r3, r2, r3
 8001cdc:	2b02      	cmp	r3, #2
 8001cde:	d901      	bls.n	8001ce4 <HAL_RCC_OscConfig+0x3c0>
						return HAL_TIMEOUT;
 8001ce0:	2303      	movs	r3, #3
 8001ce2:	e127      	b.n	8001f34 <HAL_RCC_OscConfig+0x610>
				while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP)) {
 8001ce4:	4b96      	ldr	r3, [pc, #600]	; (8001f40 <HAL_RCC_OscConfig+0x61c>)
 8001ce6:	681a      	ldr	r2, [r3, #0]
 8001ce8:	2380      	movs	r3, #128	; 0x80
 8001cea:	005b      	lsls	r3, r3, #1
 8001cec:	4013      	ands	r3, r2
 8001cee:	d0f0      	beq.n	8001cd2 <HAL_RCC_OscConfig+0x3ae>
					}
				}
			}

			/* Set the new LSE configuration -----------------------------------------*/
			__HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001cf0:	687b      	ldr	r3, [r7, #4]
 8001cf2:	689b      	ldr	r3, [r3, #8]
 8001cf4:	2b01      	cmp	r3, #1
 8001cf6:	d106      	bne.n	8001d06 <HAL_RCC_OscConfig+0x3e2>
 8001cf8:	4b90      	ldr	r3, [pc, #576]	; (8001f3c <HAL_RCC_OscConfig+0x618>)
 8001cfa:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8001cfc:	4b8f      	ldr	r3, [pc, #572]	; (8001f3c <HAL_RCC_OscConfig+0x618>)
 8001cfe:	2101      	movs	r1, #1
 8001d00:	430a      	orrs	r2, r1
 8001d02:	65da      	str	r2, [r3, #92]	; 0x5c
 8001d04:	e01c      	b.n	8001d40 <HAL_RCC_OscConfig+0x41c>
 8001d06:	687b      	ldr	r3, [r7, #4]
 8001d08:	689b      	ldr	r3, [r3, #8]
 8001d0a:	2b05      	cmp	r3, #5
 8001d0c:	d10c      	bne.n	8001d28 <HAL_RCC_OscConfig+0x404>
 8001d0e:	4b8b      	ldr	r3, [pc, #556]	; (8001f3c <HAL_RCC_OscConfig+0x618>)
 8001d10:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8001d12:	4b8a      	ldr	r3, [pc, #552]	; (8001f3c <HAL_RCC_OscConfig+0x618>)
 8001d14:	2104      	movs	r1, #4
 8001d16:	430a      	orrs	r2, r1
 8001d18:	65da      	str	r2, [r3, #92]	; 0x5c
 8001d1a:	4b88      	ldr	r3, [pc, #544]	; (8001f3c <HAL_RCC_OscConfig+0x618>)
 8001d1c:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8001d1e:	4b87      	ldr	r3, [pc, #540]	; (8001f3c <HAL_RCC_OscConfig+0x618>)
 8001d20:	2101      	movs	r1, #1
 8001d22:	430a      	orrs	r2, r1
 8001d24:	65da      	str	r2, [r3, #92]	; 0x5c
 8001d26:	e00b      	b.n	8001d40 <HAL_RCC_OscConfig+0x41c>
 8001d28:	4b84      	ldr	r3, [pc, #528]	; (8001f3c <HAL_RCC_OscConfig+0x618>)
 8001d2a:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8001d2c:	4b83      	ldr	r3, [pc, #524]	; (8001f3c <HAL_RCC_OscConfig+0x618>)
 8001d2e:	2101      	movs	r1, #1
 8001d30:	438a      	bics	r2, r1
 8001d32:	65da      	str	r2, [r3, #92]	; 0x5c
 8001d34:	4b81      	ldr	r3, [pc, #516]	; (8001f3c <HAL_RCC_OscConfig+0x618>)
 8001d36:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8001d38:	4b80      	ldr	r3, [pc, #512]	; (8001f3c <HAL_RCC_OscConfig+0x618>)
 8001d3a:	2104      	movs	r1, #4
 8001d3c:	438a      	bics	r2, r1
 8001d3e:	65da      	str	r2, [r3, #92]	; 0x5c

			/* Check the LSE State */
			if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF) {
 8001d40:	687b      	ldr	r3, [r7, #4]
 8001d42:	689b      	ldr	r3, [r3, #8]
 8001d44:	2b00      	cmp	r3, #0
 8001d46:	d014      	beq.n	8001d72 <HAL_RCC_OscConfig+0x44e>
				/* Get Start Tick*/
				tickstart = HAL_GetTick();
 8001d48:	f7fe ff50 	bl	8000bec <HAL_GetTick>
 8001d4c:	0003      	movs	r3, r0
 8001d4e:	613b      	str	r3, [r7, #16]

				/* Wait till LSE is ready */
				while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U) {
 8001d50:	e009      	b.n	8001d66 <HAL_RCC_OscConfig+0x442>
					if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE) {
 8001d52:	f7fe ff4b 	bl	8000bec <HAL_GetTick>
 8001d56:	0002      	movs	r2, r0
 8001d58:	693b      	ldr	r3, [r7, #16]
 8001d5a:	1ad3      	subs	r3, r2, r3
 8001d5c:	4a79      	ldr	r2, [pc, #484]	; (8001f44 <HAL_RCC_OscConfig+0x620>)
 8001d5e:	4293      	cmp	r3, r2
 8001d60:	d901      	bls.n	8001d66 <HAL_RCC_OscConfig+0x442>
						return HAL_TIMEOUT;
 8001d62:	2303      	movs	r3, #3
 8001d64:	e0e6      	b.n	8001f34 <HAL_RCC_OscConfig+0x610>
				while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U) {
 8001d66:	4b75      	ldr	r3, [pc, #468]	; (8001f3c <HAL_RCC_OscConfig+0x618>)
 8001d68:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001d6a:	2202      	movs	r2, #2
 8001d6c:	4013      	ands	r3, r2
 8001d6e:	d0f0      	beq.n	8001d52 <HAL_RCC_OscConfig+0x42e>
 8001d70:	e013      	b.n	8001d9a <HAL_RCC_OscConfig+0x476>
					}
				}
			} else {
				/* Get Start Tick*/
				tickstart = HAL_GetTick();
 8001d72:	f7fe ff3b 	bl	8000bec <HAL_GetTick>
 8001d76:	0003      	movs	r3, r0
 8001d78:	613b      	str	r3, [r7, #16]

				/* Wait till LSE is disabled */
				while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U) {
 8001d7a:	e009      	b.n	8001d90 <HAL_RCC_OscConfig+0x46c>
					if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE) {
 8001d7c:	f7fe ff36 	bl	8000bec <HAL_GetTick>
 8001d80:	0002      	movs	r2, r0
 8001d82:	693b      	ldr	r3, [r7, #16]
 8001d84:	1ad3      	subs	r3, r2, r3
 8001d86:	4a6f      	ldr	r2, [pc, #444]	; (8001f44 <HAL_RCC_OscConfig+0x620>)
 8001d88:	4293      	cmp	r3, r2
 8001d8a:	d901      	bls.n	8001d90 <HAL_RCC_OscConfig+0x46c>
						return HAL_TIMEOUT;
 8001d8c:	2303      	movs	r3, #3
 8001d8e:	e0d1      	b.n	8001f34 <HAL_RCC_OscConfig+0x610>
				while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U) {
 8001d90:	4b6a      	ldr	r3, [pc, #424]	; (8001f3c <HAL_RCC_OscConfig+0x618>)
 8001d92:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001d94:	2202      	movs	r2, #2
 8001d96:	4013      	ands	r3, r2
 8001d98:	d1f0      	bne.n	8001d7c <HAL_RCC_OscConfig+0x458>
					}
				}
			}

			/* Restore clock configuration if changed */
			if (pwrclkchanged == SET) {
 8001d9a:	231f      	movs	r3, #31
 8001d9c:	18fb      	adds	r3, r7, r3
 8001d9e:	781b      	ldrb	r3, [r3, #0]
 8001da0:	2b01      	cmp	r3, #1
 8001da2:	d105      	bne.n	8001db0 <HAL_RCC_OscConfig+0x48c>
				__HAL_RCC_PWR_CLK_DISABLE();
 8001da4:	4b65      	ldr	r3, [pc, #404]	; (8001f3c <HAL_RCC_OscConfig+0x618>)
 8001da6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8001da8:	4b64      	ldr	r3, [pc, #400]	; (8001f3c <HAL_RCC_OscConfig+0x618>)
 8001daa:	4967      	ldr	r1, [pc, #412]	; (8001f48 <HAL_RCC_OscConfig+0x624>)
 8001dac:	400a      	ands	r2, r1
 8001dae:	63da      	str	r2, [r3, #60]	; 0x3c
#endif /* RCC_HSI48_SUPPORT */
	/*-------------------------------- PLL Configuration -----------------------*/
	/* Check the parameters */
	assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

	if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE) {
 8001db0:	687b      	ldr	r3, [r7, #4]
 8001db2:	69db      	ldr	r3, [r3, #28]
 8001db4:	2b00      	cmp	r3, #0
 8001db6:	d100      	bne.n	8001dba <HAL_RCC_OscConfig+0x496>
 8001db8:	e0bb      	b.n	8001f32 <HAL_RCC_OscConfig+0x60e>
		/* Check if the PLL is used as system clock or not */
		if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK) {
 8001dba:	4b60      	ldr	r3, [pc, #384]	; (8001f3c <HAL_RCC_OscConfig+0x618>)
 8001dbc:	689b      	ldr	r3, [r3, #8]
 8001dbe:	2238      	movs	r2, #56	; 0x38
 8001dc0:	4013      	ands	r3, r2
 8001dc2:	2b10      	cmp	r3, #16
 8001dc4:	d100      	bne.n	8001dc8 <HAL_RCC_OscConfig+0x4a4>
 8001dc6:	e07b      	b.n	8001ec0 <HAL_RCC_OscConfig+0x59c>
			if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON) {
 8001dc8:	687b      	ldr	r3, [r7, #4]
 8001dca:	69db      	ldr	r3, [r3, #28]
 8001dcc:	2b02      	cmp	r3, #2
 8001dce:	d156      	bne.n	8001e7e <HAL_RCC_OscConfig+0x55a>
				assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
#endif /* RCC_PLLQ_SUPPORT */
				assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

				/* Disable the main PLL. */
				__HAL_RCC_PLL_DISABLE();
 8001dd0:	4b5a      	ldr	r3, [pc, #360]	; (8001f3c <HAL_RCC_OscConfig+0x618>)
 8001dd2:	681a      	ldr	r2, [r3, #0]
 8001dd4:	4b59      	ldr	r3, [pc, #356]	; (8001f3c <HAL_RCC_OscConfig+0x618>)
 8001dd6:	495d      	ldr	r1, [pc, #372]	; (8001f4c <HAL_RCC_OscConfig+0x628>)
 8001dd8:	400a      	ands	r2, r1
 8001dda:	601a      	str	r2, [r3, #0]

				/* Get Start Tick*/
				tickstart = HAL_GetTick();
 8001ddc:	f7fe ff06 	bl	8000bec <HAL_GetTick>
 8001de0:	0003      	movs	r3, r0
 8001de2:	613b      	str	r3, [r7, #16]

				/* Wait till PLL is ready */
				while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U) {
 8001de4:	e008      	b.n	8001df8 <HAL_RCC_OscConfig+0x4d4>
					if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE) {
 8001de6:	f7fe ff01 	bl	8000bec <HAL_GetTick>
 8001dea:	0002      	movs	r2, r0
 8001dec:	693b      	ldr	r3, [r7, #16]
 8001dee:	1ad3      	subs	r3, r2, r3
 8001df0:	2b02      	cmp	r3, #2
 8001df2:	d901      	bls.n	8001df8 <HAL_RCC_OscConfig+0x4d4>
						return HAL_TIMEOUT;
 8001df4:	2303      	movs	r3, #3
 8001df6:	e09d      	b.n	8001f34 <HAL_RCC_OscConfig+0x610>
				while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U) {
 8001df8:	4b50      	ldr	r3, [pc, #320]	; (8001f3c <HAL_RCC_OscConfig+0x618>)
 8001dfa:	681a      	ldr	r2, [r3, #0]
 8001dfc:	2380      	movs	r3, #128	; 0x80
 8001dfe:	049b      	lsls	r3, r3, #18
 8001e00:	4013      	ands	r3, r2
 8001e02:	d1f0      	bne.n	8001de6 <HAL_RCC_OscConfig+0x4c2>
					}
				}

				/* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLQ_SUPPORT)
				__HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001e04:	4b4d      	ldr	r3, [pc, #308]	; (8001f3c <HAL_RCC_OscConfig+0x618>)
 8001e06:	68db      	ldr	r3, [r3, #12]
 8001e08:	4a51      	ldr	r2, [pc, #324]	; (8001f50 <HAL_RCC_OscConfig+0x62c>)
 8001e0a:	4013      	ands	r3, r2
 8001e0c:	0019      	movs	r1, r3
 8001e0e:	687b      	ldr	r3, [r7, #4]
 8001e10:	6a1a      	ldr	r2, [r3, #32]
 8001e12:	687b      	ldr	r3, [r7, #4]
 8001e14:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e16:	431a      	orrs	r2, r3
 8001e18:	687b      	ldr	r3, [r7, #4]
 8001e1a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001e1c:	021b      	lsls	r3, r3, #8
 8001e1e:	431a      	orrs	r2, r3
 8001e20:	687b      	ldr	r3, [r7, #4]
 8001e22:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001e24:	431a      	orrs	r2, r3
 8001e26:	687b      	ldr	r3, [r7, #4]
 8001e28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e2a:	431a      	orrs	r2, r3
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001e30:	431a      	orrs	r2, r3
 8001e32:	4b42      	ldr	r3, [pc, #264]	; (8001f3c <HAL_RCC_OscConfig+0x618>)
 8001e34:	430a      	orrs	r2, r1
 8001e36:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLR);
#endif /* RCC_PLLQ_SUPPORT */

				/* Enable the main PLL. */
				__HAL_RCC_PLL_ENABLE();
 8001e38:	4b40      	ldr	r3, [pc, #256]	; (8001f3c <HAL_RCC_OscConfig+0x618>)
 8001e3a:	681a      	ldr	r2, [r3, #0]
 8001e3c:	4b3f      	ldr	r3, [pc, #252]	; (8001f3c <HAL_RCC_OscConfig+0x618>)
 8001e3e:	2180      	movs	r1, #128	; 0x80
 8001e40:	0449      	lsls	r1, r1, #17
 8001e42:	430a      	orrs	r2, r1
 8001e44:	601a      	str	r2, [r3, #0]

				/* Enable PLLR Clock output. */
				__HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLRCLK);
 8001e46:	4b3d      	ldr	r3, [pc, #244]	; (8001f3c <HAL_RCC_OscConfig+0x618>)
 8001e48:	68da      	ldr	r2, [r3, #12]
 8001e4a:	4b3c      	ldr	r3, [pc, #240]	; (8001f3c <HAL_RCC_OscConfig+0x618>)
 8001e4c:	2180      	movs	r1, #128	; 0x80
 8001e4e:	0549      	lsls	r1, r1, #21
 8001e50:	430a      	orrs	r2, r1
 8001e52:	60da      	str	r2, [r3, #12]

				/* Get Start Tick*/
				tickstart = HAL_GetTick();
 8001e54:	f7fe feca 	bl	8000bec <HAL_GetTick>
 8001e58:	0003      	movs	r3, r0
 8001e5a:	613b      	str	r3, [r7, #16]

				/* Wait till PLL is ready */
				while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U) {
 8001e5c:	e008      	b.n	8001e70 <HAL_RCC_OscConfig+0x54c>
					if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE) {
 8001e5e:	f7fe fec5 	bl	8000bec <HAL_GetTick>
 8001e62:	0002      	movs	r2, r0
 8001e64:	693b      	ldr	r3, [r7, #16]
 8001e66:	1ad3      	subs	r3, r2, r3
 8001e68:	2b02      	cmp	r3, #2
 8001e6a:	d901      	bls.n	8001e70 <HAL_RCC_OscConfig+0x54c>
						return HAL_TIMEOUT;
 8001e6c:	2303      	movs	r3, #3
 8001e6e:	e061      	b.n	8001f34 <HAL_RCC_OscConfig+0x610>
				while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U) {
 8001e70:	4b32      	ldr	r3, [pc, #200]	; (8001f3c <HAL_RCC_OscConfig+0x618>)
 8001e72:	681a      	ldr	r2, [r3, #0]
 8001e74:	2380      	movs	r3, #128	; 0x80
 8001e76:	049b      	lsls	r3, r3, #18
 8001e78:	4013      	ands	r3, r2
 8001e7a:	d0f0      	beq.n	8001e5e <HAL_RCC_OscConfig+0x53a>
 8001e7c:	e059      	b.n	8001f32 <HAL_RCC_OscConfig+0x60e>
					}
				}
			} else {
				/* Disable the main PLL. */
				__HAL_RCC_PLL_DISABLE();
 8001e7e:	4b2f      	ldr	r3, [pc, #188]	; (8001f3c <HAL_RCC_OscConfig+0x618>)
 8001e80:	681a      	ldr	r2, [r3, #0]
 8001e82:	4b2e      	ldr	r3, [pc, #184]	; (8001f3c <HAL_RCC_OscConfig+0x618>)
 8001e84:	4931      	ldr	r1, [pc, #196]	; (8001f4c <HAL_RCC_OscConfig+0x628>)
 8001e86:	400a      	ands	r2, r1
 8001e88:	601a      	str	r2, [r3, #0]

				/* Get Start Tick*/
				tickstart = HAL_GetTick();
 8001e8a:	f7fe feaf 	bl	8000bec <HAL_GetTick>
 8001e8e:	0003      	movs	r3, r0
 8001e90:	613b      	str	r3, [r7, #16]

				/* Wait till PLL is disabled */
				while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U) {
 8001e92:	e008      	b.n	8001ea6 <HAL_RCC_OscConfig+0x582>
					if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE) {
 8001e94:	f7fe feaa 	bl	8000bec <HAL_GetTick>
 8001e98:	0002      	movs	r2, r0
 8001e9a:	693b      	ldr	r3, [r7, #16]
 8001e9c:	1ad3      	subs	r3, r2, r3
 8001e9e:	2b02      	cmp	r3, #2
 8001ea0:	d901      	bls.n	8001ea6 <HAL_RCC_OscConfig+0x582>
						return HAL_TIMEOUT;
 8001ea2:	2303      	movs	r3, #3
 8001ea4:	e046      	b.n	8001f34 <HAL_RCC_OscConfig+0x610>
				while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U) {
 8001ea6:	4b25      	ldr	r3, [pc, #148]	; (8001f3c <HAL_RCC_OscConfig+0x618>)
 8001ea8:	681a      	ldr	r2, [r3, #0]
 8001eaa:	2380      	movs	r3, #128	; 0x80
 8001eac:	049b      	lsls	r3, r3, #18
 8001eae:	4013      	ands	r3, r2
 8001eb0:	d1f0      	bne.n	8001e94 <HAL_RCC_OscConfig+0x570>
					}
				}
				/* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLQ_SUPPORT)
				RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN
 8001eb2:	4b22      	ldr	r3, [pc, #136]	; (8001f3c <HAL_RCC_OscConfig+0x618>)
 8001eb4:	68da      	ldr	r2, [r3, #12]
 8001eb6:	4b21      	ldr	r3, [pc, #132]	; (8001f3c <HAL_RCC_OscConfig+0x618>)
 8001eb8:	4926      	ldr	r1, [pc, #152]	; (8001f54 <HAL_RCC_OscConfig+0x630>)
 8001eba:	400a      	ands	r2, r1
 8001ebc:	60da      	str	r2, [r3, #12]
 8001ebe:	e038      	b.n	8001f32 <HAL_RCC_OscConfig+0x60e>
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLREN);
#endif /* RCC_PLLQ_SUPPORT */
			}
		} else {
			/* Check if there is a request to disable the PLL used as System clock source */
			if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) {
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	69db      	ldr	r3, [r3, #28]
 8001ec4:	2b01      	cmp	r3, #1
 8001ec6:	d101      	bne.n	8001ecc <HAL_RCC_OscConfig+0x5a8>
				return HAL_ERROR;
 8001ec8:	2301      	movs	r3, #1
 8001eca:	e033      	b.n	8001f34 <HAL_RCC_OscConfig+0x610>
			} else {
				/* Do not return HAL_ERROR if request repeats the current configuration */
				temp_pllckcfg = RCC->PLLCFGR;
 8001ecc:	4b1b      	ldr	r3, [pc, #108]	; (8001f3c <HAL_RCC_OscConfig+0x618>)
 8001ece:	68db      	ldr	r3, [r3, #12]
 8001ed0:	617b      	str	r3, [r7, #20]
				if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC)
 8001ed2:	697b      	ldr	r3, [r7, #20]
 8001ed4:	2203      	movs	r2, #3
 8001ed6:	401a      	ands	r2, r3
						!= RCC_OscInitStruct->PLL.PLLSource)
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	6a1b      	ldr	r3, [r3, #32]
				if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC)
 8001edc:	429a      	cmp	r2, r3
 8001ede:	d126      	bne.n	8001f2e <HAL_RCC_OscConfig+0x60a>
						|| (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM)
 8001ee0:	697b      	ldr	r3, [r7, #20]
 8001ee2:	2270      	movs	r2, #112	; 0x70
 8001ee4:	401a      	ands	r2, r3
								!= RCC_OscInitStruct->PLL.PLLM)
 8001ee6:	687b      	ldr	r3, [r7, #4]
 8001ee8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
						|| (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM)
 8001eea:	429a      	cmp	r2, r3
 8001eec:	d11f      	bne.n	8001f2e <HAL_RCC_OscConfig+0x60a>
						|| (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN)
 8001eee:	697a      	ldr	r2, [r7, #20]
 8001ef0:	23fe      	movs	r3, #254	; 0xfe
 8001ef2:	01db      	lsls	r3, r3, #7
 8001ef4:	401a      	ands	r2, r3
								!= (RCC_OscInitStruct->PLL.PLLN
 8001ef6:	687b      	ldr	r3, [r7, #4]
 8001ef8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
										<< RCC_PLLCFGR_PLLN_Pos))
 8001efa:	021b      	lsls	r3, r3, #8
						|| (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN)
 8001efc:	429a      	cmp	r2, r3
 8001efe:	d116      	bne.n	8001f2e <HAL_RCC_OscConfig+0x60a>
						|| (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP)
 8001f00:	697a      	ldr	r2, [r7, #20]
 8001f02:	23f8      	movs	r3, #248	; 0xf8
 8001f04:	039b      	lsls	r3, r3, #14
 8001f06:	401a      	ands	r2, r3
								!= RCC_OscInitStruct->PLL.PLLP)
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
						|| (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP)
 8001f0c:	429a      	cmp	r2, r3
 8001f0e:	d10e      	bne.n	8001f2e <HAL_RCC_OscConfig+0x60a>
						||
#if defined (RCC_PLLQ_SUPPORT)
						(READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ)
 8001f10:	697a      	ldr	r2, [r7, #20]
 8001f12:	23e0      	movs	r3, #224	; 0xe0
 8001f14:	051b      	lsls	r3, r3, #20
 8001f16:	401a      	ands	r2, r3
								!= RCC_OscInitStruct->PLL.PLLQ)
 8001f18:	687b      	ldr	r3, [r7, #4]
 8001f1a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
						||
 8001f1c:	429a      	cmp	r2, r3
 8001f1e:	d106      	bne.n	8001f2e <HAL_RCC_OscConfig+0x60a>
						||
#endif /* RCC_PLLQ_SUPPORT */
						(READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR)
 8001f20:	697b      	ldr	r3, [r7, #20]
 8001f22:	0f5b      	lsrs	r3, r3, #29
 8001f24:	075a      	lsls	r2, r3, #29
								!= RCC_OscInitStruct->PLL.PLLR)) {
 8001f26:	687b      	ldr	r3, [r7, #4]
 8001f28:	6b5b      	ldr	r3, [r3, #52]	; 0x34
						||
 8001f2a:	429a      	cmp	r2, r3
 8001f2c:	d001      	beq.n	8001f32 <HAL_RCC_OscConfig+0x60e>
					return HAL_ERROR;
 8001f2e:	2301      	movs	r3, #1
 8001f30:	e000      	b.n	8001f34 <HAL_RCC_OscConfig+0x610>
				}
			}
		}
	}
	return HAL_OK;
 8001f32:	2300      	movs	r3, #0
}
 8001f34:	0018      	movs	r0, r3
 8001f36:	46bd      	mov	sp, r7
 8001f38:	b008      	add	sp, #32
 8001f3a:	bd80      	pop	{r7, pc}
 8001f3c:	40021000 	.word	0x40021000
 8001f40:	40007000 	.word	0x40007000
 8001f44:	00001388 	.word	0x00001388
 8001f48:	efffffff 	.word	0xefffffff
 8001f4c:	feffffff 	.word	0xfeffffff
 8001f50:	11c1808c 	.word	0x11c1808c
 8001f54:	eefefffc 	.word	0xeefefffc

08001f58 <HAL_RCC_ClockConfig>:
 *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
 *         (for more details refer to section above "Initialization/de-initialization functions")
 * @retval None
 */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef *RCC_ClkInitStruct,
		uint32_t FLatency) {
 8001f58:	b580      	push	{r7, lr}
 8001f5a:	b084      	sub	sp, #16
 8001f5c:	af00      	add	r7, sp, #0
 8001f5e:	6078      	str	r0, [r7, #4]
 8001f60:	6039      	str	r1, [r7, #0]
	uint32_t tickstart;

	/* Check Null pointer */
	if (RCC_ClkInitStruct == NULL) {
 8001f62:	687b      	ldr	r3, [r7, #4]
 8001f64:	2b00      	cmp	r3, #0
 8001f66:	d101      	bne.n	8001f6c <HAL_RCC_ClockConfig+0x14>
		return HAL_ERROR;
 8001f68:	2301      	movs	r3, #1
 8001f6a:	e0e9      	b.n	8002140 <HAL_RCC_ClockConfig+0x1e8>
	/* To correctly read data from FLASH memory, the number of wait states (LATENCY)
	 must be correctly programmed according to the frequency of the FLASH clock
	 (HCLK) and the supply voltage of the device. */

	/* Increasing the number of wait states because of higher CPU frequency */
	if (FLatency > __HAL_FLASH_GET_LATENCY()) {
 8001f6c:	4b76      	ldr	r3, [pc, #472]	; (8002148 <HAL_RCC_ClockConfig+0x1f0>)
 8001f6e:	681b      	ldr	r3, [r3, #0]
 8001f70:	2207      	movs	r2, #7
 8001f72:	4013      	ands	r3, r2
 8001f74:	683a      	ldr	r2, [r7, #0]
 8001f76:	429a      	cmp	r2, r3
 8001f78:	d91e      	bls.n	8001fb8 <HAL_RCC_ClockConfig+0x60>
		/* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
		__HAL_FLASH_SET_LATENCY(FLatency);
 8001f7a:	4b73      	ldr	r3, [pc, #460]	; (8002148 <HAL_RCC_ClockConfig+0x1f0>)
 8001f7c:	681b      	ldr	r3, [r3, #0]
 8001f7e:	2207      	movs	r2, #7
 8001f80:	4393      	bics	r3, r2
 8001f82:	0019      	movs	r1, r3
 8001f84:	4b70      	ldr	r3, [pc, #448]	; (8002148 <HAL_RCC_ClockConfig+0x1f0>)
 8001f86:	683a      	ldr	r2, [r7, #0]
 8001f88:	430a      	orrs	r2, r1
 8001f8a:	601a      	str	r2, [r3, #0]

		/* Check that the new number of wait states is taken into account to access the Flash
		 memory by polling the FLASH_ACR register */
		tickstart = HAL_GetTick();
 8001f8c:	f7fe fe2e 	bl	8000bec <HAL_GetTick>
 8001f90:	0003      	movs	r3, r0
 8001f92:	60fb      	str	r3, [r7, #12]

		while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency) {
 8001f94:	e009      	b.n	8001faa <HAL_RCC_ClockConfig+0x52>
			if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE) {
 8001f96:	f7fe fe29 	bl	8000bec <HAL_GetTick>
 8001f9a:	0002      	movs	r2, r0
 8001f9c:	68fb      	ldr	r3, [r7, #12]
 8001f9e:	1ad3      	subs	r3, r2, r3
 8001fa0:	4a6a      	ldr	r2, [pc, #424]	; (800214c <HAL_RCC_ClockConfig+0x1f4>)
 8001fa2:	4293      	cmp	r3, r2
 8001fa4:	d901      	bls.n	8001faa <HAL_RCC_ClockConfig+0x52>
				return HAL_TIMEOUT;
 8001fa6:	2303      	movs	r3, #3
 8001fa8:	e0ca      	b.n	8002140 <HAL_RCC_ClockConfig+0x1e8>
		while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency) {
 8001faa:	4b67      	ldr	r3, [pc, #412]	; (8002148 <HAL_RCC_ClockConfig+0x1f0>)
 8001fac:	681b      	ldr	r3, [r3, #0]
 8001fae:	2207      	movs	r2, #7
 8001fb0:	4013      	ands	r3, r2
 8001fb2:	683a      	ldr	r2, [r7, #0]
 8001fb4:	429a      	cmp	r2, r3
 8001fb6:	d1ee      	bne.n	8001f96 <HAL_RCC_ClockConfig+0x3e>
			}
		}
	}

	/*-------------------------- HCLK Configuration --------------------------*/
	if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK)
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	681b      	ldr	r3, [r3, #0]
 8001fbc:	2202      	movs	r2, #2
 8001fbe:	4013      	ands	r3, r2
 8001fc0:	d015      	beq.n	8001fee <HAL_RCC_ClockConfig+0x96>
			== RCC_CLOCKTYPE_HCLK) {
		/* Set the highest APB divider in order to ensure that we do not go through
		 a non-spec phase whatever we decrease or increase HCLK. */
		if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1)
 8001fc2:	687b      	ldr	r3, [r7, #4]
 8001fc4:	681b      	ldr	r3, [r3, #0]
 8001fc6:	2204      	movs	r2, #4
 8001fc8:	4013      	ands	r3, r2
 8001fca:	d006      	beq.n	8001fda <HAL_RCC_ClockConfig+0x82>
				== RCC_CLOCKTYPE_PCLK1) {
			MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 8001fcc:	4b60      	ldr	r3, [pc, #384]	; (8002150 <HAL_RCC_ClockConfig+0x1f8>)
 8001fce:	689a      	ldr	r2, [r3, #8]
 8001fd0:	4b5f      	ldr	r3, [pc, #380]	; (8002150 <HAL_RCC_ClockConfig+0x1f8>)
 8001fd2:	21e0      	movs	r1, #224	; 0xe0
 8001fd4:	01c9      	lsls	r1, r1, #7
 8001fd6:	430a      	orrs	r2, r1
 8001fd8:	609a      	str	r2, [r3, #8]
		}

		/* Set the new HCLK clock divider */
		assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
		MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001fda:	4b5d      	ldr	r3, [pc, #372]	; (8002150 <HAL_RCC_ClockConfig+0x1f8>)
 8001fdc:	689b      	ldr	r3, [r3, #8]
 8001fde:	4a5d      	ldr	r2, [pc, #372]	; (8002154 <HAL_RCC_ClockConfig+0x1fc>)
 8001fe0:	4013      	ands	r3, r2
 8001fe2:	0019      	movs	r1, r3
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	689a      	ldr	r2, [r3, #8]
 8001fe8:	4b59      	ldr	r3, [pc, #356]	; (8002150 <HAL_RCC_ClockConfig+0x1f8>)
 8001fea:	430a      	orrs	r2, r1
 8001fec:	609a      	str	r2, [r3, #8]
	}

	/*------------------------- SYSCLK Configuration ---------------------------*/
	if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK)
 8001fee:	687b      	ldr	r3, [r7, #4]
 8001ff0:	681b      	ldr	r3, [r3, #0]
 8001ff2:	2201      	movs	r2, #1
 8001ff4:	4013      	ands	r3, r2
 8001ff6:	d057      	beq.n	80020a8 <HAL_RCC_ClockConfig+0x150>
			== RCC_CLOCKTYPE_SYSCLK) {
		assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

		/* HSE is selected as System Clock Source */
		if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE) {
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	685b      	ldr	r3, [r3, #4]
 8001ffc:	2b01      	cmp	r3, #1
 8001ffe:	d107      	bne.n	8002010 <HAL_RCC_ClockConfig+0xb8>
			/* Check the HSE ready flag */
			if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U) {
 8002000:	4b53      	ldr	r3, [pc, #332]	; (8002150 <HAL_RCC_ClockConfig+0x1f8>)
 8002002:	681a      	ldr	r2, [r3, #0]
 8002004:	2380      	movs	r3, #128	; 0x80
 8002006:	029b      	lsls	r3, r3, #10
 8002008:	4013      	ands	r3, r2
 800200a:	d12b      	bne.n	8002064 <HAL_RCC_ClockConfig+0x10c>
				return HAL_ERROR;
 800200c:	2301      	movs	r3, #1
 800200e:	e097      	b.n	8002140 <HAL_RCC_ClockConfig+0x1e8>
			}
		}
		/* PLL is selected as System Clock Source */
		else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK) {
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	685b      	ldr	r3, [r3, #4]
 8002014:	2b02      	cmp	r3, #2
 8002016:	d107      	bne.n	8002028 <HAL_RCC_ClockConfig+0xd0>
			/* Check the PLL ready flag */
			if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U) {
 8002018:	4b4d      	ldr	r3, [pc, #308]	; (8002150 <HAL_RCC_ClockConfig+0x1f8>)
 800201a:	681a      	ldr	r2, [r3, #0]
 800201c:	2380      	movs	r3, #128	; 0x80
 800201e:	049b      	lsls	r3, r3, #18
 8002020:	4013      	ands	r3, r2
 8002022:	d11f      	bne.n	8002064 <HAL_RCC_ClockConfig+0x10c>
				return HAL_ERROR;
 8002024:	2301      	movs	r3, #1
 8002026:	e08b      	b.n	8002140 <HAL_RCC_ClockConfig+0x1e8>
			}
		}
		/* HSI is selected as System Clock Source */
		else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI) {
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	685b      	ldr	r3, [r3, #4]
 800202c:	2b00      	cmp	r3, #0
 800202e:	d107      	bne.n	8002040 <HAL_RCC_ClockConfig+0xe8>
			/* Check the HSI ready flag */
			if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U) {
 8002030:	4b47      	ldr	r3, [pc, #284]	; (8002150 <HAL_RCC_ClockConfig+0x1f8>)
 8002032:	681a      	ldr	r2, [r3, #0]
 8002034:	2380      	movs	r3, #128	; 0x80
 8002036:	00db      	lsls	r3, r3, #3
 8002038:	4013      	ands	r3, r2
 800203a:	d113      	bne.n	8002064 <HAL_RCC_ClockConfig+0x10c>
				return HAL_ERROR;
 800203c:	2301      	movs	r3, #1
 800203e:	e07f      	b.n	8002140 <HAL_RCC_ClockConfig+0x1e8>
			}
		}
		/* LSI is selected as System Clock Source */
		else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_LSI) {
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	685b      	ldr	r3, [r3, #4]
 8002044:	2b03      	cmp	r3, #3
 8002046:	d106      	bne.n	8002056 <HAL_RCC_ClockConfig+0xfe>
			/* Check the LSI ready flag */
			if (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U) {
 8002048:	4b41      	ldr	r3, [pc, #260]	; (8002150 <HAL_RCC_ClockConfig+0x1f8>)
 800204a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800204c:	2202      	movs	r2, #2
 800204e:	4013      	ands	r3, r2
 8002050:	d108      	bne.n	8002064 <HAL_RCC_ClockConfig+0x10c>
				return HAL_ERROR;
 8002052:	2301      	movs	r3, #1
 8002054:	e074      	b.n	8002140 <HAL_RCC_ClockConfig+0x1e8>
			}
		}
		/* LSE is selected as System Clock Source */
		else {
			/* Check the LSE ready flag */
			if (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U) {
 8002056:	4b3e      	ldr	r3, [pc, #248]	; (8002150 <HAL_RCC_ClockConfig+0x1f8>)
 8002058:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800205a:	2202      	movs	r2, #2
 800205c:	4013      	ands	r3, r2
 800205e:	d101      	bne.n	8002064 <HAL_RCC_ClockConfig+0x10c>
				return HAL_ERROR;
 8002060:	2301      	movs	r3, #1
 8002062:	e06d      	b.n	8002140 <HAL_RCC_ClockConfig+0x1e8>
			}
		}
		MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8002064:	4b3a      	ldr	r3, [pc, #232]	; (8002150 <HAL_RCC_ClockConfig+0x1f8>)
 8002066:	689b      	ldr	r3, [r3, #8]
 8002068:	2207      	movs	r2, #7
 800206a:	4393      	bics	r3, r2
 800206c:	0019      	movs	r1, r3
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	685a      	ldr	r2, [r3, #4]
 8002072:	4b37      	ldr	r3, [pc, #220]	; (8002150 <HAL_RCC_ClockConfig+0x1f8>)
 8002074:	430a      	orrs	r2, r1
 8002076:	609a      	str	r2, [r3, #8]

		/* Get Start Tick*/
		tickstart = HAL_GetTick();
 8002078:	f7fe fdb8 	bl	8000bec <HAL_GetTick>
 800207c:	0003      	movs	r3, r0
 800207e:	60fb      	str	r3, [r7, #12]

		while (__HAL_RCC_GET_SYSCLK_SOURCE()
 8002080:	e009      	b.n	8002096 <HAL_RCC_ClockConfig+0x13e>
				!= (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos)) {
			if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE) {
 8002082:	f7fe fdb3 	bl	8000bec <HAL_GetTick>
 8002086:	0002      	movs	r2, r0
 8002088:	68fb      	ldr	r3, [r7, #12]
 800208a:	1ad3      	subs	r3, r2, r3
 800208c:	4a2f      	ldr	r2, [pc, #188]	; (800214c <HAL_RCC_ClockConfig+0x1f4>)
 800208e:	4293      	cmp	r3, r2
 8002090:	d901      	bls.n	8002096 <HAL_RCC_ClockConfig+0x13e>
				return HAL_TIMEOUT;
 8002092:	2303      	movs	r3, #3
 8002094:	e054      	b.n	8002140 <HAL_RCC_ClockConfig+0x1e8>
		while (__HAL_RCC_GET_SYSCLK_SOURCE()
 8002096:	4b2e      	ldr	r3, [pc, #184]	; (8002150 <HAL_RCC_ClockConfig+0x1f8>)
 8002098:	689b      	ldr	r3, [r3, #8]
 800209a:	2238      	movs	r2, #56	; 0x38
 800209c:	401a      	ands	r2, r3
				!= (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos)) {
 800209e:	687b      	ldr	r3, [r7, #4]
 80020a0:	685b      	ldr	r3, [r3, #4]
 80020a2:	00db      	lsls	r3, r3, #3
 80020a4:	429a      	cmp	r2, r3
 80020a6:	d1ec      	bne.n	8002082 <HAL_RCC_ClockConfig+0x12a>
			}
		}
	}

	/* Decreasing the number of wait states because of lower CPU frequency */
	if (FLatency < __HAL_FLASH_GET_LATENCY()) {
 80020a8:	4b27      	ldr	r3, [pc, #156]	; (8002148 <HAL_RCC_ClockConfig+0x1f0>)
 80020aa:	681b      	ldr	r3, [r3, #0]
 80020ac:	2207      	movs	r2, #7
 80020ae:	4013      	ands	r3, r2
 80020b0:	683a      	ldr	r2, [r7, #0]
 80020b2:	429a      	cmp	r2, r3
 80020b4:	d21e      	bcs.n	80020f4 <HAL_RCC_ClockConfig+0x19c>
		/* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
		__HAL_FLASH_SET_LATENCY(FLatency);
 80020b6:	4b24      	ldr	r3, [pc, #144]	; (8002148 <HAL_RCC_ClockConfig+0x1f0>)
 80020b8:	681b      	ldr	r3, [r3, #0]
 80020ba:	2207      	movs	r2, #7
 80020bc:	4393      	bics	r3, r2
 80020be:	0019      	movs	r1, r3
 80020c0:	4b21      	ldr	r3, [pc, #132]	; (8002148 <HAL_RCC_ClockConfig+0x1f0>)
 80020c2:	683a      	ldr	r2, [r7, #0]
 80020c4:	430a      	orrs	r2, r1
 80020c6:	601a      	str	r2, [r3, #0]

		/* Check that the new number of wait states is taken into account to access the Flash
		 memory by polling the FLASH_ACR register */
		tickstart = HAL_GetTick();
 80020c8:	f7fe fd90 	bl	8000bec <HAL_GetTick>
 80020cc:	0003      	movs	r3, r0
 80020ce:	60fb      	str	r3, [r7, #12]

		while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency) {
 80020d0:	e009      	b.n	80020e6 <HAL_RCC_ClockConfig+0x18e>
			if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE) {
 80020d2:	f7fe fd8b 	bl	8000bec <HAL_GetTick>
 80020d6:	0002      	movs	r2, r0
 80020d8:	68fb      	ldr	r3, [r7, #12]
 80020da:	1ad3      	subs	r3, r2, r3
 80020dc:	4a1b      	ldr	r2, [pc, #108]	; (800214c <HAL_RCC_ClockConfig+0x1f4>)
 80020de:	4293      	cmp	r3, r2
 80020e0:	d901      	bls.n	80020e6 <HAL_RCC_ClockConfig+0x18e>
				return HAL_TIMEOUT;
 80020e2:	2303      	movs	r3, #3
 80020e4:	e02c      	b.n	8002140 <HAL_RCC_ClockConfig+0x1e8>
		while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency) {
 80020e6:	4b18      	ldr	r3, [pc, #96]	; (8002148 <HAL_RCC_ClockConfig+0x1f0>)
 80020e8:	681b      	ldr	r3, [r3, #0]
 80020ea:	2207      	movs	r2, #7
 80020ec:	4013      	ands	r3, r2
 80020ee:	683a      	ldr	r2, [r7, #0]
 80020f0:	429a      	cmp	r2, r3
 80020f2:	d1ee      	bne.n	80020d2 <HAL_RCC_ClockConfig+0x17a>
			}
		}
	}

	/*-------------------------- PCLK1 Configuration ---------------------------*/
	if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1)
 80020f4:	687b      	ldr	r3, [r7, #4]
 80020f6:	681b      	ldr	r3, [r3, #0]
 80020f8:	2204      	movs	r2, #4
 80020fa:	4013      	ands	r3, r2
 80020fc:	d009      	beq.n	8002112 <HAL_RCC_ClockConfig+0x1ba>
			== RCC_CLOCKTYPE_PCLK1) {
		assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
		MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 80020fe:	4b14      	ldr	r3, [pc, #80]	; (8002150 <HAL_RCC_ClockConfig+0x1f8>)
 8002100:	689b      	ldr	r3, [r3, #8]
 8002102:	4a15      	ldr	r2, [pc, #84]	; (8002158 <HAL_RCC_ClockConfig+0x200>)
 8002104:	4013      	ands	r3, r2
 8002106:	0019      	movs	r1, r3
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	68da      	ldr	r2, [r3, #12]
 800210c:	4b10      	ldr	r3, [pc, #64]	; (8002150 <HAL_RCC_ClockConfig+0x1f8>)
 800210e:	430a      	orrs	r2, r1
 8002110:	609a      	str	r2, [r3, #8]
	}

	/* Update the SystemCoreClock global variable */
	SystemCoreClock =
			(HAL_RCC_GetSysClockFreq()
 8002112:	f000 f829 	bl	8002168 <HAL_RCC_GetSysClockFreq>
 8002116:	0001      	movs	r1, r0
					>> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)
 8002118:	4b0d      	ldr	r3, [pc, #52]	; (8002150 <HAL_RCC_ClockConfig+0x1f8>)
 800211a:	689b      	ldr	r3, [r3, #8]
							>> RCC_CFGR_HPRE_Pos]) & 0x1FU));
 800211c:	0a1b      	lsrs	r3, r3, #8
 800211e:	220f      	movs	r2, #15
 8002120:	401a      	ands	r2, r3
					>> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)
 8002122:	4b0e      	ldr	r3, [pc, #56]	; (800215c <HAL_RCC_ClockConfig+0x204>)
 8002124:	0092      	lsls	r2, r2, #2
 8002126:	58d3      	ldr	r3, [r2, r3]
							>> RCC_CFGR_HPRE_Pos]) & 0x1FU));
 8002128:	221f      	movs	r2, #31
 800212a:	4013      	ands	r3, r2
					>> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)
 800212c:	000a      	movs	r2, r1
 800212e:	40da      	lsrs	r2, r3
	SystemCoreClock =
 8002130:	4b0b      	ldr	r3, [pc, #44]	; (8002160 <HAL_RCC_ClockConfig+0x208>)
 8002132:	601a      	str	r2, [r3, #0]

	/* Configure the source of time base considering new system clocks settings*/
	return HAL_InitTick(uwTickPrio);
 8002134:	4b0b      	ldr	r3, [pc, #44]	; (8002164 <HAL_RCC_ClockConfig+0x20c>)
 8002136:	681b      	ldr	r3, [r3, #0]
 8002138:	0018      	movs	r0, r3
 800213a:	f7fe fcfb 	bl	8000b34 <HAL_InitTick>
 800213e:	0003      	movs	r3, r0
}
 8002140:	0018      	movs	r0, r3
 8002142:	46bd      	mov	sp, r7
 8002144:	b004      	add	sp, #16
 8002146:	bd80      	pop	{r7, pc}
 8002148:	40022000 	.word	0x40022000
 800214c:	00001388 	.word	0x00001388
 8002150:	40021000 	.word	0x40021000
 8002154:	fffff0ff 	.word	0xfffff0ff
 8002158:	ffff8fff 	.word	0xffff8fff
 800215c:	080037c8 	.word	0x080037c8
 8002160:	20000000 	.word	0x20000000
 8002164:	20000004 	.word	0x20000004

08002168 <HAL_RCC_GetSysClockFreq>:
 *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
 *
 *
 * @retval SYSCLK frequency
 */
uint32_t HAL_RCC_GetSysClockFreq(void) {
 8002168:	b580      	push	{r7, lr}
 800216a:	b086      	sub	sp, #24
 800216c:	af00      	add	r7, sp, #0
	uint32_t pllvco, pllsource, pllr, pllm, hsidiv;
	uint32_t sysclockfreq;

	if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) {
 800216e:	4b3c      	ldr	r3, [pc, #240]	; (8002260 <HAL_RCC_GetSysClockFreq+0xf8>)
 8002170:	689b      	ldr	r3, [r3, #8]
 8002172:	2238      	movs	r2, #56	; 0x38
 8002174:	4013      	ands	r3, r2
 8002176:	d10f      	bne.n	8002198 <HAL_RCC_GetSysClockFreq+0x30>
		/* HSISYS can be derived for HSI16 */
		hsidiv = (1UL
				<< ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos));
 8002178:	4b39      	ldr	r3, [pc, #228]	; (8002260 <HAL_RCC_GetSysClockFreq+0xf8>)
 800217a:	681b      	ldr	r3, [r3, #0]
 800217c:	0adb      	lsrs	r3, r3, #11
 800217e:	2207      	movs	r2, #7
 8002180:	4013      	ands	r3, r2
		hsidiv = (1UL
 8002182:	2201      	movs	r2, #1
 8002184:	409a      	lsls	r2, r3
 8002186:	0013      	movs	r3, r2
 8002188:	603b      	str	r3, [r7, #0]

		/* HSI used as system clock source */
		sysclockfreq = (HSI_VALUE / hsidiv);
 800218a:	6839      	ldr	r1, [r7, #0]
 800218c:	4835      	ldr	r0, [pc, #212]	; (8002264 <HAL_RCC_GetSysClockFreq+0xfc>)
 800218e:	f7fd ffc3 	bl	8000118 <__udivsi3>
 8002192:	0003      	movs	r3, r0
 8002194:	613b      	str	r3, [r7, #16]
 8002196:	e05d      	b.n	8002254 <HAL_RCC_GetSysClockFreq+0xec>
	} else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) {
 8002198:	4b31      	ldr	r3, [pc, #196]	; (8002260 <HAL_RCC_GetSysClockFreq+0xf8>)
 800219a:	689b      	ldr	r3, [r3, #8]
 800219c:	2238      	movs	r2, #56	; 0x38
 800219e:	4013      	ands	r3, r2
 80021a0:	2b08      	cmp	r3, #8
 80021a2:	d102      	bne.n	80021aa <HAL_RCC_GetSysClockFreq+0x42>
		/* HSE used as system clock source */
		sysclockfreq = HSE_VALUE;
 80021a4:	4b30      	ldr	r3, [pc, #192]	; (8002268 <HAL_RCC_GetSysClockFreq+0x100>)
 80021a6:	613b      	str	r3, [r7, #16]
 80021a8:	e054      	b.n	8002254 <HAL_RCC_GetSysClockFreq+0xec>
	} else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) {
 80021aa:	4b2d      	ldr	r3, [pc, #180]	; (8002260 <HAL_RCC_GetSysClockFreq+0xf8>)
 80021ac:	689b      	ldr	r3, [r3, #8]
 80021ae:	2238      	movs	r2, #56	; 0x38
 80021b0:	4013      	ands	r3, r2
 80021b2:	2b10      	cmp	r3, #16
 80021b4:	d138      	bne.n	8002228 <HAL_RCC_GetSysClockFreq+0xc0>
		/* PLL used as system clock  source */

		/* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
		 SYSCLK = PLL_VCO / PLLR
		 */
		pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
 80021b6:	4b2a      	ldr	r3, [pc, #168]	; (8002260 <HAL_RCC_GetSysClockFreq+0xf8>)
 80021b8:	68db      	ldr	r3, [r3, #12]
 80021ba:	2203      	movs	r2, #3
 80021bc:	4013      	ands	r3, r2
 80021be:	60fb      	str	r3, [r7, #12]
		pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U;
 80021c0:	4b27      	ldr	r3, [pc, #156]	; (8002260 <HAL_RCC_GetSysClockFreq+0xf8>)
 80021c2:	68db      	ldr	r3, [r3, #12]
 80021c4:	091b      	lsrs	r3, r3, #4
 80021c6:	2207      	movs	r2, #7
 80021c8:	4013      	ands	r3, r2
 80021ca:	3301      	adds	r3, #1
 80021cc:	60bb      	str	r3, [r7, #8]

		switch (pllsource) {
 80021ce:	68fb      	ldr	r3, [r7, #12]
 80021d0:	2b03      	cmp	r3, #3
 80021d2:	d10d      	bne.n	80021f0 <HAL_RCC_GetSysClockFreq+0x88>
		case RCC_PLLSOURCE_HSE: /* HSE used as PLL clock source */
			pllvco =
					(HSE_VALUE / pllm)
 80021d4:	68b9      	ldr	r1, [r7, #8]
 80021d6:	4824      	ldr	r0, [pc, #144]	; (8002268 <HAL_RCC_GetSysClockFreq+0x100>)
 80021d8:	f7fd ff9e 	bl	8000118 <__udivsi3>
 80021dc:	0003      	movs	r3, r0
 80021de:	0019      	movs	r1, r3
							* ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN)
 80021e0:	4b1f      	ldr	r3, [pc, #124]	; (8002260 <HAL_RCC_GetSysClockFreq+0xf8>)
 80021e2:	68db      	ldr	r3, [r3, #12]
									>> RCC_PLLCFGR_PLLN_Pos);
 80021e4:	0a1b      	lsrs	r3, r3, #8
 80021e6:	227f      	movs	r2, #127	; 0x7f
 80021e8:	4013      	ands	r3, r2
			pllvco =
 80021ea:	434b      	muls	r3, r1
 80021ec:	617b      	str	r3, [r7, #20]
			break;
 80021ee:	e00d      	b.n	800220c <HAL_RCC_GetSysClockFreq+0xa4>

		case RCC_PLLSOURCE_HSI: /* HSI16 used as PLL clock source */
		default: /* HSI16 used as PLL clock source */
			pllvco =
					(HSI_VALUE / pllm)
 80021f0:	68b9      	ldr	r1, [r7, #8]
 80021f2:	481c      	ldr	r0, [pc, #112]	; (8002264 <HAL_RCC_GetSysClockFreq+0xfc>)
 80021f4:	f7fd ff90 	bl	8000118 <__udivsi3>
 80021f8:	0003      	movs	r3, r0
 80021fa:	0019      	movs	r1, r3
							* ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN)
 80021fc:	4b18      	ldr	r3, [pc, #96]	; (8002260 <HAL_RCC_GetSysClockFreq+0xf8>)
 80021fe:	68db      	ldr	r3, [r3, #12]
									>> RCC_PLLCFGR_PLLN_Pos);
 8002200:	0a1b      	lsrs	r3, r3, #8
 8002202:	227f      	movs	r2, #127	; 0x7f
 8002204:	4013      	ands	r3, r2
			pllvco =
 8002206:	434b      	muls	r3, r1
 8002208:	617b      	str	r3, [r7, #20]
			break;
 800220a:	46c0      	nop			; (mov r8, r8)
		}
		pllr =
				(((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos)
 800220c:	4b14      	ldr	r3, [pc, #80]	; (8002260 <HAL_RCC_GetSysClockFreq+0xf8>)
 800220e:	68db      	ldr	r3, [r3, #12]
 8002210:	0f5b      	lsrs	r3, r3, #29
 8002212:	2207      	movs	r2, #7
 8002214:	4013      	ands	r3, r2
		pllr =
 8002216:	3301      	adds	r3, #1
 8002218:	607b      	str	r3, [r7, #4]
						+ 1U);
		sysclockfreq = pllvco / pllr;
 800221a:	6879      	ldr	r1, [r7, #4]
 800221c:	6978      	ldr	r0, [r7, #20]
 800221e:	f7fd ff7b 	bl	8000118 <__udivsi3>
 8002222:	0003      	movs	r3, r0
 8002224:	613b      	str	r3, [r7, #16]
 8002226:	e015      	b.n	8002254 <HAL_RCC_GetSysClockFreq+0xec>
	} else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE) {
 8002228:	4b0d      	ldr	r3, [pc, #52]	; (8002260 <HAL_RCC_GetSysClockFreq+0xf8>)
 800222a:	689b      	ldr	r3, [r3, #8]
 800222c:	2238      	movs	r2, #56	; 0x38
 800222e:	4013      	ands	r3, r2
 8002230:	2b20      	cmp	r3, #32
 8002232:	d103      	bne.n	800223c <HAL_RCC_GetSysClockFreq+0xd4>
		/* LSE used as system clock source */
		sysclockfreq = LSE_VALUE;
 8002234:	2380      	movs	r3, #128	; 0x80
 8002236:	021b      	lsls	r3, r3, #8
 8002238:	613b      	str	r3, [r7, #16]
 800223a:	e00b      	b.n	8002254 <HAL_RCC_GetSysClockFreq+0xec>
	} else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI) {
 800223c:	4b08      	ldr	r3, [pc, #32]	; (8002260 <HAL_RCC_GetSysClockFreq+0xf8>)
 800223e:	689b      	ldr	r3, [r3, #8]
 8002240:	2238      	movs	r2, #56	; 0x38
 8002242:	4013      	ands	r3, r2
 8002244:	2b18      	cmp	r3, #24
 8002246:	d103      	bne.n	8002250 <HAL_RCC_GetSysClockFreq+0xe8>
		/* LSI used as system clock source */
		sysclockfreq = LSI_VALUE;
 8002248:	23fa      	movs	r3, #250	; 0xfa
 800224a:	01db      	lsls	r3, r3, #7
 800224c:	613b      	str	r3, [r7, #16]
 800224e:	e001      	b.n	8002254 <HAL_RCC_GetSysClockFreq+0xec>
	} else {
		sysclockfreq = 0U;
 8002250:	2300      	movs	r3, #0
 8002252:	613b      	str	r3, [r7, #16]
	}

	return sysclockfreq;
 8002254:	693b      	ldr	r3, [r7, #16]
}
 8002256:	0018      	movs	r0, r3
 8002258:	46bd      	mov	sp, r7
 800225a:	b006      	add	sp, #24
 800225c:	bd80      	pop	{r7, pc}
 800225e:	46c0      	nop			; (mov r8, r8)
 8002260:	40021000 	.word	0x40021000
 8002264:	00f42400 	.word	0x00f42400
 8002268:	007a1200 	.word	0x007a1200

0800226c <HAL_RCC_GetHCLKFreq>:
 *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
 *
 * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
 * @retval HCLK frequency in Hz
 */
uint32_t HAL_RCC_GetHCLKFreq(void) {
 800226c:	b580      	push	{r7, lr}
 800226e:	af00      	add	r7, sp, #0
	return SystemCoreClock;
 8002270:	4b02      	ldr	r3, [pc, #8]	; (800227c <HAL_RCC_GetHCLKFreq+0x10>)
 8002272:	681b      	ldr	r3, [r3, #0]
}
 8002274:	0018      	movs	r0, r3
 8002276:	46bd      	mov	sp, r7
 8002278:	bd80      	pop	{r7, pc}
 800227a:	46c0      	nop			; (mov r8, r8)
 800227c:	20000000 	.word	0x20000000

08002280 <HAL_RCC_GetPCLK1Freq>:
 * @brief  Return the PCLK1 frequency.
 * @note   Each time PCLK1 changes, this function must be called to update the
 *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
 * @retval PCLK1 frequency in Hz
 */
uint32_t HAL_RCC_GetPCLK1Freq(void) {
 8002280:	b5b0      	push	{r4, r5, r7, lr}
 8002282:	af00      	add	r7, sp, #0
	/* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
	return ((uint32_t) (__LL_RCC_CALC_PCLK1_FREQ(HAL_RCC_GetHCLKFreq(),
 8002284:	f7ff fff2 	bl	800226c <HAL_RCC_GetHCLKFreq>
 8002288:	0004      	movs	r4, r0
 800228a:	f7ff fb3f 	bl	800190c <LL_RCC_GetAPB1Prescaler>
 800228e:	0003      	movs	r3, r0
 8002290:	0b1a      	lsrs	r2, r3, #12
 8002292:	4b05      	ldr	r3, [pc, #20]	; (80022a8 <HAL_RCC_GetPCLK1Freq+0x28>)
 8002294:	0092      	lsls	r2, r2, #2
 8002296:	58d3      	ldr	r3, [r2, r3]
 8002298:	221f      	movs	r2, #31
 800229a:	4013      	ands	r3, r2
 800229c:	40dc      	lsrs	r4, r3
 800229e:	0023      	movs	r3, r4
			LL_RCC_GetAPB1Prescaler())));
}
 80022a0:	0018      	movs	r0, r3
 80022a2:	46bd      	mov	sp, r7
 80022a4:	bdb0      	pop	{r4, r5, r7, pc}
 80022a6:	46c0      	nop			; (mov r8, r8)
 80022a8:	08003808 	.word	0x08003808

080022ac <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80022ac:	b580      	push	{r7, lr}
 80022ae:	b082      	sub	sp, #8
 80022b0:	af00      	add	r7, sp, #0
 80022b2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	2b00      	cmp	r3, #0
 80022b8:	d101      	bne.n	80022be <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80022ba:	2301      	movs	r3, #1
 80022bc:	e046      	b.n	800234c <HAL_UART_Init+0xa0>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	2288      	movs	r2, #136	; 0x88
 80022c2:	589b      	ldr	r3, [r3, r2]
 80022c4:	2b00      	cmp	r3, #0
 80022c6:	d107      	bne.n	80022d8 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	2284      	movs	r2, #132	; 0x84
 80022cc:	2100      	movs	r1, #0
 80022ce:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	0018      	movs	r0, r3
 80022d4:	f7fe fb46 	bl	8000964 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80022d8:	687b      	ldr	r3, [r7, #4]
 80022da:	2288      	movs	r2, #136	; 0x88
 80022dc:	2124      	movs	r1, #36	; 0x24
 80022de:	5099      	str	r1, [r3, r2]

  __HAL_UART_DISABLE(huart);
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	681b      	ldr	r3, [r3, #0]
 80022e4:	681a      	ldr	r2, [r3, #0]
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	681b      	ldr	r3, [r3, #0]
 80022ea:	2101      	movs	r1, #1
 80022ec:	438a      	bics	r2, r1
 80022ee:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80022f4:	2b00      	cmp	r3, #0
 80022f6:	d003      	beq.n	8002300 <HAL_UART_Init+0x54>
  {
    UART_AdvFeatureConfig(huart);
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	0018      	movs	r0, r3
 80022fc:	f000 fb48 	bl	8002990 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	0018      	movs	r0, r3
 8002304:	f000 f8cc 	bl	80024a0 <UART_SetConfig>
 8002308:	0003      	movs	r3, r0
 800230a:	2b01      	cmp	r3, #1
 800230c:	d101      	bne.n	8002312 <HAL_UART_Init+0x66>
  {
    return HAL_ERROR;
 800230e:	2301      	movs	r3, #1
 8002310:	e01c      	b.n	800234c <HAL_UART_Init+0xa0>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002312:	687b      	ldr	r3, [r7, #4]
 8002314:	681b      	ldr	r3, [r3, #0]
 8002316:	685a      	ldr	r2, [r3, #4]
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	681b      	ldr	r3, [r3, #0]
 800231c:	490d      	ldr	r1, [pc, #52]	; (8002354 <HAL_UART_Init+0xa8>)
 800231e:	400a      	ands	r2, r1
 8002320:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	681b      	ldr	r3, [r3, #0]
 8002326:	689a      	ldr	r2, [r3, #8]
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	681b      	ldr	r3, [r3, #0]
 800232c:	212a      	movs	r1, #42	; 0x2a
 800232e:	438a      	bics	r2, r1
 8002330:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	681b      	ldr	r3, [r3, #0]
 8002336:	681a      	ldr	r2, [r3, #0]
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	681b      	ldr	r3, [r3, #0]
 800233c:	2101      	movs	r1, #1
 800233e:	430a      	orrs	r2, r1
 8002340:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	0018      	movs	r0, r3
 8002346:	f000 fbd7 	bl	8002af8 <UART_CheckIdleState>
 800234a:	0003      	movs	r3, r0
}
 800234c:	0018      	movs	r0, r3
 800234e:	46bd      	mov	sp, r7
 8002350:	b002      	add	sp, #8
 8002352:	bd80      	pop	{r7, pc}
 8002354:	ffffb7ff 	.word	0xffffb7ff

08002358 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002358:	b580      	push	{r7, lr}
 800235a:	b08a      	sub	sp, #40	; 0x28
 800235c:	af02      	add	r7, sp, #8
 800235e:	60f8      	str	r0, [r7, #12]
 8002360:	60b9      	str	r1, [r7, #8]
 8002362:	603b      	str	r3, [r7, #0]
 8002364:	1dbb      	adds	r3, r7, #6
 8002366:	801a      	strh	r2, [r3, #0]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002368:	68fb      	ldr	r3, [r7, #12]
 800236a:	2288      	movs	r2, #136	; 0x88
 800236c:	589b      	ldr	r3, [r3, r2]
 800236e:	2b20      	cmp	r3, #32
 8002370:	d000      	beq.n	8002374 <HAL_UART_Transmit+0x1c>
 8002372:	e090      	b.n	8002496 <HAL_UART_Transmit+0x13e>
  {
    if ((pData == NULL) || (Size == 0U))
 8002374:	68bb      	ldr	r3, [r7, #8]
 8002376:	2b00      	cmp	r3, #0
 8002378:	d003      	beq.n	8002382 <HAL_UART_Transmit+0x2a>
 800237a:	1dbb      	adds	r3, r7, #6
 800237c:	881b      	ldrh	r3, [r3, #0]
 800237e:	2b00      	cmp	r3, #0
 8002380:	d101      	bne.n	8002386 <HAL_UART_Transmit+0x2e>
    {
      return  HAL_ERROR;
 8002382:	2301      	movs	r3, #1
 8002384:	e088      	b.n	8002498 <HAL_UART_Transmit+0x140>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be filled into TDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002386:	68fb      	ldr	r3, [r7, #12]
 8002388:	689a      	ldr	r2, [r3, #8]
 800238a:	2380      	movs	r3, #128	; 0x80
 800238c:	015b      	lsls	r3, r3, #5
 800238e:	429a      	cmp	r2, r3
 8002390:	d109      	bne.n	80023a6 <HAL_UART_Transmit+0x4e>
 8002392:	68fb      	ldr	r3, [r7, #12]
 8002394:	691b      	ldr	r3, [r3, #16]
 8002396:	2b00      	cmp	r3, #0
 8002398:	d105      	bne.n	80023a6 <HAL_UART_Transmit+0x4e>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 800239a:	68bb      	ldr	r3, [r7, #8]
 800239c:	2201      	movs	r2, #1
 800239e:	4013      	ands	r3, r2
 80023a0:	d001      	beq.n	80023a6 <HAL_UART_Transmit+0x4e>
      {
        return  HAL_ERROR;
 80023a2:	2301      	movs	r3, #1
 80023a4:	e078      	b.n	8002498 <HAL_UART_Transmit+0x140>
      }
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80023a6:	68fb      	ldr	r3, [r7, #12]
 80023a8:	2290      	movs	r2, #144	; 0x90
 80023aa:	2100      	movs	r1, #0
 80023ac:	5099      	str	r1, [r3, r2]
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80023ae:	68fb      	ldr	r3, [r7, #12]
 80023b0:	2288      	movs	r2, #136	; 0x88
 80023b2:	2121      	movs	r1, #33	; 0x21
 80023b4:	5099      	str	r1, [r3, r2]

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80023b6:	f7fe fc19 	bl	8000bec <HAL_GetTick>
 80023ba:	0003      	movs	r3, r0
 80023bc:	617b      	str	r3, [r7, #20]

    huart->TxXferSize  = Size;
 80023be:	68fb      	ldr	r3, [r7, #12]
 80023c0:	1dba      	adds	r2, r7, #6
 80023c2:	2154      	movs	r1, #84	; 0x54
 80023c4:	8812      	ldrh	r2, [r2, #0]
 80023c6:	525a      	strh	r2, [r3, r1]
    huart->TxXferCount = Size;
 80023c8:	68fb      	ldr	r3, [r7, #12]
 80023ca:	1dba      	adds	r2, r7, #6
 80023cc:	2156      	movs	r1, #86	; 0x56
 80023ce:	8812      	ldrh	r2, [r2, #0]
 80023d0:	525a      	strh	r2, [r3, r1]

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80023d2:	68fb      	ldr	r3, [r7, #12]
 80023d4:	689a      	ldr	r2, [r3, #8]
 80023d6:	2380      	movs	r3, #128	; 0x80
 80023d8:	015b      	lsls	r3, r3, #5
 80023da:	429a      	cmp	r2, r3
 80023dc:	d108      	bne.n	80023f0 <HAL_UART_Transmit+0x98>
 80023de:	68fb      	ldr	r3, [r7, #12]
 80023e0:	691b      	ldr	r3, [r3, #16]
 80023e2:	2b00      	cmp	r3, #0
 80023e4:	d104      	bne.n	80023f0 <HAL_UART_Transmit+0x98>
    {
      pdata8bits  = NULL;
 80023e6:	2300      	movs	r3, #0
 80023e8:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80023ea:	68bb      	ldr	r3, [r7, #8]
 80023ec:	61bb      	str	r3, [r7, #24]
 80023ee:	e003      	b.n	80023f8 <HAL_UART_Transmit+0xa0>
    }
    else
    {
      pdata8bits  = pData;
 80023f0:	68bb      	ldr	r3, [r7, #8]
 80023f2:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80023f4:	2300      	movs	r3, #0
 80023f6:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80023f8:	e030      	b.n	800245c <HAL_UART_Transmit+0x104>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80023fa:	697a      	ldr	r2, [r7, #20]
 80023fc:	68f8      	ldr	r0, [r7, #12]
 80023fe:	683b      	ldr	r3, [r7, #0]
 8002400:	9300      	str	r3, [sp, #0]
 8002402:	0013      	movs	r3, r2
 8002404:	2200      	movs	r2, #0
 8002406:	2180      	movs	r1, #128	; 0x80
 8002408:	f000 fc20 	bl	8002c4c <UART_WaitOnFlagUntilTimeout>
 800240c:	1e03      	subs	r3, r0, #0
 800240e:	d005      	beq.n	800241c <HAL_UART_Transmit+0xc4>
      {

        huart->gState = HAL_UART_STATE_READY;
 8002410:	68fb      	ldr	r3, [r7, #12]
 8002412:	2288      	movs	r2, #136	; 0x88
 8002414:	2120      	movs	r1, #32
 8002416:	5099      	str	r1, [r3, r2]

        return HAL_TIMEOUT;
 8002418:	2303      	movs	r3, #3
 800241a:	e03d      	b.n	8002498 <HAL_UART_Transmit+0x140>
      }
      if (pdata8bits == NULL)
 800241c:	69fb      	ldr	r3, [r7, #28]
 800241e:	2b00      	cmp	r3, #0
 8002420:	d10b      	bne.n	800243a <HAL_UART_Transmit+0xe2>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8002422:	69bb      	ldr	r3, [r7, #24]
 8002424:	881b      	ldrh	r3, [r3, #0]
 8002426:	001a      	movs	r2, r3
 8002428:	68fb      	ldr	r3, [r7, #12]
 800242a:	681b      	ldr	r3, [r3, #0]
 800242c:	05d2      	lsls	r2, r2, #23
 800242e:	0dd2      	lsrs	r2, r2, #23
 8002430:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8002432:	69bb      	ldr	r3, [r7, #24]
 8002434:	3302      	adds	r3, #2
 8002436:	61bb      	str	r3, [r7, #24]
 8002438:	e007      	b.n	800244a <HAL_UART_Transmit+0xf2>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800243a:	69fb      	ldr	r3, [r7, #28]
 800243c:	781a      	ldrb	r2, [r3, #0]
 800243e:	68fb      	ldr	r3, [r7, #12]
 8002440:	681b      	ldr	r3, [r3, #0]
 8002442:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8002444:	69fb      	ldr	r3, [r7, #28]
 8002446:	3301      	adds	r3, #1
 8002448:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800244a:	68fb      	ldr	r3, [r7, #12]
 800244c:	2256      	movs	r2, #86	; 0x56
 800244e:	5a9b      	ldrh	r3, [r3, r2]
 8002450:	b29b      	uxth	r3, r3
 8002452:	3b01      	subs	r3, #1
 8002454:	b299      	uxth	r1, r3
 8002456:	68fb      	ldr	r3, [r7, #12]
 8002458:	2256      	movs	r2, #86	; 0x56
 800245a:	5299      	strh	r1, [r3, r2]
    while (huart->TxXferCount > 0U)
 800245c:	68fb      	ldr	r3, [r7, #12]
 800245e:	2256      	movs	r2, #86	; 0x56
 8002460:	5a9b      	ldrh	r3, [r3, r2]
 8002462:	b29b      	uxth	r3, r3
 8002464:	2b00      	cmp	r3, #0
 8002466:	d1c8      	bne.n	80023fa <HAL_UART_Transmit+0xa2>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8002468:	697a      	ldr	r2, [r7, #20]
 800246a:	68f8      	ldr	r0, [r7, #12]
 800246c:	683b      	ldr	r3, [r7, #0]
 800246e:	9300      	str	r3, [sp, #0]
 8002470:	0013      	movs	r3, r2
 8002472:	2200      	movs	r2, #0
 8002474:	2140      	movs	r1, #64	; 0x40
 8002476:	f000 fbe9 	bl	8002c4c <UART_WaitOnFlagUntilTimeout>
 800247a:	1e03      	subs	r3, r0, #0
 800247c:	d005      	beq.n	800248a <HAL_UART_Transmit+0x132>
    {
      huart->gState = HAL_UART_STATE_READY;
 800247e:	68fb      	ldr	r3, [r7, #12]
 8002480:	2288      	movs	r2, #136	; 0x88
 8002482:	2120      	movs	r1, #32
 8002484:	5099      	str	r1, [r3, r2]

      return HAL_TIMEOUT;
 8002486:	2303      	movs	r3, #3
 8002488:	e006      	b.n	8002498 <HAL_UART_Transmit+0x140>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800248a:	68fb      	ldr	r3, [r7, #12]
 800248c:	2288      	movs	r2, #136	; 0x88
 800248e:	2120      	movs	r1, #32
 8002490:	5099      	str	r1, [r3, r2]

    return HAL_OK;
 8002492:	2300      	movs	r3, #0
 8002494:	e000      	b.n	8002498 <HAL_UART_Transmit+0x140>
  }
  else
  {
    return HAL_BUSY;
 8002496:	2302      	movs	r3, #2
  }
}
 8002498:	0018      	movs	r0, r3
 800249a:	46bd      	mov	sp, r7
 800249c:	b008      	add	sp, #32
 800249e:	bd80      	pop	{r7, pc}

080024a0 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80024a0:	b5b0      	push	{r4, r5, r7, lr}
 80024a2:	b090      	sub	sp, #64	; 0x40
 80024a4:	af00      	add	r7, sp, #0
 80024a6:	6278      	str	r0, [r7, #36]	; 0x24
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80024a8:	231a      	movs	r3, #26
 80024aa:	2220      	movs	r2, #32
 80024ac:	189b      	adds	r3, r3, r2
 80024ae:	19db      	adds	r3, r3, r7
 80024b0:	2200      	movs	r2, #0
 80024b2:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80024b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024b6:	689a      	ldr	r2, [r3, #8]
 80024b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024ba:	691b      	ldr	r3, [r3, #16]
 80024bc:	431a      	orrs	r2, r3
 80024be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024c0:	695b      	ldr	r3, [r3, #20]
 80024c2:	431a      	orrs	r2, r3
 80024c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024c6:	69db      	ldr	r3, [r3, #28]
 80024c8:	4313      	orrs	r3, r2
 80024ca:	63fb      	str	r3, [r7, #60]	; 0x3c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80024cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024ce:	681b      	ldr	r3, [r3, #0]
 80024d0:	681b      	ldr	r3, [r3, #0]
 80024d2:	4ac4      	ldr	r2, [pc, #784]	; (80027e4 <UART_SetConfig+0x344>)
 80024d4:	4013      	ands	r3, r2
 80024d6:	0019      	movs	r1, r3
 80024d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024da:	681a      	ldr	r2, [r3, #0]
 80024dc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80024de:	430b      	orrs	r3, r1
 80024e0:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80024e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024e4:	681b      	ldr	r3, [r3, #0]
 80024e6:	685b      	ldr	r3, [r3, #4]
 80024e8:	4abf      	ldr	r2, [pc, #764]	; (80027e8 <UART_SetConfig+0x348>)
 80024ea:	4013      	ands	r3, r2
 80024ec:	0018      	movs	r0, r3
 80024ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024f0:	68d9      	ldr	r1, [r3, #12]
 80024f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024f4:	681a      	ldr	r2, [r3, #0]
 80024f6:	0003      	movs	r3, r0
 80024f8:	430b      	orrs	r3, r1
 80024fa:	6053      	str	r3, [r2, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80024fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024fe:	699b      	ldr	r3, [r3, #24]
 8002500:	63fb      	str	r3, [r7, #60]	; 0x3c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8002502:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002504:	681b      	ldr	r3, [r3, #0]
 8002506:	4ab9      	ldr	r2, [pc, #740]	; (80027ec <UART_SetConfig+0x34c>)
 8002508:	4293      	cmp	r3, r2
 800250a:	d004      	beq.n	8002516 <UART_SetConfig+0x76>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800250c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800250e:	6a1b      	ldr	r3, [r3, #32]
 8002510:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8002512:	4313      	orrs	r3, r2
 8002514:	63fb      	str	r3, [r7, #60]	; 0x3c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8002516:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002518:	681b      	ldr	r3, [r3, #0]
 800251a:	689b      	ldr	r3, [r3, #8]
 800251c:	4ab4      	ldr	r2, [pc, #720]	; (80027f0 <UART_SetConfig+0x350>)
 800251e:	4013      	ands	r3, r2
 8002520:	0019      	movs	r1, r3
 8002522:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002524:	681a      	ldr	r2, [r3, #0]
 8002526:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002528:	430b      	orrs	r3, r1
 800252a:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800252c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800252e:	681b      	ldr	r3, [r3, #0]
 8002530:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002532:	220f      	movs	r2, #15
 8002534:	4393      	bics	r3, r2
 8002536:	0018      	movs	r0, r3
 8002538:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800253a:	6a59      	ldr	r1, [r3, #36]	; 0x24
 800253c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800253e:	681a      	ldr	r2, [r3, #0]
 8002540:	0003      	movs	r3, r0
 8002542:	430b      	orrs	r3, r1
 8002544:	62d3      	str	r3, [r2, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8002546:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002548:	681b      	ldr	r3, [r3, #0]
 800254a:	4aaa      	ldr	r2, [pc, #680]	; (80027f4 <UART_SetConfig+0x354>)
 800254c:	4293      	cmp	r3, r2
 800254e:	d131      	bne.n	80025b4 <UART_SetConfig+0x114>
 8002550:	4ba9      	ldr	r3, [pc, #676]	; (80027f8 <UART_SetConfig+0x358>)
 8002552:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002554:	2203      	movs	r2, #3
 8002556:	4013      	ands	r3, r2
 8002558:	2b03      	cmp	r3, #3
 800255a:	d01d      	beq.n	8002598 <UART_SetConfig+0xf8>
 800255c:	d823      	bhi.n	80025a6 <UART_SetConfig+0x106>
 800255e:	2b02      	cmp	r3, #2
 8002560:	d00c      	beq.n	800257c <UART_SetConfig+0xdc>
 8002562:	d820      	bhi.n	80025a6 <UART_SetConfig+0x106>
 8002564:	2b00      	cmp	r3, #0
 8002566:	d002      	beq.n	800256e <UART_SetConfig+0xce>
 8002568:	2b01      	cmp	r3, #1
 800256a:	d00e      	beq.n	800258a <UART_SetConfig+0xea>
 800256c:	e01b      	b.n	80025a6 <UART_SetConfig+0x106>
 800256e:	231b      	movs	r3, #27
 8002570:	2220      	movs	r2, #32
 8002572:	189b      	adds	r3, r3, r2
 8002574:	19db      	adds	r3, r3, r7
 8002576:	2200      	movs	r2, #0
 8002578:	701a      	strb	r2, [r3, #0]
 800257a:	e071      	b.n	8002660 <UART_SetConfig+0x1c0>
 800257c:	231b      	movs	r3, #27
 800257e:	2220      	movs	r2, #32
 8002580:	189b      	adds	r3, r3, r2
 8002582:	19db      	adds	r3, r3, r7
 8002584:	2202      	movs	r2, #2
 8002586:	701a      	strb	r2, [r3, #0]
 8002588:	e06a      	b.n	8002660 <UART_SetConfig+0x1c0>
 800258a:	231b      	movs	r3, #27
 800258c:	2220      	movs	r2, #32
 800258e:	189b      	adds	r3, r3, r2
 8002590:	19db      	adds	r3, r3, r7
 8002592:	2204      	movs	r2, #4
 8002594:	701a      	strb	r2, [r3, #0]
 8002596:	e063      	b.n	8002660 <UART_SetConfig+0x1c0>
 8002598:	231b      	movs	r3, #27
 800259a:	2220      	movs	r2, #32
 800259c:	189b      	adds	r3, r3, r2
 800259e:	19db      	adds	r3, r3, r7
 80025a0:	2208      	movs	r2, #8
 80025a2:	701a      	strb	r2, [r3, #0]
 80025a4:	e05c      	b.n	8002660 <UART_SetConfig+0x1c0>
 80025a6:	231b      	movs	r3, #27
 80025a8:	2220      	movs	r2, #32
 80025aa:	189b      	adds	r3, r3, r2
 80025ac:	19db      	adds	r3, r3, r7
 80025ae:	2210      	movs	r2, #16
 80025b0:	701a      	strb	r2, [r3, #0]
 80025b2:	e055      	b.n	8002660 <UART_SetConfig+0x1c0>
 80025b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025b6:	681b      	ldr	r3, [r3, #0]
 80025b8:	4a90      	ldr	r2, [pc, #576]	; (80027fc <UART_SetConfig+0x35c>)
 80025ba:	4293      	cmp	r3, r2
 80025bc:	d106      	bne.n	80025cc <UART_SetConfig+0x12c>
 80025be:	231b      	movs	r3, #27
 80025c0:	2220      	movs	r2, #32
 80025c2:	189b      	adds	r3, r3, r2
 80025c4:	19db      	adds	r3, r3, r7
 80025c6:	2200      	movs	r2, #0
 80025c8:	701a      	strb	r2, [r3, #0]
 80025ca:	e049      	b.n	8002660 <UART_SetConfig+0x1c0>
 80025cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025ce:	681b      	ldr	r3, [r3, #0]
 80025d0:	4a86      	ldr	r2, [pc, #536]	; (80027ec <UART_SetConfig+0x34c>)
 80025d2:	4293      	cmp	r3, r2
 80025d4:	d13e      	bne.n	8002654 <UART_SetConfig+0x1b4>
 80025d6:	4b88      	ldr	r3, [pc, #544]	; (80027f8 <UART_SetConfig+0x358>)
 80025d8:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80025da:	23c0      	movs	r3, #192	; 0xc0
 80025dc:	011b      	lsls	r3, r3, #4
 80025de:	4013      	ands	r3, r2
 80025e0:	22c0      	movs	r2, #192	; 0xc0
 80025e2:	0112      	lsls	r2, r2, #4
 80025e4:	4293      	cmp	r3, r2
 80025e6:	d027      	beq.n	8002638 <UART_SetConfig+0x198>
 80025e8:	22c0      	movs	r2, #192	; 0xc0
 80025ea:	0112      	lsls	r2, r2, #4
 80025ec:	4293      	cmp	r3, r2
 80025ee:	d82a      	bhi.n	8002646 <UART_SetConfig+0x1a6>
 80025f0:	2280      	movs	r2, #128	; 0x80
 80025f2:	0112      	lsls	r2, r2, #4
 80025f4:	4293      	cmp	r3, r2
 80025f6:	d011      	beq.n	800261c <UART_SetConfig+0x17c>
 80025f8:	2280      	movs	r2, #128	; 0x80
 80025fa:	0112      	lsls	r2, r2, #4
 80025fc:	4293      	cmp	r3, r2
 80025fe:	d822      	bhi.n	8002646 <UART_SetConfig+0x1a6>
 8002600:	2b00      	cmp	r3, #0
 8002602:	d004      	beq.n	800260e <UART_SetConfig+0x16e>
 8002604:	2280      	movs	r2, #128	; 0x80
 8002606:	00d2      	lsls	r2, r2, #3
 8002608:	4293      	cmp	r3, r2
 800260a:	d00e      	beq.n	800262a <UART_SetConfig+0x18a>
 800260c:	e01b      	b.n	8002646 <UART_SetConfig+0x1a6>
 800260e:	231b      	movs	r3, #27
 8002610:	2220      	movs	r2, #32
 8002612:	189b      	adds	r3, r3, r2
 8002614:	19db      	adds	r3, r3, r7
 8002616:	2200      	movs	r2, #0
 8002618:	701a      	strb	r2, [r3, #0]
 800261a:	e021      	b.n	8002660 <UART_SetConfig+0x1c0>
 800261c:	231b      	movs	r3, #27
 800261e:	2220      	movs	r2, #32
 8002620:	189b      	adds	r3, r3, r2
 8002622:	19db      	adds	r3, r3, r7
 8002624:	2202      	movs	r2, #2
 8002626:	701a      	strb	r2, [r3, #0]
 8002628:	e01a      	b.n	8002660 <UART_SetConfig+0x1c0>
 800262a:	231b      	movs	r3, #27
 800262c:	2220      	movs	r2, #32
 800262e:	189b      	adds	r3, r3, r2
 8002630:	19db      	adds	r3, r3, r7
 8002632:	2204      	movs	r2, #4
 8002634:	701a      	strb	r2, [r3, #0]
 8002636:	e013      	b.n	8002660 <UART_SetConfig+0x1c0>
 8002638:	231b      	movs	r3, #27
 800263a:	2220      	movs	r2, #32
 800263c:	189b      	adds	r3, r3, r2
 800263e:	19db      	adds	r3, r3, r7
 8002640:	2208      	movs	r2, #8
 8002642:	701a      	strb	r2, [r3, #0]
 8002644:	e00c      	b.n	8002660 <UART_SetConfig+0x1c0>
 8002646:	231b      	movs	r3, #27
 8002648:	2220      	movs	r2, #32
 800264a:	189b      	adds	r3, r3, r2
 800264c:	19db      	adds	r3, r3, r7
 800264e:	2210      	movs	r2, #16
 8002650:	701a      	strb	r2, [r3, #0]
 8002652:	e005      	b.n	8002660 <UART_SetConfig+0x1c0>
 8002654:	231b      	movs	r3, #27
 8002656:	2220      	movs	r2, #32
 8002658:	189b      	adds	r3, r3, r2
 800265a:	19db      	adds	r3, r3, r7
 800265c:	2210      	movs	r2, #16
 800265e:	701a      	strb	r2, [r3, #0]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8002660:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002662:	681b      	ldr	r3, [r3, #0]
 8002664:	4a61      	ldr	r2, [pc, #388]	; (80027ec <UART_SetConfig+0x34c>)
 8002666:	4293      	cmp	r3, r2
 8002668:	d000      	beq.n	800266c <UART_SetConfig+0x1cc>
 800266a:	e092      	b.n	8002792 <UART_SetConfig+0x2f2>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800266c:	231b      	movs	r3, #27
 800266e:	2220      	movs	r2, #32
 8002670:	189b      	adds	r3, r3, r2
 8002672:	19db      	adds	r3, r3, r7
 8002674:	781b      	ldrb	r3, [r3, #0]
 8002676:	2b08      	cmp	r3, #8
 8002678:	d015      	beq.n	80026a6 <UART_SetConfig+0x206>
 800267a:	dc18      	bgt.n	80026ae <UART_SetConfig+0x20e>
 800267c:	2b04      	cmp	r3, #4
 800267e:	d00d      	beq.n	800269c <UART_SetConfig+0x1fc>
 8002680:	dc15      	bgt.n	80026ae <UART_SetConfig+0x20e>
 8002682:	2b00      	cmp	r3, #0
 8002684:	d002      	beq.n	800268c <UART_SetConfig+0x1ec>
 8002686:	2b02      	cmp	r3, #2
 8002688:	d005      	beq.n	8002696 <UART_SetConfig+0x1f6>
 800268a:	e010      	b.n	80026ae <UART_SetConfig+0x20e>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800268c:	f7ff fdf8 	bl	8002280 <HAL_RCC_GetPCLK1Freq>
 8002690:	0003      	movs	r3, r0
 8002692:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8002694:	e014      	b.n	80026c0 <UART_SetConfig+0x220>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8002696:	4b5a      	ldr	r3, [pc, #360]	; (8002800 <UART_SetConfig+0x360>)
 8002698:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800269a:	e011      	b.n	80026c0 <UART_SetConfig+0x220>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800269c:	f7ff fd64 	bl	8002168 <HAL_RCC_GetSysClockFreq>
 80026a0:	0003      	movs	r3, r0
 80026a2:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80026a4:	e00c      	b.n	80026c0 <UART_SetConfig+0x220>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80026a6:	2380      	movs	r3, #128	; 0x80
 80026a8:	021b      	lsls	r3, r3, #8
 80026aa:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80026ac:	e008      	b.n	80026c0 <UART_SetConfig+0x220>
      default:
        pclk = 0U;
 80026ae:	2300      	movs	r3, #0
 80026b0:	637b      	str	r3, [r7, #52]	; 0x34
        ret = HAL_ERROR;
 80026b2:	231a      	movs	r3, #26
 80026b4:	2220      	movs	r2, #32
 80026b6:	189b      	adds	r3, r3, r2
 80026b8:	19db      	adds	r3, r3, r7
 80026ba:	2201      	movs	r2, #1
 80026bc:	701a      	strb	r2, [r3, #0]
        break;
 80026be:	46c0      	nop			; (mov r8, r8)
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 80026c0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80026c2:	2b00      	cmp	r3, #0
 80026c4:	d100      	bne.n	80026c8 <UART_SetConfig+0x228>
 80026c6:	e147      	b.n	8002958 <UART_SetConfig+0x4b8>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 80026c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026ca:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80026cc:	4b4d      	ldr	r3, [pc, #308]	; (8002804 <UART_SetConfig+0x364>)
 80026ce:	0052      	lsls	r2, r2, #1
 80026d0:	5ad3      	ldrh	r3, [r2, r3]
 80026d2:	0019      	movs	r1, r3
 80026d4:	6b78      	ldr	r0, [r7, #52]	; 0x34
 80026d6:	f7fd fd1f 	bl	8000118 <__udivsi3>
 80026da:	0003      	movs	r3, r0
 80026dc:	62bb      	str	r3, [r7, #40]	; 0x28

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80026de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026e0:	685a      	ldr	r2, [r3, #4]
 80026e2:	0013      	movs	r3, r2
 80026e4:	005b      	lsls	r3, r3, #1
 80026e6:	189b      	adds	r3, r3, r2
 80026e8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80026ea:	429a      	cmp	r2, r3
 80026ec:	d305      	bcc.n	80026fa <UART_SetConfig+0x25a>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 80026ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026f0:	685b      	ldr	r3, [r3, #4]
 80026f2:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80026f4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80026f6:	429a      	cmp	r2, r3
 80026f8:	d906      	bls.n	8002708 <UART_SetConfig+0x268>
      {
        ret = HAL_ERROR;
 80026fa:	231a      	movs	r3, #26
 80026fc:	2220      	movs	r2, #32
 80026fe:	189b      	adds	r3, r3, r2
 8002700:	19db      	adds	r3, r3, r7
 8002702:	2201      	movs	r2, #1
 8002704:	701a      	strb	r2, [r3, #0]
 8002706:	e127      	b.n	8002958 <UART_SetConfig+0x4b8>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8002708:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800270a:	61bb      	str	r3, [r7, #24]
 800270c:	2300      	movs	r3, #0
 800270e:	61fb      	str	r3, [r7, #28]
 8002710:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002712:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002714:	4b3b      	ldr	r3, [pc, #236]	; (8002804 <UART_SetConfig+0x364>)
 8002716:	0052      	lsls	r2, r2, #1
 8002718:	5ad3      	ldrh	r3, [r2, r3]
 800271a:	613b      	str	r3, [r7, #16]
 800271c:	2300      	movs	r3, #0
 800271e:	617b      	str	r3, [r7, #20]
 8002720:	693a      	ldr	r2, [r7, #16]
 8002722:	697b      	ldr	r3, [r7, #20]
 8002724:	69b8      	ldr	r0, [r7, #24]
 8002726:	69f9      	ldr	r1, [r7, #28]
 8002728:	f7fd fd82 	bl	8000230 <__aeabi_uldivmod>
 800272c:	0002      	movs	r2, r0
 800272e:	000b      	movs	r3, r1
 8002730:	0e11      	lsrs	r1, r2, #24
 8002732:	021d      	lsls	r5, r3, #8
 8002734:	430d      	orrs	r5, r1
 8002736:	0214      	lsls	r4, r2, #8
 8002738:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800273a:	685b      	ldr	r3, [r3, #4]
 800273c:	085b      	lsrs	r3, r3, #1
 800273e:	60bb      	str	r3, [r7, #8]
 8002740:	2300      	movs	r3, #0
 8002742:	60fb      	str	r3, [r7, #12]
 8002744:	68b8      	ldr	r0, [r7, #8]
 8002746:	68f9      	ldr	r1, [r7, #12]
 8002748:	1900      	adds	r0, r0, r4
 800274a:	4169      	adcs	r1, r5
 800274c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800274e:	685b      	ldr	r3, [r3, #4]
 8002750:	603b      	str	r3, [r7, #0]
 8002752:	2300      	movs	r3, #0
 8002754:	607b      	str	r3, [r7, #4]
 8002756:	683a      	ldr	r2, [r7, #0]
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	f7fd fd69 	bl	8000230 <__aeabi_uldivmod>
 800275e:	0002      	movs	r2, r0
 8002760:	000b      	movs	r3, r1
 8002762:	0013      	movs	r3, r2
 8002764:	633b      	str	r3, [r7, #48]	; 0x30
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8002766:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002768:	23c0      	movs	r3, #192	; 0xc0
 800276a:	009b      	lsls	r3, r3, #2
 800276c:	429a      	cmp	r2, r3
 800276e:	d309      	bcc.n	8002784 <UART_SetConfig+0x2e4>
 8002770:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002772:	2380      	movs	r3, #128	; 0x80
 8002774:	035b      	lsls	r3, r3, #13
 8002776:	429a      	cmp	r2, r3
 8002778:	d204      	bcs.n	8002784 <UART_SetConfig+0x2e4>
        {
          huart->Instance->BRR = usartdiv;
 800277a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800277c:	681b      	ldr	r3, [r3, #0]
 800277e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002780:	60da      	str	r2, [r3, #12]
 8002782:	e0e9      	b.n	8002958 <UART_SetConfig+0x4b8>
        }
        else
        {
          ret = HAL_ERROR;
 8002784:	231a      	movs	r3, #26
 8002786:	2220      	movs	r2, #32
 8002788:	189b      	adds	r3, r3, r2
 800278a:	19db      	adds	r3, r3, r7
 800278c:	2201      	movs	r2, #1
 800278e:	701a      	strb	r2, [r3, #0]
 8002790:	e0e2      	b.n	8002958 <UART_SetConfig+0x4b8>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002792:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002794:	69da      	ldr	r2, [r3, #28]
 8002796:	2380      	movs	r3, #128	; 0x80
 8002798:	021b      	lsls	r3, r3, #8
 800279a:	429a      	cmp	r2, r3
 800279c:	d000      	beq.n	80027a0 <UART_SetConfig+0x300>
 800279e:	e083      	b.n	80028a8 <UART_SetConfig+0x408>
  {
    switch (clocksource)
 80027a0:	231b      	movs	r3, #27
 80027a2:	2220      	movs	r2, #32
 80027a4:	189b      	adds	r3, r3, r2
 80027a6:	19db      	adds	r3, r3, r7
 80027a8:	781b      	ldrb	r3, [r3, #0]
 80027aa:	2b08      	cmp	r3, #8
 80027ac:	d015      	beq.n	80027da <UART_SetConfig+0x33a>
 80027ae:	dc2b      	bgt.n	8002808 <UART_SetConfig+0x368>
 80027b0:	2b04      	cmp	r3, #4
 80027b2:	d00d      	beq.n	80027d0 <UART_SetConfig+0x330>
 80027b4:	dc28      	bgt.n	8002808 <UART_SetConfig+0x368>
 80027b6:	2b00      	cmp	r3, #0
 80027b8:	d002      	beq.n	80027c0 <UART_SetConfig+0x320>
 80027ba:	2b02      	cmp	r3, #2
 80027bc:	d005      	beq.n	80027ca <UART_SetConfig+0x32a>
 80027be:	e023      	b.n	8002808 <UART_SetConfig+0x368>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80027c0:	f7ff fd5e 	bl	8002280 <HAL_RCC_GetPCLK1Freq>
 80027c4:	0003      	movs	r3, r0
 80027c6:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80027c8:	e027      	b.n	800281a <UART_SetConfig+0x37a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80027ca:	4b0d      	ldr	r3, [pc, #52]	; (8002800 <UART_SetConfig+0x360>)
 80027cc:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80027ce:	e024      	b.n	800281a <UART_SetConfig+0x37a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80027d0:	f7ff fcca 	bl	8002168 <HAL_RCC_GetSysClockFreq>
 80027d4:	0003      	movs	r3, r0
 80027d6:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80027d8:	e01f      	b.n	800281a <UART_SetConfig+0x37a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80027da:	2380      	movs	r3, #128	; 0x80
 80027dc:	021b      	lsls	r3, r3, #8
 80027de:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80027e0:	e01b      	b.n	800281a <UART_SetConfig+0x37a>
 80027e2:	46c0      	nop			; (mov r8, r8)
 80027e4:	cfff69f3 	.word	0xcfff69f3
 80027e8:	ffffcfff 	.word	0xffffcfff
 80027ec:	40008000 	.word	0x40008000
 80027f0:	11fff4ff 	.word	0x11fff4ff
 80027f4:	40013800 	.word	0x40013800
 80027f8:	40021000 	.word	0x40021000
 80027fc:	40004400 	.word	0x40004400
 8002800:	00f42400 	.word	0x00f42400
 8002804:	08003828 	.word	0x08003828
      default:
        pclk = 0U;
 8002808:	2300      	movs	r3, #0
 800280a:	637b      	str	r3, [r7, #52]	; 0x34
        ret = HAL_ERROR;
 800280c:	231a      	movs	r3, #26
 800280e:	2220      	movs	r2, #32
 8002810:	189b      	adds	r3, r3, r2
 8002812:	19db      	adds	r3, r3, r7
 8002814:	2201      	movs	r2, #1
 8002816:	701a      	strb	r2, [r3, #0]
        break;
 8002818:	46c0      	nop			; (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800281a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800281c:	2b00      	cmp	r3, #0
 800281e:	d100      	bne.n	8002822 <UART_SetConfig+0x382>
 8002820:	e09a      	b.n	8002958 <UART_SetConfig+0x4b8>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8002822:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002824:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002826:	4b58      	ldr	r3, [pc, #352]	; (8002988 <UART_SetConfig+0x4e8>)
 8002828:	0052      	lsls	r2, r2, #1
 800282a:	5ad3      	ldrh	r3, [r2, r3]
 800282c:	0019      	movs	r1, r3
 800282e:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8002830:	f7fd fc72 	bl	8000118 <__udivsi3>
 8002834:	0003      	movs	r3, r0
 8002836:	005a      	lsls	r2, r3, #1
 8002838:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800283a:	685b      	ldr	r3, [r3, #4]
 800283c:	085b      	lsrs	r3, r3, #1
 800283e:	18d2      	adds	r2, r2, r3
 8002840:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002842:	685b      	ldr	r3, [r3, #4]
 8002844:	0019      	movs	r1, r3
 8002846:	0010      	movs	r0, r2
 8002848:	f7fd fc66 	bl	8000118 <__udivsi3>
 800284c:	0003      	movs	r3, r0
 800284e:	633b      	str	r3, [r7, #48]	; 0x30
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8002850:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002852:	2b0f      	cmp	r3, #15
 8002854:	d921      	bls.n	800289a <UART_SetConfig+0x3fa>
 8002856:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002858:	2380      	movs	r3, #128	; 0x80
 800285a:	025b      	lsls	r3, r3, #9
 800285c:	429a      	cmp	r2, r3
 800285e:	d21c      	bcs.n	800289a <UART_SetConfig+0x3fa>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8002860:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002862:	b29a      	uxth	r2, r3
 8002864:	200e      	movs	r0, #14
 8002866:	2420      	movs	r4, #32
 8002868:	1903      	adds	r3, r0, r4
 800286a:	19db      	adds	r3, r3, r7
 800286c:	210f      	movs	r1, #15
 800286e:	438a      	bics	r2, r1
 8002870:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8002872:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002874:	085b      	lsrs	r3, r3, #1
 8002876:	b29b      	uxth	r3, r3
 8002878:	2207      	movs	r2, #7
 800287a:	4013      	ands	r3, r2
 800287c:	b299      	uxth	r1, r3
 800287e:	1903      	adds	r3, r0, r4
 8002880:	19db      	adds	r3, r3, r7
 8002882:	1902      	adds	r2, r0, r4
 8002884:	19d2      	adds	r2, r2, r7
 8002886:	8812      	ldrh	r2, [r2, #0]
 8002888:	430a      	orrs	r2, r1
 800288a:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 800288c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800288e:	681b      	ldr	r3, [r3, #0]
 8002890:	1902      	adds	r2, r0, r4
 8002892:	19d2      	adds	r2, r2, r7
 8002894:	8812      	ldrh	r2, [r2, #0]
 8002896:	60da      	str	r2, [r3, #12]
 8002898:	e05e      	b.n	8002958 <UART_SetConfig+0x4b8>
      }
      else
      {
        ret = HAL_ERROR;
 800289a:	231a      	movs	r3, #26
 800289c:	2220      	movs	r2, #32
 800289e:	189b      	adds	r3, r3, r2
 80028a0:	19db      	adds	r3, r3, r7
 80028a2:	2201      	movs	r2, #1
 80028a4:	701a      	strb	r2, [r3, #0]
 80028a6:	e057      	b.n	8002958 <UART_SetConfig+0x4b8>
      }
    }
  }
  else
  {
    switch (clocksource)
 80028a8:	231b      	movs	r3, #27
 80028aa:	2220      	movs	r2, #32
 80028ac:	189b      	adds	r3, r3, r2
 80028ae:	19db      	adds	r3, r3, r7
 80028b0:	781b      	ldrb	r3, [r3, #0]
 80028b2:	2b08      	cmp	r3, #8
 80028b4:	d015      	beq.n	80028e2 <UART_SetConfig+0x442>
 80028b6:	dc18      	bgt.n	80028ea <UART_SetConfig+0x44a>
 80028b8:	2b04      	cmp	r3, #4
 80028ba:	d00d      	beq.n	80028d8 <UART_SetConfig+0x438>
 80028bc:	dc15      	bgt.n	80028ea <UART_SetConfig+0x44a>
 80028be:	2b00      	cmp	r3, #0
 80028c0:	d002      	beq.n	80028c8 <UART_SetConfig+0x428>
 80028c2:	2b02      	cmp	r3, #2
 80028c4:	d005      	beq.n	80028d2 <UART_SetConfig+0x432>
 80028c6:	e010      	b.n	80028ea <UART_SetConfig+0x44a>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80028c8:	f7ff fcda 	bl	8002280 <HAL_RCC_GetPCLK1Freq>
 80028cc:	0003      	movs	r3, r0
 80028ce:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80028d0:	e014      	b.n	80028fc <UART_SetConfig+0x45c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80028d2:	4b2e      	ldr	r3, [pc, #184]	; (800298c <UART_SetConfig+0x4ec>)
 80028d4:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80028d6:	e011      	b.n	80028fc <UART_SetConfig+0x45c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80028d8:	f7ff fc46 	bl	8002168 <HAL_RCC_GetSysClockFreq>
 80028dc:	0003      	movs	r3, r0
 80028de:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80028e0:	e00c      	b.n	80028fc <UART_SetConfig+0x45c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80028e2:	2380      	movs	r3, #128	; 0x80
 80028e4:	021b      	lsls	r3, r3, #8
 80028e6:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80028e8:	e008      	b.n	80028fc <UART_SetConfig+0x45c>
      default:
        pclk = 0U;
 80028ea:	2300      	movs	r3, #0
 80028ec:	637b      	str	r3, [r7, #52]	; 0x34
        ret = HAL_ERROR;
 80028ee:	231a      	movs	r3, #26
 80028f0:	2220      	movs	r2, #32
 80028f2:	189b      	adds	r3, r3, r2
 80028f4:	19db      	adds	r3, r3, r7
 80028f6:	2201      	movs	r2, #1
 80028f8:	701a      	strb	r2, [r3, #0]
        break;
 80028fa:	46c0      	nop			; (mov r8, r8)
    }

    if (pclk != 0U)
 80028fc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80028fe:	2b00      	cmp	r3, #0
 8002900:	d02a      	beq.n	8002958 <UART_SetConfig+0x4b8>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8002902:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002904:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002906:	4b20      	ldr	r3, [pc, #128]	; (8002988 <UART_SetConfig+0x4e8>)
 8002908:	0052      	lsls	r2, r2, #1
 800290a:	5ad3      	ldrh	r3, [r2, r3]
 800290c:	0019      	movs	r1, r3
 800290e:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8002910:	f7fd fc02 	bl	8000118 <__udivsi3>
 8002914:	0003      	movs	r3, r0
 8002916:	001a      	movs	r2, r3
 8002918:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800291a:	685b      	ldr	r3, [r3, #4]
 800291c:	085b      	lsrs	r3, r3, #1
 800291e:	18d2      	adds	r2, r2, r3
 8002920:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002922:	685b      	ldr	r3, [r3, #4]
 8002924:	0019      	movs	r1, r3
 8002926:	0010      	movs	r0, r2
 8002928:	f7fd fbf6 	bl	8000118 <__udivsi3>
 800292c:	0003      	movs	r3, r0
 800292e:	633b      	str	r3, [r7, #48]	; 0x30
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8002930:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002932:	2b0f      	cmp	r3, #15
 8002934:	d90a      	bls.n	800294c <UART_SetConfig+0x4ac>
 8002936:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002938:	2380      	movs	r3, #128	; 0x80
 800293a:	025b      	lsls	r3, r3, #9
 800293c:	429a      	cmp	r2, r3
 800293e:	d205      	bcs.n	800294c <UART_SetConfig+0x4ac>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8002940:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002942:	b29a      	uxth	r2, r3
 8002944:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002946:	681b      	ldr	r3, [r3, #0]
 8002948:	60da      	str	r2, [r3, #12]
 800294a:	e005      	b.n	8002958 <UART_SetConfig+0x4b8>
      }
      else
      {
        ret = HAL_ERROR;
 800294c:	231a      	movs	r3, #26
 800294e:	2220      	movs	r2, #32
 8002950:	189b      	adds	r3, r3, r2
 8002952:	19db      	adds	r3, r3, r7
 8002954:	2201      	movs	r2, #1
 8002956:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8002958:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800295a:	226a      	movs	r2, #106	; 0x6a
 800295c:	2101      	movs	r1, #1
 800295e:	5299      	strh	r1, [r3, r2]
  huart->NbRxDataToProcess = 1;
 8002960:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002962:	2268      	movs	r2, #104	; 0x68
 8002964:	2101      	movs	r1, #1
 8002966:	5299      	strh	r1, [r3, r2]

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8002968:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800296a:	2200      	movs	r2, #0
 800296c:	675a      	str	r2, [r3, #116]	; 0x74
  huart->TxISR = NULL;
 800296e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002970:	2200      	movs	r2, #0
 8002972:	679a      	str	r2, [r3, #120]	; 0x78

  return ret;
 8002974:	231a      	movs	r3, #26
 8002976:	2220      	movs	r2, #32
 8002978:	189b      	adds	r3, r3, r2
 800297a:	19db      	adds	r3, r3, r7
 800297c:	781b      	ldrb	r3, [r3, #0]
}
 800297e:	0018      	movs	r0, r3
 8002980:	46bd      	mov	sp, r7
 8002982:	b010      	add	sp, #64	; 0x40
 8002984:	bdb0      	pop	{r4, r5, r7, pc}
 8002986:	46c0      	nop			; (mov r8, r8)
 8002988:	08003828 	.word	0x08003828
 800298c:	00f42400 	.word	0x00f42400

08002990 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8002990:	b580      	push	{r7, lr}
 8002992:	b082      	sub	sp, #8
 8002994:	af00      	add	r7, sp, #0
 8002996:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800299c:	2208      	movs	r2, #8
 800299e:	4013      	ands	r3, r2
 80029a0:	d00b      	beq.n	80029ba <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	681b      	ldr	r3, [r3, #0]
 80029a6:	685b      	ldr	r3, [r3, #4]
 80029a8:	4a4a      	ldr	r2, [pc, #296]	; (8002ad4 <UART_AdvFeatureConfig+0x144>)
 80029aa:	4013      	ands	r3, r2
 80029ac:	0019      	movs	r1, r3
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	681b      	ldr	r3, [r3, #0]
 80029b6:	430a      	orrs	r2, r1
 80029b8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80029be:	2201      	movs	r2, #1
 80029c0:	4013      	ands	r3, r2
 80029c2:	d00b      	beq.n	80029dc <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	681b      	ldr	r3, [r3, #0]
 80029c8:	685b      	ldr	r3, [r3, #4]
 80029ca:	4a43      	ldr	r2, [pc, #268]	; (8002ad8 <UART_AdvFeatureConfig+0x148>)
 80029cc:	4013      	ands	r3, r2
 80029ce:	0019      	movs	r1, r3
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	681b      	ldr	r3, [r3, #0]
 80029d8:	430a      	orrs	r2, r1
 80029da:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80029e0:	2202      	movs	r2, #2
 80029e2:	4013      	ands	r3, r2
 80029e4:	d00b      	beq.n	80029fe <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	681b      	ldr	r3, [r3, #0]
 80029ea:	685b      	ldr	r3, [r3, #4]
 80029ec:	4a3b      	ldr	r2, [pc, #236]	; (8002adc <UART_AdvFeatureConfig+0x14c>)
 80029ee:	4013      	ands	r3, r2
 80029f0:	0019      	movs	r1, r3
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	681b      	ldr	r3, [r3, #0]
 80029fa:	430a      	orrs	r2, r1
 80029fc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002a02:	2204      	movs	r2, #4
 8002a04:	4013      	ands	r3, r2
 8002a06:	d00b      	beq.n	8002a20 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	681b      	ldr	r3, [r3, #0]
 8002a0c:	685b      	ldr	r3, [r3, #4]
 8002a0e:	4a34      	ldr	r2, [pc, #208]	; (8002ae0 <UART_AdvFeatureConfig+0x150>)
 8002a10:	4013      	ands	r3, r2
 8002a12:	0019      	movs	r1, r3
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	681b      	ldr	r3, [r3, #0]
 8002a1c:	430a      	orrs	r2, r1
 8002a1e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002a24:	2210      	movs	r2, #16
 8002a26:	4013      	ands	r3, r2
 8002a28:	d00b      	beq.n	8002a42 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	681b      	ldr	r3, [r3, #0]
 8002a2e:	689b      	ldr	r3, [r3, #8]
 8002a30:	4a2c      	ldr	r2, [pc, #176]	; (8002ae4 <UART_AdvFeatureConfig+0x154>)
 8002a32:	4013      	ands	r3, r2
 8002a34:	0019      	movs	r1, r3
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	681b      	ldr	r3, [r3, #0]
 8002a3e:	430a      	orrs	r2, r1
 8002a40:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002a46:	2220      	movs	r2, #32
 8002a48:	4013      	ands	r3, r2
 8002a4a:	d00b      	beq.n	8002a64 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	681b      	ldr	r3, [r3, #0]
 8002a50:	689b      	ldr	r3, [r3, #8]
 8002a52:	4a25      	ldr	r2, [pc, #148]	; (8002ae8 <UART_AdvFeatureConfig+0x158>)
 8002a54:	4013      	ands	r3, r2
 8002a56:	0019      	movs	r1, r3
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	681b      	ldr	r3, [r3, #0]
 8002a60:	430a      	orrs	r2, r1
 8002a62:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002a68:	2240      	movs	r2, #64	; 0x40
 8002a6a:	4013      	ands	r3, r2
 8002a6c:	d01d      	beq.n	8002aaa <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	681b      	ldr	r3, [r3, #0]
 8002a72:	685b      	ldr	r3, [r3, #4]
 8002a74:	4a1d      	ldr	r2, [pc, #116]	; (8002aec <UART_AdvFeatureConfig+0x15c>)
 8002a76:	4013      	ands	r3, r2
 8002a78:	0019      	movs	r1, r3
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	681b      	ldr	r3, [r3, #0]
 8002a82:	430a      	orrs	r2, r1
 8002a84:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002a8a:	2380      	movs	r3, #128	; 0x80
 8002a8c:	035b      	lsls	r3, r3, #13
 8002a8e:	429a      	cmp	r2, r3
 8002a90:	d10b      	bne.n	8002aaa <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8002a92:	687b      	ldr	r3, [r7, #4]
 8002a94:	681b      	ldr	r3, [r3, #0]
 8002a96:	685b      	ldr	r3, [r3, #4]
 8002a98:	4a15      	ldr	r2, [pc, #84]	; (8002af0 <UART_AdvFeatureConfig+0x160>)
 8002a9a:	4013      	ands	r3, r2
 8002a9c:	0019      	movs	r1, r3
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	681b      	ldr	r3, [r3, #0]
 8002aa6:	430a      	orrs	r2, r1
 8002aa8:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002aae:	2280      	movs	r2, #128	; 0x80
 8002ab0:	4013      	ands	r3, r2
 8002ab2:	d00b      	beq.n	8002acc <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	681b      	ldr	r3, [r3, #0]
 8002ab8:	685b      	ldr	r3, [r3, #4]
 8002aba:	4a0e      	ldr	r2, [pc, #56]	; (8002af4 <UART_AdvFeatureConfig+0x164>)
 8002abc:	4013      	ands	r3, r2
 8002abe:	0019      	movs	r1, r3
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	681b      	ldr	r3, [r3, #0]
 8002ac8:	430a      	orrs	r2, r1
 8002aca:	605a      	str	r2, [r3, #4]
  }
}
 8002acc:	46c0      	nop			; (mov r8, r8)
 8002ace:	46bd      	mov	sp, r7
 8002ad0:	b002      	add	sp, #8
 8002ad2:	bd80      	pop	{r7, pc}
 8002ad4:	ffff7fff 	.word	0xffff7fff
 8002ad8:	fffdffff 	.word	0xfffdffff
 8002adc:	fffeffff 	.word	0xfffeffff
 8002ae0:	fffbffff 	.word	0xfffbffff
 8002ae4:	ffffefff 	.word	0xffffefff
 8002ae8:	ffffdfff 	.word	0xffffdfff
 8002aec:	ffefffff 	.word	0xffefffff
 8002af0:	ff9fffff 	.word	0xff9fffff
 8002af4:	fff7ffff 	.word	0xfff7ffff

08002af8 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8002af8:	b580      	push	{r7, lr}
 8002afa:	b092      	sub	sp, #72	; 0x48
 8002afc:	af02      	add	r7, sp, #8
 8002afe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	2290      	movs	r2, #144	; 0x90
 8002b04:	2100      	movs	r1, #0
 8002b06:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8002b08:	f7fe f870 	bl	8000bec <HAL_GetTick>
 8002b0c:	0003      	movs	r3, r0
 8002b0e:	63fb      	str	r3, [r7, #60]	; 0x3c

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	681b      	ldr	r3, [r3, #0]
 8002b14:	681b      	ldr	r3, [r3, #0]
 8002b16:	2208      	movs	r2, #8
 8002b18:	4013      	ands	r3, r2
 8002b1a:	2b08      	cmp	r3, #8
 8002b1c:	d12d      	bne.n	8002b7a <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8002b1e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002b20:	2280      	movs	r2, #128	; 0x80
 8002b22:	0391      	lsls	r1, r2, #14
 8002b24:	6878      	ldr	r0, [r7, #4]
 8002b26:	4a47      	ldr	r2, [pc, #284]	; (8002c44 <UART_CheckIdleState+0x14c>)
 8002b28:	9200      	str	r2, [sp, #0]
 8002b2a:	2200      	movs	r2, #0
 8002b2c:	f000 f88e 	bl	8002c4c <UART_WaitOnFlagUntilTimeout>
 8002b30:	1e03      	subs	r3, r0, #0
 8002b32:	d022      	beq.n	8002b7a <UART_CheckIdleState+0x82>
	__ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002b34:	f3ef 8310 	mrs	r3, PRIMASK
 8002b38:	627b      	str	r3, [r7, #36]	; 0x24
	return (result);
 8002b3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 8002b3c:	63bb      	str	r3, [r7, #56]	; 0x38
 8002b3e:	2301      	movs	r3, #1
 8002b40:	62bb      	str	r3, [r7, #40]	; 0x28
	__ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002b42:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002b44:	f383 8810 	msr	PRIMASK, r3
}
 8002b48:	46c0      	nop			; (mov r8, r8)
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	681b      	ldr	r3, [r3, #0]
 8002b4e:	681a      	ldr	r2, [r3, #0]
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	681b      	ldr	r3, [r3, #0]
 8002b54:	2180      	movs	r1, #128	; 0x80
 8002b56:	438a      	bics	r2, r1
 8002b58:	601a      	str	r2, [r3, #0]
 8002b5a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002b5c:	62fb      	str	r3, [r7, #44]	; 0x2c
	__ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002b5e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002b60:	f383 8810 	msr	PRIMASK, r3
}
 8002b64:	46c0      	nop			; (mov r8, r8)

      huart->gState = HAL_UART_STATE_READY;
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	2288      	movs	r2, #136	; 0x88
 8002b6a:	2120      	movs	r1, #32
 8002b6c:	5099      	str	r1, [r3, r2]

      __HAL_UNLOCK(huart);
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	2284      	movs	r2, #132	; 0x84
 8002b72:	2100      	movs	r1, #0
 8002b74:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8002b76:	2303      	movs	r3, #3
 8002b78:	e060      	b.n	8002c3c <UART_CheckIdleState+0x144>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	681b      	ldr	r3, [r3, #0]
 8002b7e:	681b      	ldr	r3, [r3, #0]
 8002b80:	2204      	movs	r2, #4
 8002b82:	4013      	ands	r3, r2
 8002b84:	2b04      	cmp	r3, #4
 8002b86:	d146      	bne.n	8002c16 <UART_CheckIdleState+0x11e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8002b88:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002b8a:	2280      	movs	r2, #128	; 0x80
 8002b8c:	03d1      	lsls	r1, r2, #15
 8002b8e:	6878      	ldr	r0, [r7, #4]
 8002b90:	4a2c      	ldr	r2, [pc, #176]	; (8002c44 <UART_CheckIdleState+0x14c>)
 8002b92:	9200      	str	r2, [sp, #0]
 8002b94:	2200      	movs	r2, #0
 8002b96:	f000 f859 	bl	8002c4c <UART_WaitOnFlagUntilTimeout>
 8002b9a:	1e03      	subs	r3, r0, #0
 8002b9c:	d03b      	beq.n	8002c16 <UART_CheckIdleState+0x11e>
	__ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002b9e:	f3ef 8310 	mrs	r3, PRIMASK
 8002ba2:	60fb      	str	r3, [r7, #12]
	return (result);
 8002ba4:	68fb      	ldr	r3, [r7, #12]
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8002ba6:	637b      	str	r3, [r7, #52]	; 0x34
 8002ba8:	2301      	movs	r3, #1
 8002baa:	613b      	str	r3, [r7, #16]
	__ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002bac:	693b      	ldr	r3, [r7, #16]
 8002bae:	f383 8810 	msr	PRIMASK, r3
}
 8002bb2:	46c0      	nop			; (mov r8, r8)
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	681b      	ldr	r3, [r3, #0]
 8002bb8:	681a      	ldr	r2, [r3, #0]
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	681b      	ldr	r3, [r3, #0]
 8002bbe:	4922      	ldr	r1, [pc, #136]	; (8002c48 <UART_CheckIdleState+0x150>)
 8002bc0:	400a      	ands	r2, r1
 8002bc2:	601a      	str	r2, [r3, #0]
 8002bc4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002bc6:	617b      	str	r3, [r7, #20]
	__ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002bc8:	697b      	ldr	r3, [r7, #20]
 8002bca:	f383 8810 	msr	PRIMASK, r3
}
 8002bce:	46c0      	nop			; (mov r8, r8)
	__ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002bd0:	f3ef 8310 	mrs	r3, PRIMASK
 8002bd4:	61bb      	str	r3, [r7, #24]
	return (result);
 8002bd6:	69bb      	ldr	r3, [r7, #24]
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002bd8:	633b      	str	r3, [r7, #48]	; 0x30
 8002bda:	2301      	movs	r3, #1
 8002bdc:	61fb      	str	r3, [r7, #28]
	__ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002bde:	69fb      	ldr	r3, [r7, #28]
 8002be0:	f383 8810 	msr	PRIMASK, r3
}
 8002be4:	46c0      	nop			; (mov r8, r8)
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	681b      	ldr	r3, [r3, #0]
 8002bea:	689a      	ldr	r2, [r3, #8]
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	681b      	ldr	r3, [r3, #0]
 8002bf0:	2101      	movs	r1, #1
 8002bf2:	438a      	bics	r2, r1
 8002bf4:	609a      	str	r2, [r3, #8]
 8002bf6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002bf8:	623b      	str	r3, [r7, #32]
	__ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002bfa:	6a3b      	ldr	r3, [r7, #32]
 8002bfc:	f383 8810 	msr	PRIMASK, r3
}
 8002c00:	46c0      	nop			; (mov r8, r8)

      huart->RxState = HAL_UART_STATE_READY;
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	228c      	movs	r2, #140	; 0x8c
 8002c06:	2120      	movs	r1, #32
 8002c08:	5099      	str	r1, [r3, r2]

      __HAL_UNLOCK(huart);
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	2284      	movs	r2, #132	; 0x84
 8002c0e:	2100      	movs	r1, #0
 8002c10:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8002c12:	2303      	movs	r3, #3
 8002c14:	e012      	b.n	8002c3c <UART_CheckIdleState+0x144>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	2288      	movs	r2, #136	; 0x88
 8002c1a:	2120      	movs	r1, #32
 8002c1c:	5099      	str	r1, [r3, r2]
  huart->RxState = HAL_UART_STATE_READY;
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	228c      	movs	r2, #140	; 0x8c
 8002c22:	2120      	movs	r1, #32
 8002c24:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	2200      	movs	r2, #0
 8002c2a:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	2200      	movs	r2, #0
 8002c30:	671a      	str	r2, [r3, #112]	; 0x70

  __HAL_UNLOCK(huart);
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	2284      	movs	r2, #132	; 0x84
 8002c36:	2100      	movs	r1, #0
 8002c38:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8002c3a:	2300      	movs	r3, #0
}
 8002c3c:	0018      	movs	r0, r3
 8002c3e:	46bd      	mov	sp, r7
 8002c40:	b010      	add	sp, #64	; 0x40
 8002c42:	bd80      	pop	{r7, pc}
 8002c44:	01ffffff 	.word	0x01ffffff
 8002c48:	fffffedf 	.word	0xfffffedf

08002c4c <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8002c4c:	b580      	push	{r7, lr}
 8002c4e:	b084      	sub	sp, #16
 8002c50:	af00      	add	r7, sp, #0
 8002c52:	60f8      	str	r0, [r7, #12]
 8002c54:	60b9      	str	r1, [r7, #8]
 8002c56:	603b      	str	r3, [r7, #0]
 8002c58:	1dfb      	adds	r3, r7, #7
 8002c5a:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002c5c:	e051      	b.n	8002d02 <UART_WaitOnFlagUntilTimeout+0xb6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002c5e:	69bb      	ldr	r3, [r7, #24]
 8002c60:	3301      	adds	r3, #1
 8002c62:	d04e      	beq.n	8002d02 <UART_WaitOnFlagUntilTimeout+0xb6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002c64:	f7fd ffc2 	bl	8000bec <HAL_GetTick>
 8002c68:	0002      	movs	r2, r0
 8002c6a:	683b      	ldr	r3, [r7, #0]
 8002c6c:	1ad3      	subs	r3, r2, r3
 8002c6e:	69ba      	ldr	r2, [r7, #24]
 8002c70:	429a      	cmp	r2, r3
 8002c72:	d302      	bcc.n	8002c7a <UART_WaitOnFlagUntilTimeout+0x2e>
 8002c74:	69bb      	ldr	r3, [r7, #24]
 8002c76:	2b00      	cmp	r3, #0
 8002c78:	d101      	bne.n	8002c7e <UART_WaitOnFlagUntilTimeout+0x32>
      {

        return HAL_TIMEOUT;
 8002c7a:	2303      	movs	r3, #3
 8002c7c:	e051      	b.n	8002d22 <UART_WaitOnFlagUntilTimeout+0xd6>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8002c7e:	68fb      	ldr	r3, [r7, #12]
 8002c80:	681b      	ldr	r3, [r3, #0]
 8002c82:	681b      	ldr	r3, [r3, #0]
 8002c84:	2204      	movs	r2, #4
 8002c86:	4013      	ands	r3, r2
 8002c88:	d03b      	beq.n	8002d02 <UART_WaitOnFlagUntilTimeout+0xb6>
 8002c8a:	68bb      	ldr	r3, [r7, #8]
 8002c8c:	2b80      	cmp	r3, #128	; 0x80
 8002c8e:	d038      	beq.n	8002d02 <UART_WaitOnFlagUntilTimeout+0xb6>
 8002c90:	68bb      	ldr	r3, [r7, #8]
 8002c92:	2b40      	cmp	r3, #64	; 0x40
 8002c94:	d035      	beq.n	8002d02 <UART_WaitOnFlagUntilTimeout+0xb6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8002c96:	68fb      	ldr	r3, [r7, #12]
 8002c98:	681b      	ldr	r3, [r3, #0]
 8002c9a:	69db      	ldr	r3, [r3, #28]
 8002c9c:	2208      	movs	r2, #8
 8002c9e:	4013      	ands	r3, r2
 8002ca0:	2b08      	cmp	r3, #8
 8002ca2:	d111      	bne.n	8002cc8 <UART_WaitOnFlagUntilTimeout+0x7c>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8002ca4:	68fb      	ldr	r3, [r7, #12]
 8002ca6:	681b      	ldr	r3, [r3, #0]
 8002ca8:	2208      	movs	r2, #8
 8002caa:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8002cac:	68fb      	ldr	r3, [r7, #12]
 8002cae:	0018      	movs	r0, r3
 8002cb0:	f000 f83c 	bl	8002d2c <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8002cb4:	68fb      	ldr	r3, [r7, #12]
 8002cb6:	2290      	movs	r2, #144	; 0x90
 8002cb8:	2108      	movs	r1, #8
 8002cba:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8002cbc:	68fb      	ldr	r3, [r7, #12]
 8002cbe:	2284      	movs	r2, #132	; 0x84
 8002cc0:	2100      	movs	r1, #0
 8002cc2:	5499      	strb	r1, [r3, r2]

          return HAL_ERROR;
 8002cc4:	2301      	movs	r3, #1
 8002cc6:	e02c      	b.n	8002d22 <UART_WaitOnFlagUntilTimeout+0xd6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8002cc8:	68fb      	ldr	r3, [r7, #12]
 8002cca:	681b      	ldr	r3, [r3, #0]
 8002ccc:	69da      	ldr	r2, [r3, #28]
 8002cce:	2380      	movs	r3, #128	; 0x80
 8002cd0:	011b      	lsls	r3, r3, #4
 8002cd2:	401a      	ands	r2, r3
 8002cd4:	2380      	movs	r3, #128	; 0x80
 8002cd6:	011b      	lsls	r3, r3, #4
 8002cd8:	429a      	cmp	r2, r3
 8002cda:	d112      	bne.n	8002d02 <UART_WaitOnFlagUntilTimeout+0xb6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8002cdc:	68fb      	ldr	r3, [r7, #12]
 8002cde:	681b      	ldr	r3, [r3, #0]
 8002ce0:	2280      	movs	r2, #128	; 0x80
 8002ce2:	0112      	lsls	r2, r2, #4
 8002ce4:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8002ce6:	68fb      	ldr	r3, [r7, #12]
 8002ce8:	0018      	movs	r0, r3
 8002cea:	f000 f81f 	bl	8002d2c <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8002cee:	68fb      	ldr	r3, [r7, #12]
 8002cf0:	2290      	movs	r2, #144	; 0x90
 8002cf2:	2120      	movs	r1, #32
 8002cf4:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8002cf6:	68fb      	ldr	r3, [r7, #12]
 8002cf8:	2284      	movs	r2, #132	; 0x84
 8002cfa:	2100      	movs	r1, #0
 8002cfc:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 8002cfe:	2303      	movs	r3, #3
 8002d00:	e00f      	b.n	8002d22 <UART_WaitOnFlagUntilTimeout+0xd6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002d02:	68fb      	ldr	r3, [r7, #12]
 8002d04:	681b      	ldr	r3, [r3, #0]
 8002d06:	69db      	ldr	r3, [r3, #28]
 8002d08:	68ba      	ldr	r2, [r7, #8]
 8002d0a:	4013      	ands	r3, r2
 8002d0c:	68ba      	ldr	r2, [r7, #8]
 8002d0e:	1ad3      	subs	r3, r2, r3
 8002d10:	425a      	negs	r2, r3
 8002d12:	4153      	adcs	r3, r2
 8002d14:	b2db      	uxtb	r3, r3
 8002d16:	001a      	movs	r2, r3
 8002d18:	1dfb      	adds	r3, r7, #7
 8002d1a:	781b      	ldrb	r3, [r3, #0]
 8002d1c:	429a      	cmp	r2, r3
 8002d1e:	d09e      	beq.n	8002c5e <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8002d20:	2300      	movs	r3, #0
}
 8002d22:	0018      	movs	r0, r3
 8002d24:	46bd      	mov	sp, r7
 8002d26:	b004      	add	sp, #16
 8002d28:	bd80      	pop	{r7, pc}
	...

08002d2c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8002d2c:	b580      	push	{r7, lr}
 8002d2e:	b08e      	sub	sp, #56	; 0x38
 8002d30:	af00      	add	r7, sp, #0
 8002d32:	6078      	str	r0, [r7, #4]
	__ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002d34:	f3ef 8310 	mrs	r3, PRIMASK
 8002d38:	617b      	str	r3, [r7, #20]
	return (result);
 8002d3a:	697b      	ldr	r3, [r7, #20]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8002d3c:	637b      	str	r3, [r7, #52]	; 0x34
 8002d3e:	2301      	movs	r3, #1
 8002d40:	61bb      	str	r3, [r7, #24]
	__ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002d42:	69bb      	ldr	r3, [r7, #24]
 8002d44:	f383 8810 	msr	PRIMASK, r3
}
 8002d48:	46c0      	nop			; (mov r8, r8)
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	681b      	ldr	r3, [r3, #0]
 8002d4e:	681a      	ldr	r2, [r3, #0]
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	681b      	ldr	r3, [r3, #0]
 8002d54:	4926      	ldr	r1, [pc, #152]	; (8002df0 <UART_EndRxTransfer+0xc4>)
 8002d56:	400a      	ands	r2, r1
 8002d58:	601a      	str	r2, [r3, #0]
 8002d5a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002d5c:	61fb      	str	r3, [r7, #28]
	__ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002d5e:	69fb      	ldr	r3, [r7, #28]
 8002d60:	f383 8810 	msr	PRIMASK, r3
}
 8002d64:	46c0      	nop			; (mov r8, r8)
	__ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002d66:	f3ef 8310 	mrs	r3, PRIMASK
 8002d6a:	623b      	str	r3, [r7, #32]
	return (result);
 8002d6c:	6a3b      	ldr	r3, [r7, #32]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8002d6e:	633b      	str	r3, [r7, #48]	; 0x30
 8002d70:	2301      	movs	r3, #1
 8002d72:	627b      	str	r3, [r7, #36]	; 0x24
	__ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002d74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d76:	f383 8810 	msr	PRIMASK, r3
}
 8002d7a:	46c0      	nop			; (mov r8, r8)
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	681b      	ldr	r3, [r3, #0]
 8002d80:	689a      	ldr	r2, [r3, #8]
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	681b      	ldr	r3, [r3, #0]
 8002d86:	491b      	ldr	r1, [pc, #108]	; (8002df4 <UART_EndRxTransfer+0xc8>)
 8002d88:	400a      	ands	r2, r1
 8002d8a:	609a      	str	r2, [r3, #8]
 8002d8c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002d8e:	62bb      	str	r3, [r7, #40]	; 0x28
	__ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002d90:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002d92:	f383 8810 	msr	PRIMASK, r3
}
 8002d96:	46c0      	nop			; (mov r8, r8)

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002d9c:	2b01      	cmp	r3, #1
 8002d9e:	d118      	bne.n	8002dd2 <UART_EndRxTransfer+0xa6>
	__ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002da0:	f3ef 8310 	mrs	r3, PRIMASK
 8002da4:	60bb      	str	r3, [r7, #8]
	return (result);
 8002da6:	68bb      	ldr	r3, [r7, #8]
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002da8:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002daa:	2301      	movs	r3, #1
 8002dac:	60fb      	str	r3, [r7, #12]
	__ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002dae:	68fb      	ldr	r3, [r7, #12]
 8002db0:	f383 8810 	msr	PRIMASK, r3
}
 8002db4:	46c0      	nop			; (mov r8, r8)
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	681b      	ldr	r3, [r3, #0]
 8002dba:	681a      	ldr	r2, [r3, #0]
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	681b      	ldr	r3, [r3, #0]
 8002dc0:	2110      	movs	r1, #16
 8002dc2:	438a      	bics	r2, r1
 8002dc4:	601a      	str	r2, [r3, #0]
 8002dc6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002dc8:	613b      	str	r3, [r7, #16]
	__ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002dca:	693b      	ldr	r3, [r7, #16]
 8002dcc:	f383 8810 	msr	PRIMASK, r3
}
 8002dd0:	46c0      	nop			; (mov r8, r8)
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	228c      	movs	r2, #140	; 0x8c
 8002dd6:	2120      	movs	r1, #32
 8002dd8:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	2200      	movs	r2, #0
 8002dde:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	2200      	movs	r2, #0
 8002de4:	675a      	str	r2, [r3, #116]	; 0x74
}
 8002de6:	46c0      	nop			; (mov r8, r8)
 8002de8:	46bd      	mov	sp, r7
 8002dea:	b00e      	add	sp, #56	; 0x38
 8002dec:	bd80      	pop	{r7, pc}
 8002dee:	46c0      	nop			; (mov r8, r8)
 8002df0:	fffffedf 	.word	0xfffffedf
 8002df4:	effffffe 	.word	0xeffffffe

08002df8 <_vsniprintf_r>:
 8002df8:	b530      	push	{r4, r5, lr}
 8002dfa:	0014      	movs	r4, r2
 8002dfc:	0005      	movs	r5, r0
 8002dfe:	001a      	movs	r2, r3
 8002e00:	b09b      	sub	sp, #108	; 0x6c
 8002e02:	2c00      	cmp	r4, #0
 8002e04:	da05      	bge.n	8002e12 <_vsniprintf_r+0x1a>
 8002e06:	238b      	movs	r3, #139	; 0x8b
 8002e08:	6003      	str	r3, [r0, #0]
 8002e0a:	2001      	movs	r0, #1
 8002e0c:	4240      	negs	r0, r0
 8002e0e:	b01b      	add	sp, #108	; 0x6c
 8002e10:	bd30      	pop	{r4, r5, pc}
 8002e12:	2382      	movs	r3, #130	; 0x82
 8002e14:	4668      	mov	r0, sp
 8002e16:	009b      	lsls	r3, r3, #2
 8002e18:	8183      	strh	r3, [r0, #12]
 8002e1a:	2300      	movs	r3, #0
 8002e1c:	9100      	str	r1, [sp, #0]
 8002e1e:	9104      	str	r1, [sp, #16]
 8002e20:	429c      	cmp	r4, r3
 8002e22:	d000      	beq.n	8002e26 <_vsniprintf_r+0x2e>
 8002e24:	1e63      	subs	r3, r4, #1
 8002e26:	9302      	str	r3, [sp, #8]
 8002e28:	9305      	str	r3, [sp, #20]
 8002e2a:	2301      	movs	r3, #1
 8002e2c:	4669      	mov	r1, sp
 8002e2e:	425b      	negs	r3, r3
 8002e30:	81cb      	strh	r3, [r1, #14]
 8002e32:	0028      	movs	r0, r5
 8002e34:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8002e36:	f000 f9ab 	bl	8003190 <_svfiprintf_r>
 8002e3a:	1c43      	adds	r3, r0, #1
 8002e3c:	da01      	bge.n	8002e42 <_vsniprintf_r+0x4a>
 8002e3e:	238b      	movs	r3, #139	; 0x8b
 8002e40:	602b      	str	r3, [r5, #0]
 8002e42:	2c00      	cmp	r4, #0
 8002e44:	d0e3      	beq.n	8002e0e <_vsniprintf_r+0x16>
 8002e46:	2200      	movs	r2, #0
 8002e48:	9b00      	ldr	r3, [sp, #0]
 8002e4a:	701a      	strb	r2, [r3, #0]
 8002e4c:	e7df      	b.n	8002e0e <_vsniprintf_r+0x16>
	...

08002e50 <vsniprintf>:
 8002e50:	b513      	push	{r0, r1, r4, lr}
 8002e52:	4c04      	ldr	r4, [pc, #16]	; (8002e64 <vsniprintf+0x14>)
 8002e54:	9300      	str	r3, [sp, #0]
 8002e56:	0013      	movs	r3, r2
 8002e58:	000a      	movs	r2, r1
 8002e5a:	0001      	movs	r1, r0
 8002e5c:	6820      	ldr	r0, [r4, #0]
 8002e5e:	f7ff ffcb 	bl	8002df8 <_vsniprintf_r>
 8002e62:	bd16      	pop	{r1, r2, r4, pc}
 8002e64:	20000058 	.word	0x20000058

08002e68 <memset>:
 8002e68:	0003      	movs	r3, r0
 8002e6a:	1882      	adds	r2, r0, r2
 8002e6c:	4293      	cmp	r3, r2
 8002e6e:	d100      	bne.n	8002e72 <memset+0xa>
 8002e70:	4770      	bx	lr
 8002e72:	7019      	strb	r1, [r3, #0]
 8002e74:	3301      	adds	r3, #1
 8002e76:	e7f9      	b.n	8002e6c <memset+0x4>

08002e78 <__errno>:
 8002e78:	4b01      	ldr	r3, [pc, #4]	; (8002e80 <__errno+0x8>)
 8002e7a:	6818      	ldr	r0, [r3, #0]
 8002e7c:	4770      	bx	lr
 8002e7e:	46c0      	nop			; (mov r8, r8)
 8002e80:	20000058 	.word	0x20000058

08002e84 <__libc_init_array>:
 8002e84:	b570      	push	{r4, r5, r6, lr}
 8002e86:	2600      	movs	r6, #0
 8002e88:	4c0c      	ldr	r4, [pc, #48]	; (8002ebc <__libc_init_array+0x38>)
 8002e8a:	4d0d      	ldr	r5, [pc, #52]	; (8002ec0 <__libc_init_array+0x3c>)
 8002e8c:	1b64      	subs	r4, r4, r5
 8002e8e:	10a4      	asrs	r4, r4, #2
 8002e90:	42a6      	cmp	r6, r4
 8002e92:	d109      	bne.n	8002ea8 <__libc_init_array+0x24>
 8002e94:	2600      	movs	r6, #0
 8002e96:	f000 fc6d 	bl	8003774 <_init>
 8002e9a:	4c0a      	ldr	r4, [pc, #40]	; (8002ec4 <__libc_init_array+0x40>)
 8002e9c:	4d0a      	ldr	r5, [pc, #40]	; (8002ec8 <__libc_init_array+0x44>)
 8002e9e:	1b64      	subs	r4, r4, r5
 8002ea0:	10a4      	asrs	r4, r4, #2
 8002ea2:	42a6      	cmp	r6, r4
 8002ea4:	d105      	bne.n	8002eb2 <__libc_init_array+0x2e>
 8002ea6:	bd70      	pop	{r4, r5, r6, pc}
 8002ea8:	00b3      	lsls	r3, r6, #2
 8002eaa:	58eb      	ldr	r3, [r5, r3]
 8002eac:	4798      	blx	r3
 8002eae:	3601      	adds	r6, #1
 8002eb0:	e7ee      	b.n	8002e90 <__libc_init_array+0xc>
 8002eb2:	00b3      	lsls	r3, r6, #2
 8002eb4:	58eb      	ldr	r3, [r5, r3]
 8002eb6:	4798      	blx	r3
 8002eb8:	3601      	adds	r6, #1
 8002eba:	e7f2      	b.n	8002ea2 <__libc_init_array+0x1e>
 8002ebc:	0800387c 	.word	0x0800387c
 8002ec0:	0800387c 	.word	0x0800387c
 8002ec4:	08003880 	.word	0x08003880
 8002ec8:	0800387c 	.word	0x0800387c

08002ecc <__retarget_lock_acquire_recursive>:
 8002ecc:	4770      	bx	lr

08002ece <__retarget_lock_release_recursive>:
 8002ece:	4770      	bx	lr

08002ed0 <_free_r>:
 8002ed0:	b570      	push	{r4, r5, r6, lr}
 8002ed2:	0005      	movs	r5, r0
 8002ed4:	2900      	cmp	r1, #0
 8002ed6:	d010      	beq.n	8002efa <_free_r+0x2a>
 8002ed8:	1f0c      	subs	r4, r1, #4
 8002eda:	6823      	ldr	r3, [r4, #0]
 8002edc:	2b00      	cmp	r3, #0
 8002ede:	da00      	bge.n	8002ee2 <_free_r+0x12>
 8002ee0:	18e4      	adds	r4, r4, r3
 8002ee2:	0028      	movs	r0, r5
 8002ee4:	f000 f8e2 	bl	80030ac <__malloc_lock>
 8002ee8:	4a1d      	ldr	r2, [pc, #116]	; (8002f60 <_free_r+0x90>)
 8002eea:	6813      	ldr	r3, [r2, #0]
 8002eec:	2b00      	cmp	r3, #0
 8002eee:	d105      	bne.n	8002efc <_free_r+0x2c>
 8002ef0:	6063      	str	r3, [r4, #4]
 8002ef2:	6014      	str	r4, [r2, #0]
 8002ef4:	0028      	movs	r0, r5
 8002ef6:	f000 f8e1 	bl	80030bc <__malloc_unlock>
 8002efa:	bd70      	pop	{r4, r5, r6, pc}
 8002efc:	42a3      	cmp	r3, r4
 8002efe:	d908      	bls.n	8002f12 <_free_r+0x42>
 8002f00:	6820      	ldr	r0, [r4, #0]
 8002f02:	1821      	adds	r1, r4, r0
 8002f04:	428b      	cmp	r3, r1
 8002f06:	d1f3      	bne.n	8002ef0 <_free_r+0x20>
 8002f08:	6819      	ldr	r1, [r3, #0]
 8002f0a:	685b      	ldr	r3, [r3, #4]
 8002f0c:	1809      	adds	r1, r1, r0
 8002f0e:	6021      	str	r1, [r4, #0]
 8002f10:	e7ee      	b.n	8002ef0 <_free_r+0x20>
 8002f12:	001a      	movs	r2, r3
 8002f14:	685b      	ldr	r3, [r3, #4]
 8002f16:	2b00      	cmp	r3, #0
 8002f18:	d001      	beq.n	8002f1e <_free_r+0x4e>
 8002f1a:	42a3      	cmp	r3, r4
 8002f1c:	d9f9      	bls.n	8002f12 <_free_r+0x42>
 8002f1e:	6811      	ldr	r1, [r2, #0]
 8002f20:	1850      	adds	r0, r2, r1
 8002f22:	42a0      	cmp	r0, r4
 8002f24:	d10b      	bne.n	8002f3e <_free_r+0x6e>
 8002f26:	6820      	ldr	r0, [r4, #0]
 8002f28:	1809      	adds	r1, r1, r0
 8002f2a:	1850      	adds	r0, r2, r1
 8002f2c:	6011      	str	r1, [r2, #0]
 8002f2e:	4283      	cmp	r3, r0
 8002f30:	d1e0      	bne.n	8002ef4 <_free_r+0x24>
 8002f32:	6818      	ldr	r0, [r3, #0]
 8002f34:	685b      	ldr	r3, [r3, #4]
 8002f36:	1841      	adds	r1, r0, r1
 8002f38:	6011      	str	r1, [r2, #0]
 8002f3a:	6053      	str	r3, [r2, #4]
 8002f3c:	e7da      	b.n	8002ef4 <_free_r+0x24>
 8002f3e:	42a0      	cmp	r0, r4
 8002f40:	d902      	bls.n	8002f48 <_free_r+0x78>
 8002f42:	230c      	movs	r3, #12
 8002f44:	602b      	str	r3, [r5, #0]
 8002f46:	e7d5      	b.n	8002ef4 <_free_r+0x24>
 8002f48:	6820      	ldr	r0, [r4, #0]
 8002f4a:	1821      	adds	r1, r4, r0
 8002f4c:	428b      	cmp	r3, r1
 8002f4e:	d103      	bne.n	8002f58 <_free_r+0x88>
 8002f50:	6819      	ldr	r1, [r3, #0]
 8002f52:	685b      	ldr	r3, [r3, #4]
 8002f54:	1809      	adds	r1, r1, r0
 8002f56:	6021      	str	r1, [r4, #0]
 8002f58:	6063      	str	r3, [r4, #4]
 8002f5a:	6054      	str	r4, [r2, #4]
 8002f5c:	e7ca      	b.n	8002ef4 <_free_r+0x24>
 8002f5e:	46c0      	nop			; (mov r8, r8)
 8002f60:	2000030c 	.word	0x2000030c

08002f64 <sbrk_aligned>:
 8002f64:	b570      	push	{r4, r5, r6, lr}
 8002f66:	4e0f      	ldr	r6, [pc, #60]	; (8002fa4 <sbrk_aligned+0x40>)
 8002f68:	000d      	movs	r5, r1
 8002f6a:	6831      	ldr	r1, [r6, #0]
 8002f6c:	0004      	movs	r4, r0
 8002f6e:	2900      	cmp	r1, #0
 8002f70:	d102      	bne.n	8002f78 <sbrk_aligned+0x14>
 8002f72:	f000 fba1 	bl	80036b8 <_sbrk_r>
 8002f76:	6030      	str	r0, [r6, #0]
 8002f78:	0029      	movs	r1, r5
 8002f7a:	0020      	movs	r0, r4
 8002f7c:	f000 fb9c 	bl	80036b8 <_sbrk_r>
 8002f80:	1c43      	adds	r3, r0, #1
 8002f82:	d00a      	beq.n	8002f9a <sbrk_aligned+0x36>
 8002f84:	2303      	movs	r3, #3
 8002f86:	1cc5      	adds	r5, r0, #3
 8002f88:	439d      	bics	r5, r3
 8002f8a:	42a8      	cmp	r0, r5
 8002f8c:	d007      	beq.n	8002f9e <sbrk_aligned+0x3a>
 8002f8e:	1a29      	subs	r1, r5, r0
 8002f90:	0020      	movs	r0, r4
 8002f92:	f000 fb91 	bl	80036b8 <_sbrk_r>
 8002f96:	3001      	adds	r0, #1
 8002f98:	d101      	bne.n	8002f9e <sbrk_aligned+0x3a>
 8002f9a:	2501      	movs	r5, #1
 8002f9c:	426d      	negs	r5, r5
 8002f9e:	0028      	movs	r0, r5
 8002fa0:	bd70      	pop	{r4, r5, r6, pc}
 8002fa2:	46c0      	nop			; (mov r8, r8)
 8002fa4:	20000310 	.word	0x20000310

08002fa8 <_malloc_r>:
 8002fa8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8002faa:	2203      	movs	r2, #3
 8002fac:	1ccb      	adds	r3, r1, #3
 8002fae:	4393      	bics	r3, r2
 8002fb0:	3308      	adds	r3, #8
 8002fb2:	0006      	movs	r6, r0
 8002fb4:	001f      	movs	r7, r3
 8002fb6:	2b0c      	cmp	r3, #12
 8002fb8:	d238      	bcs.n	800302c <_malloc_r+0x84>
 8002fba:	270c      	movs	r7, #12
 8002fbc:	42b9      	cmp	r1, r7
 8002fbe:	d837      	bhi.n	8003030 <_malloc_r+0x88>
 8002fc0:	0030      	movs	r0, r6
 8002fc2:	f000 f873 	bl	80030ac <__malloc_lock>
 8002fc6:	4b38      	ldr	r3, [pc, #224]	; (80030a8 <_malloc_r+0x100>)
 8002fc8:	9300      	str	r3, [sp, #0]
 8002fca:	681b      	ldr	r3, [r3, #0]
 8002fcc:	001c      	movs	r4, r3
 8002fce:	2c00      	cmp	r4, #0
 8002fd0:	d133      	bne.n	800303a <_malloc_r+0x92>
 8002fd2:	0039      	movs	r1, r7
 8002fd4:	0030      	movs	r0, r6
 8002fd6:	f7ff ffc5 	bl	8002f64 <sbrk_aligned>
 8002fda:	0004      	movs	r4, r0
 8002fdc:	1c43      	adds	r3, r0, #1
 8002fde:	d15e      	bne.n	800309e <_malloc_r+0xf6>
 8002fe0:	9b00      	ldr	r3, [sp, #0]
 8002fe2:	681c      	ldr	r4, [r3, #0]
 8002fe4:	0025      	movs	r5, r4
 8002fe6:	2d00      	cmp	r5, #0
 8002fe8:	d14e      	bne.n	8003088 <_malloc_r+0xe0>
 8002fea:	2c00      	cmp	r4, #0
 8002fec:	d051      	beq.n	8003092 <_malloc_r+0xea>
 8002fee:	6823      	ldr	r3, [r4, #0]
 8002ff0:	0029      	movs	r1, r5
 8002ff2:	18e3      	adds	r3, r4, r3
 8002ff4:	0030      	movs	r0, r6
 8002ff6:	9301      	str	r3, [sp, #4]
 8002ff8:	f000 fb5e 	bl	80036b8 <_sbrk_r>
 8002ffc:	9b01      	ldr	r3, [sp, #4]
 8002ffe:	4283      	cmp	r3, r0
 8003000:	d147      	bne.n	8003092 <_malloc_r+0xea>
 8003002:	6823      	ldr	r3, [r4, #0]
 8003004:	0030      	movs	r0, r6
 8003006:	1aff      	subs	r7, r7, r3
 8003008:	0039      	movs	r1, r7
 800300a:	f7ff ffab 	bl	8002f64 <sbrk_aligned>
 800300e:	3001      	adds	r0, #1
 8003010:	d03f      	beq.n	8003092 <_malloc_r+0xea>
 8003012:	6823      	ldr	r3, [r4, #0]
 8003014:	19db      	adds	r3, r3, r7
 8003016:	6023      	str	r3, [r4, #0]
 8003018:	9b00      	ldr	r3, [sp, #0]
 800301a:	681b      	ldr	r3, [r3, #0]
 800301c:	2b00      	cmp	r3, #0
 800301e:	d040      	beq.n	80030a2 <_malloc_r+0xfa>
 8003020:	685a      	ldr	r2, [r3, #4]
 8003022:	42a2      	cmp	r2, r4
 8003024:	d133      	bne.n	800308e <_malloc_r+0xe6>
 8003026:	2200      	movs	r2, #0
 8003028:	605a      	str	r2, [r3, #4]
 800302a:	e014      	b.n	8003056 <_malloc_r+0xae>
 800302c:	2b00      	cmp	r3, #0
 800302e:	dac5      	bge.n	8002fbc <_malloc_r+0x14>
 8003030:	230c      	movs	r3, #12
 8003032:	2500      	movs	r5, #0
 8003034:	6033      	str	r3, [r6, #0]
 8003036:	0028      	movs	r0, r5
 8003038:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800303a:	6821      	ldr	r1, [r4, #0]
 800303c:	1bc9      	subs	r1, r1, r7
 800303e:	d420      	bmi.n	8003082 <_malloc_r+0xda>
 8003040:	290b      	cmp	r1, #11
 8003042:	d918      	bls.n	8003076 <_malloc_r+0xce>
 8003044:	19e2      	adds	r2, r4, r7
 8003046:	6027      	str	r7, [r4, #0]
 8003048:	42a3      	cmp	r3, r4
 800304a:	d112      	bne.n	8003072 <_malloc_r+0xca>
 800304c:	9b00      	ldr	r3, [sp, #0]
 800304e:	601a      	str	r2, [r3, #0]
 8003050:	6863      	ldr	r3, [r4, #4]
 8003052:	6011      	str	r1, [r2, #0]
 8003054:	6053      	str	r3, [r2, #4]
 8003056:	0030      	movs	r0, r6
 8003058:	0025      	movs	r5, r4
 800305a:	f000 f82f 	bl	80030bc <__malloc_unlock>
 800305e:	2207      	movs	r2, #7
 8003060:	350b      	adds	r5, #11
 8003062:	1d23      	adds	r3, r4, #4
 8003064:	4395      	bics	r5, r2
 8003066:	1aea      	subs	r2, r5, r3
 8003068:	429d      	cmp	r5, r3
 800306a:	d0e4      	beq.n	8003036 <_malloc_r+0x8e>
 800306c:	1b5b      	subs	r3, r3, r5
 800306e:	50a3      	str	r3, [r4, r2]
 8003070:	e7e1      	b.n	8003036 <_malloc_r+0x8e>
 8003072:	605a      	str	r2, [r3, #4]
 8003074:	e7ec      	b.n	8003050 <_malloc_r+0xa8>
 8003076:	6862      	ldr	r2, [r4, #4]
 8003078:	42a3      	cmp	r3, r4
 800307a:	d1d5      	bne.n	8003028 <_malloc_r+0x80>
 800307c:	9b00      	ldr	r3, [sp, #0]
 800307e:	601a      	str	r2, [r3, #0]
 8003080:	e7e9      	b.n	8003056 <_malloc_r+0xae>
 8003082:	0023      	movs	r3, r4
 8003084:	6864      	ldr	r4, [r4, #4]
 8003086:	e7a2      	b.n	8002fce <_malloc_r+0x26>
 8003088:	002c      	movs	r4, r5
 800308a:	686d      	ldr	r5, [r5, #4]
 800308c:	e7ab      	b.n	8002fe6 <_malloc_r+0x3e>
 800308e:	0013      	movs	r3, r2
 8003090:	e7c4      	b.n	800301c <_malloc_r+0x74>
 8003092:	230c      	movs	r3, #12
 8003094:	0030      	movs	r0, r6
 8003096:	6033      	str	r3, [r6, #0]
 8003098:	f000 f810 	bl	80030bc <__malloc_unlock>
 800309c:	e7cb      	b.n	8003036 <_malloc_r+0x8e>
 800309e:	6027      	str	r7, [r4, #0]
 80030a0:	e7d9      	b.n	8003056 <_malloc_r+0xae>
 80030a2:	605b      	str	r3, [r3, #4]
 80030a4:	deff      	udf	#255	; 0xff
 80030a6:	46c0      	nop			; (mov r8, r8)
 80030a8:	2000030c 	.word	0x2000030c

080030ac <__malloc_lock>:
 80030ac:	b510      	push	{r4, lr}
 80030ae:	4802      	ldr	r0, [pc, #8]	; (80030b8 <__malloc_lock+0xc>)
 80030b0:	f7ff ff0c 	bl	8002ecc <__retarget_lock_acquire_recursive>
 80030b4:	bd10      	pop	{r4, pc}
 80030b6:	46c0      	nop			; (mov r8, r8)
 80030b8:	20000308 	.word	0x20000308

080030bc <__malloc_unlock>:
 80030bc:	b510      	push	{r4, lr}
 80030be:	4802      	ldr	r0, [pc, #8]	; (80030c8 <__malloc_unlock+0xc>)
 80030c0:	f7ff ff05 	bl	8002ece <__retarget_lock_release_recursive>
 80030c4:	bd10      	pop	{r4, pc}
 80030c6:	46c0      	nop			; (mov r8, r8)
 80030c8:	20000308 	.word	0x20000308

080030cc <__ssputs_r>:
 80030cc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80030ce:	b085      	sub	sp, #20
 80030d0:	9301      	str	r3, [sp, #4]
 80030d2:	9203      	str	r2, [sp, #12]
 80030d4:	688e      	ldr	r6, [r1, #8]
 80030d6:	9a01      	ldr	r2, [sp, #4]
 80030d8:	0007      	movs	r7, r0
 80030da:	000c      	movs	r4, r1
 80030dc:	680b      	ldr	r3, [r1, #0]
 80030de:	4296      	cmp	r6, r2
 80030e0:	d831      	bhi.n	8003146 <__ssputs_r+0x7a>
 80030e2:	898a      	ldrh	r2, [r1, #12]
 80030e4:	2190      	movs	r1, #144	; 0x90
 80030e6:	00c9      	lsls	r1, r1, #3
 80030e8:	420a      	tst	r2, r1
 80030ea:	d029      	beq.n	8003140 <__ssputs_r+0x74>
 80030ec:	2003      	movs	r0, #3
 80030ee:	6921      	ldr	r1, [r4, #16]
 80030f0:	1a5b      	subs	r3, r3, r1
 80030f2:	9302      	str	r3, [sp, #8]
 80030f4:	6963      	ldr	r3, [r4, #20]
 80030f6:	4343      	muls	r3, r0
 80030f8:	0fdd      	lsrs	r5, r3, #31
 80030fa:	18ed      	adds	r5, r5, r3
 80030fc:	9b01      	ldr	r3, [sp, #4]
 80030fe:	9802      	ldr	r0, [sp, #8]
 8003100:	3301      	adds	r3, #1
 8003102:	181b      	adds	r3, r3, r0
 8003104:	106d      	asrs	r5, r5, #1
 8003106:	42ab      	cmp	r3, r5
 8003108:	d900      	bls.n	800310c <__ssputs_r+0x40>
 800310a:	001d      	movs	r5, r3
 800310c:	0552      	lsls	r2, r2, #21
 800310e:	d529      	bpl.n	8003164 <__ssputs_r+0x98>
 8003110:	0029      	movs	r1, r5
 8003112:	0038      	movs	r0, r7
 8003114:	f7ff ff48 	bl	8002fa8 <_malloc_r>
 8003118:	1e06      	subs	r6, r0, #0
 800311a:	d02d      	beq.n	8003178 <__ssputs_r+0xac>
 800311c:	9a02      	ldr	r2, [sp, #8]
 800311e:	6921      	ldr	r1, [r4, #16]
 8003120:	f000 fae7 	bl	80036f2 <memcpy>
 8003124:	89a2      	ldrh	r2, [r4, #12]
 8003126:	4b19      	ldr	r3, [pc, #100]	; (800318c <__ssputs_r+0xc0>)
 8003128:	401a      	ands	r2, r3
 800312a:	2380      	movs	r3, #128	; 0x80
 800312c:	4313      	orrs	r3, r2
 800312e:	81a3      	strh	r3, [r4, #12]
 8003130:	9b02      	ldr	r3, [sp, #8]
 8003132:	6126      	str	r6, [r4, #16]
 8003134:	18f6      	adds	r6, r6, r3
 8003136:	6026      	str	r6, [r4, #0]
 8003138:	6165      	str	r5, [r4, #20]
 800313a:	9e01      	ldr	r6, [sp, #4]
 800313c:	1aed      	subs	r5, r5, r3
 800313e:	60a5      	str	r5, [r4, #8]
 8003140:	9b01      	ldr	r3, [sp, #4]
 8003142:	429e      	cmp	r6, r3
 8003144:	d900      	bls.n	8003148 <__ssputs_r+0x7c>
 8003146:	9e01      	ldr	r6, [sp, #4]
 8003148:	0032      	movs	r2, r6
 800314a:	9903      	ldr	r1, [sp, #12]
 800314c:	6820      	ldr	r0, [r4, #0]
 800314e:	f000 fa9f 	bl	8003690 <memmove>
 8003152:	2000      	movs	r0, #0
 8003154:	68a3      	ldr	r3, [r4, #8]
 8003156:	1b9b      	subs	r3, r3, r6
 8003158:	60a3      	str	r3, [r4, #8]
 800315a:	6823      	ldr	r3, [r4, #0]
 800315c:	199b      	adds	r3, r3, r6
 800315e:	6023      	str	r3, [r4, #0]
 8003160:	b005      	add	sp, #20
 8003162:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003164:	002a      	movs	r2, r5
 8003166:	0038      	movs	r0, r7
 8003168:	f000 facc 	bl	8003704 <_realloc_r>
 800316c:	1e06      	subs	r6, r0, #0
 800316e:	d1df      	bne.n	8003130 <__ssputs_r+0x64>
 8003170:	0038      	movs	r0, r7
 8003172:	6921      	ldr	r1, [r4, #16]
 8003174:	f7ff feac 	bl	8002ed0 <_free_r>
 8003178:	230c      	movs	r3, #12
 800317a:	2001      	movs	r0, #1
 800317c:	603b      	str	r3, [r7, #0]
 800317e:	89a2      	ldrh	r2, [r4, #12]
 8003180:	3334      	adds	r3, #52	; 0x34
 8003182:	4313      	orrs	r3, r2
 8003184:	81a3      	strh	r3, [r4, #12]
 8003186:	4240      	negs	r0, r0
 8003188:	e7ea      	b.n	8003160 <__ssputs_r+0x94>
 800318a:	46c0      	nop			; (mov r8, r8)
 800318c:	fffffb7f 	.word	0xfffffb7f

08003190 <_svfiprintf_r>:
 8003190:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003192:	b0a1      	sub	sp, #132	; 0x84
 8003194:	9003      	str	r0, [sp, #12]
 8003196:	001d      	movs	r5, r3
 8003198:	898b      	ldrh	r3, [r1, #12]
 800319a:	000f      	movs	r7, r1
 800319c:	0016      	movs	r6, r2
 800319e:	061b      	lsls	r3, r3, #24
 80031a0:	d511      	bpl.n	80031c6 <_svfiprintf_r+0x36>
 80031a2:	690b      	ldr	r3, [r1, #16]
 80031a4:	2b00      	cmp	r3, #0
 80031a6:	d10e      	bne.n	80031c6 <_svfiprintf_r+0x36>
 80031a8:	2140      	movs	r1, #64	; 0x40
 80031aa:	f7ff fefd 	bl	8002fa8 <_malloc_r>
 80031ae:	6038      	str	r0, [r7, #0]
 80031b0:	6138      	str	r0, [r7, #16]
 80031b2:	2800      	cmp	r0, #0
 80031b4:	d105      	bne.n	80031c2 <_svfiprintf_r+0x32>
 80031b6:	230c      	movs	r3, #12
 80031b8:	9a03      	ldr	r2, [sp, #12]
 80031ba:	3801      	subs	r0, #1
 80031bc:	6013      	str	r3, [r2, #0]
 80031be:	b021      	add	sp, #132	; 0x84
 80031c0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80031c2:	2340      	movs	r3, #64	; 0x40
 80031c4:	617b      	str	r3, [r7, #20]
 80031c6:	2300      	movs	r3, #0
 80031c8:	ac08      	add	r4, sp, #32
 80031ca:	6163      	str	r3, [r4, #20]
 80031cc:	3320      	adds	r3, #32
 80031ce:	7663      	strb	r3, [r4, #25]
 80031d0:	3310      	adds	r3, #16
 80031d2:	76a3      	strb	r3, [r4, #26]
 80031d4:	9507      	str	r5, [sp, #28]
 80031d6:	0035      	movs	r5, r6
 80031d8:	782b      	ldrb	r3, [r5, #0]
 80031da:	2b00      	cmp	r3, #0
 80031dc:	d001      	beq.n	80031e2 <_svfiprintf_r+0x52>
 80031de:	2b25      	cmp	r3, #37	; 0x25
 80031e0:	d148      	bne.n	8003274 <_svfiprintf_r+0xe4>
 80031e2:	1bab      	subs	r3, r5, r6
 80031e4:	9305      	str	r3, [sp, #20]
 80031e6:	42b5      	cmp	r5, r6
 80031e8:	d00b      	beq.n	8003202 <_svfiprintf_r+0x72>
 80031ea:	0032      	movs	r2, r6
 80031ec:	0039      	movs	r1, r7
 80031ee:	9803      	ldr	r0, [sp, #12]
 80031f0:	f7ff ff6c 	bl	80030cc <__ssputs_r>
 80031f4:	3001      	adds	r0, #1
 80031f6:	d100      	bne.n	80031fa <_svfiprintf_r+0x6a>
 80031f8:	e0af      	b.n	800335a <_svfiprintf_r+0x1ca>
 80031fa:	6963      	ldr	r3, [r4, #20]
 80031fc:	9a05      	ldr	r2, [sp, #20]
 80031fe:	189b      	adds	r3, r3, r2
 8003200:	6163      	str	r3, [r4, #20]
 8003202:	782b      	ldrb	r3, [r5, #0]
 8003204:	2b00      	cmp	r3, #0
 8003206:	d100      	bne.n	800320a <_svfiprintf_r+0x7a>
 8003208:	e0a7      	b.n	800335a <_svfiprintf_r+0x1ca>
 800320a:	2201      	movs	r2, #1
 800320c:	2300      	movs	r3, #0
 800320e:	4252      	negs	r2, r2
 8003210:	6062      	str	r2, [r4, #4]
 8003212:	a904      	add	r1, sp, #16
 8003214:	3254      	adds	r2, #84	; 0x54
 8003216:	1852      	adds	r2, r2, r1
 8003218:	1c6e      	adds	r6, r5, #1
 800321a:	6023      	str	r3, [r4, #0]
 800321c:	60e3      	str	r3, [r4, #12]
 800321e:	60a3      	str	r3, [r4, #8]
 8003220:	7013      	strb	r3, [r2, #0]
 8003222:	65a3      	str	r3, [r4, #88]	; 0x58
 8003224:	4b55      	ldr	r3, [pc, #340]	; (800337c <_svfiprintf_r+0x1ec>)
 8003226:	2205      	movs	r2, #5
 8003228:	0018      	movs	r0, r3
 800322a:	7831      	ldrb	r1, [r6, #0]
 800322c:	9305      	str	r3, [sp, #20]
 800322e:	f000 fa55 	bl	80036dc <memchr>
 8003232:	1c75      	adds	r5, r6, #1
 8003234:	2800      	cmp	r0, #0
 8003236:	d11f      	bne.n	8003278 <_svfiprintf_r+0xe8>
 8003238:	6822      	ldr	r2, [r4, #0]
 800323a:	06d3      	lsls	r3, r2, #27
 800323c:	d504      	bpl.n	8003248 <_svfiprintf_r+0xb8>
 800323e:	2353      	movs	r3, #83	; 0x53
 8003240:	a904      	add	r1, sp, #16
 8003242:	185b      	adds	r3, r3, r1
 8003244:	2120      	movs	r1, #32
 8003246:	7019      	strb	r1, [r3, #0]
 8003248:	0713      	lsls	r3, r2, #28
 800324a:	d504      	bpl.n	8003256 <_svfiprintf_r+0xc6>
 800324c:	2353      	movs	r3, #83	; 0x53
 800324e:	a904      	add	r1, sp, #16
 8003250:	185b      	adds	r3, r3, r1
 8003252:	212b      	movs	r1, #43	; 0x2b
 8003254:	7019      	strb	r1, [r3, #0]
 8003256:	7833      	ldrb	r3, [r6, #0]
 8003258:	2b2a      	cmp	r3, #42	; 0x2a
 800325a:	d016      	beq.n	800328a <_svfiprintf_r+0xfa>
 800325c:	0035      	movs	r5, r6
 800325e:	2100      	movs	r1, #0
 8003260:	200a      	movs	r0, #10
 8003262:	68e3      	ldr	r3, [r4, #12]
 8003264:	782a      	ldrb	r2, [r5, #0]
 8003266:	1c6e      	adds	r6, r5, #1
 8003268:	3a30      	subs	r2, #48	; 0x30
 800326a:	2a09      	cmp	r2, #9
 800326c:	d94e      	bls.n	800330c <_svfiprintf_r+0x17c>
 800326e:	2900      	cmp	r1, #0
 8003270:	d111      	bne.n	8003296 <_svfiprintf_r+0x106>
 8003272:	e017      	b.n	80032a4 <_svfiprintf_r+0x114>
 8003274:	3501      	adds	r5, #1
 8003276:	e7af      	b.n	80031d8 <_svfiprintf_r+0x48>
 8003278:	9b05      	ldr	r3, [sp, #20]
 800327a:	6822      	ldr	r2, [r4, #0]
 800327c:	1ac0      	subs	r0, r0, r3
 800327e:	2301      	movs	r3, #1
 8003280:	4083      	lsls	r3, r0
 8003282:	4313      	orrs	r3, r2
 8003284:	002e      	movs	r6, r5
 8003286:	6023      	str	r3, [r4, #0]
 8003288:	e7cc      	b.n	8003224 <_svfiprintf_r+0x94>
 800328a:	9b07      	ldr	r3, [sp, #28]
 800328c:	1d19      	adds	r1, r3, #4
 800328e:	681b      	ldr	r3, [r3, #0]
 8003290:	9107      	str	r1, [sp, #28]
 8003292:	2b00      	cmp	r3, #0
 8003294:	db01      	blt.n	800329a <_svfiprintf_r+0x10a>
 8003296:	930b      	str	r3, [sp, #44]	; 0x2c
 8003298:	e004      	b.n	80032a4 <_svfiprintf_r+0x114>
 800329a:	425b      	negs	r3, r3
 800329c:	60e3      	str	r3, [r4, #12]
 800329e:	2302      	movs	r3, #2
 80032a0:	4313      	orrs	r3, r2
 80032a2:	6023      	str	r3, [r4, #0]
 80032a4:	782b      	ldrb	r3, [r5, #0]
 80032a6:	2b2e      	cmp	r3, #46	; 0x2e
 80032a8:	d10a      	bne.n	80032c0 <_svfiprintf_r+0x130>
 80032aa:	786b      	ldrb	r3, [r5, #1]
 80032ac:	2b2a      	cmp	r3, #42	; 0x2a
 80032ae:	d135      	bne.n	800331c <_svfiprintf_r+0x18c>
 80032b0:	9b07      	ldr	r3, [sp, #28]
 80032b2:	3502      	adds	r5, #2
 80032b4:	1d1a      	adds	r2, r3, #4
 80032b6:	681b      	ldr	r3, [r3, #0]
 80032b8:	9207      	str	r2, [sp, #28]
 80032ba:	2b00      	cmp	r3, #0
 80032bc:	db2b      	blt.n	8003316 <_svfiprintf_r+0x186>
 80032be:	9309      	str	r3, [sp, #36]	; 0x24
 80032c0:	4e2f      	ldr	r6, [pc, #188]	; (8003380 <_svfiprintf_r+0x1f0>)
 80032c2:	2203      	movs	r2, #3
 80032c4:	0030      	movs	r0, r6
 80032c6:	7829      	ldrb	r1, [r5, #0]
 80032c8:	f000 fa08 	bl	80036dc <memchr>
 80032cc:	2800      	cmp	r0, #0
 80032ce:	d006      	beq.n	80032de <_svfiprintf_r+0x14e>
 80032d0:	2340      	movs	r3, #64	; 0x40
 80032d2:	1b80      	subs	r0, r0, r6
 80032d4:	4083      	lsls	r3, r0
 80032d6:	6822      	ldr	r2, [r4, #0]
 80032d8:	3501      	adds	r5, #1
 80032da:	4313      	orrs	r3, r2
 80032dc:	6023      	str	r3, [r4, #0]
 80032de:	7829      	ldrb	r1, [r5, #0]
 80032e0:	2206      	movs	r2, #6
 80032e2:	4828      	ldr	r0, [pc, #160]	; (8003384 <_svfiprintf_r+0x1f4>)
 80032e4:	1c6e      	adds	r6, r5, #1
 80032e6:	7621      	strb	r1, [r4, #24]
 80032e8:	f000 f9f8 	bl	80036dc <memchr>
 80032ec:	2800      	cmp	r0, #0
 80032ee:	d03c      	beq.n	800336a <_svfiprintf_r+0x1da>
 80032f0:	4b25      	ldr	r3, [pc, #148]	; (8003388 <_svfiprintf_r+0x1f8>)
 80032f2:	2b00      	cmp	r3, #0
 80032f4:	d125      	bne.n	8003342 <_svfiprintf_r+0x1b2>
 80032f6:	2207      	movs	r2, #7
 80032f8:	9b07      	ldr	r3, [sp, #28]
 80032fa:	3307      	adds	r3, #7
 80032fc:	4393      	bics	r3, r2
 80032fe:	3308      	adds	r3, #8
 8003300:	9307      	str	r3, [sp, #28]
 8003302:	6963      	ldr	r3, [r4, #20]
 8003304:	9a04      	ldr	r2, [sp, #16]
 8003306:	189b      	adds	r3, r3, r2
 8003308:	6163      	str	r3, [r4, #20]
 800330a:	e764      	b.n	80031d6 <_svfiprintf_r+0x46>
 800330c:	4343      	muls	r3, r0
 800330e:	0035      	movs	r5, r6
 8003310:	2101      	movs	r1, #1
 8003312:	189b      	adds	r3, r3, r2
 8003314:	e7a6      	b.n	8003264 <_svfiprintf_r+0xd4>
 8003316:	2301      	movs	r3, #1
 8003318:	425b      	negs	r3, r3
 800331a:	e7d0      	b.n	80032be <_svfiprintf_r+0x12e>
 800331c:	2300      	movs	r3, #0
 800331e:	200a      	movs	r0, #10
 8003320:	001a      	movs	r2, r3
 8003322:	3501      	adds	r5, #1
 8003324:	6063      	str	r3, [r4, #4]
 8003326:	7829      	ldrb	r1, [r5, #0]
 8003328:	1c6e      	adds	r6, r5, #1
 800332a:	3930      	subs	r1, #48	; 0x30
 800332c:	2909      	cmp	r1, #9
 800332e:	d903      	bls.n	8003338 <_svfiprintf_r+0x1a8>
 8003330:	2b00      	cmp	r3, #0
 8003332:	d0c5      	beq.n	80032c0 <_svfiprintf_r+0x130>
 8003334:	9209      	str	r2, [sp, #36]	; 0x24
 8003336:	e7c3      	b.n	80032c0 <_svfiprintf_r+0x130>
 8003338:	4342      	muls	r2, r0
 800333a:	0035      	movs	r5, r6
 800333c:	2301      	movs	r3, #1
 800333e:	1852      	adds	r2, r2, r1
 8003340:	e7f1      	b.n	8003326 <_svfiprintf_r+0x196>
 8003342:	aa07      	add	r2, sp, #28
 8003344:	9200      	str	r2, [sp, #0]
 8003346:	0021      	movs	r1, r4
 8003348:	003a      	movs	r2, r7
 800334a:	4b10      	ldr	r3, [pc, #64]	; (800338c <_svfiprintf_r+0x1fc>)
 800334c:	9803      	ldr	r0, [sp, #12]
 800334e:	e000      	b.n	8003352 <_svfiprintf_r+0x1c2>
 8003350:	bf00      	nop
 8003352:	9004      	str	r0, [sp, #16]
 8003354:	9b04      	ldr	r3, [sp, #16]
 8003356:	3301      	adds	r3, #1
 8003358:	d1d3      	bne.n	8003302 <_svfiprintf_r+0x172>
 800335a:	89bb      	ldrh	r3, [r7, #12]
 800335c:	980d      	ldr	r0, [sp, #52]	; 0x34
 800335e:	065b      	lsls	r3, r3, #25
 8003360:	d400      	bmi.n	8003364 <_svfiprintf_r+0x1d4>
 8003362:	e72c      	b.n	80031be <_svfiprintf_r+0x2e>
 8003364:	2001      	movs	r0, #1
 8003366:	4240      	negs	r0, r0
 8003368:	e729      	b.n	80031be <_svfiprintf_r+0x2e>
 800336a:	aa07      	add	r2, sp, #28
 800336c:	9200      	str	r2, [sp, #0]
 800336e:	0021      	movs	r1, r4
 8003370:	003a      	movs	r2, r7
 8003372:	4b06      	ldr	r3, [pc, #24]	; (800338c <_svfiprintf_r+0x1fc>)
 8003374:	9803      	ldr	r0, [sp, #12]
 8003376:	f000 f87b 	bl	8003470 <_printf_i>
 800337a:	e7ea      	b.n	8003352 <_svfiprintf_r+0x1c2>
 800337c:	08003840 	.word	0x08003840
 8003380:	08003846 	.word	0x08003846
 8003384:	0800384a 	.word	0x0800384a
 8003388:	00000000 	.word	0x00000000
 800338c:	080030cd 	.word	0x080030cd

08003390 <_printf_common>:
 8003390:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8003392:	0016      	movs	r6, r2
 8003394:	9301      	str	r3, [sp, #4]
 8003396:	688a      	ldr	r2, [r1, #8]
 8003398:	690b      	ldr	r3, [r1, #16]
 800339a:	000c      	movs	r4, r1
 800339c:	9000      	str	r0, [sp, #0]
 800339e:	4293      	cmp	r3, r2
 80033a0:	da00      	bge.n	80033a4 <_printf_common+0x14>
 80033a2:	0013      	movs	r3, r2
 80033a4:	0022      	movs	r2, r4
 80033a6:	6033      	str	r3, [r6, #0]
 80033a8:	3243      	adds	r2, #67	; 0x43
 80033aa:	7812      	ldrb	r2, [r2, #0]
 80033ac:	2a00      	cmp	r2, #0
 80033ae:	d001      	beq.n	80033b4 <_printf_common+0x24>
 80033b0:	3301      	adds	r3, #1
 80033b2:	6033      	str	r3, [r6, #0]
 80033b4:	6823      	ldr	r3, [r4, #0]
 80033b6:	069b      	lsls	r3, r3, #26
 80033b8:	d502      	bpl.n	80033c0 <_printf_common+0x30>
 80033ba:	6833      	ldr	r3, [r6, #0]
 80033bc:	3302      	adds	r3, #2
 80033be:	6033      	str	r3, [r6, #0]
 80033c0:	6822      	ldr	r2, [r4, #0]
 80033c2:	2306      	movs	r3, #6
 80033c4:	0015      	movs	r5, r2
 80033c6:	401d      	ands	r5, r3
 80033c8:	421a      	tst	r2, r3
 80033ca:	d027      	beq.n	800341c <_printf_common+0x8c>
 80033cc:	0023      	movs	r3, r4
 80033ce:	3343      	adds	r3, #67	; 0x43
 80033d0:	781b      	ldrb	r3, [r3, #0]
 80033d2:	1e5a      	subs	r2, r3, #1
 80033d4:	4193      	sbcs	r3, r2
 80033d6:	6822      	ldr	r2, [r4, #0]
 80033d8:	0692      	lsls	r2, r2, #26
 80033da:	d430      	bmi.n	800343e <_printf_common+0xae>
 80033dc:	0022      	movs	r2, r4
 80033de:	9901      	ldr	r1, [sp, #4]
 80033e0:	9800      	ldr	r0, [sp, #0]
 80033e2:	9d08      	ldr	r5, [sp, #32]
 80033e4:	3243      	adds	r2, #67	; 0x43
 80033e6:	47a8      	blx	r5
 80033e8:	3001      	adds	r0, #1
 80033ea:	d025      	beq.n	8003438 <_printf_common+0xa8>
 80033ec:	2206      	movs	r2, #6
 80033ee:	6823      	ldr	r3, [r4, #0]
 80033f0:	2500      	movs	r5, #0
 80033f2:	4013      	ands	r3, r2
 80033f4:	2b04      	cmp	r3, #4
 80033f6:	d105      	bne.n	8003404 <_printf_common+0x74>
 80033f8:	6833      	ldr	r3, [r6, #0]
 80033fa:	68e5      	ldr	r5, [r4, #12]
 80033fc:	1aed      	subs	r5, r5, r3
 80033fe:	43eb      	mvns	r3, r5
 8003400:	17db      	asrs	r3, r3, #31
 8003402:	401d      	ands	r5, r3
 8003404:	68a3      	ldr	r3, [r4, #8]
 8003406:	6922      	ldr	r2, [r4, #16]
 8003408:	4293      	cmp	r3, r2
 800340a:	dd01      	ble.n	8003410 <_printf_common+0x80>
 800340c:	1a9b      	subs	r3, r3, r2
 800340e:	18ed      	adds	r5, r5, r3
 8003410:	2600      	movs	r6, #0
 8003412:	42b5      	cmp	r5, r6
 8003414:	d120      	bne.n	8003458 <_printf_common+0xc8>
 8003416:	2000      	movs	r0, #0
 8003418:	e010      	b.n	800343c <_printf_common+0xac>
 800341a:	3501      	adds	r5, #1
 800341c:	68e3      	ldr	r3, [r4, #12]
 800341e:	6832      	ldr	r2, [r6, #0]
 8003420:	1a9b      	subs	r3, r3, r2
 8003422:	42ab      	cmp	r3, r5
 8003424:	ddd2      	ble.n	80033cc <_printf_common+0x3c>
 8003426:	0022      	movs	r2, r4
 8003428:	2301      	movs	r3, #1
 800342a:	9901      	ldr	r1, [sp, #4]
 800342c:	9800      	ldr	r0, [sp, #0]
 800342e:	9f08      	ldr	r7, [sp, #32]
 8003430:	3219      	adds	r2, #25
 8003432:	47b8      	blx	r7
 8003434:	3001      	adds	r0, #1
 8003436:	d1f0      	bne.n	800341a <_printf_common+0x8a>
 8003438:	2001      	movs	r0, #1
 800343a:	4240      	negs	r0, r0
 800343c:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800343e:	2030      	movs	r0, #48	; 0x30
 8003440:	18e1      	adds	r1, r4, r3
 8003442:	3143      	adds	r1, #67	; 0x43
 8003444:	7008      	strb	r0, [r1, #0]
 8003446:	0021      	movs	r1, r4
 8003448:	1c5a      	adds	r2, r3, #1
 800344a:	3145      	adds	r1, #69	; 0x45
 800344c:	7809      	ldrb	r1, [r1, #0]
 800344e:	18a2      	adds	r2, r4, r2
 8003450:	3243      	adds	r2, #67	; 0x43
 8003452:	3302      	adds	r3, #2
 8003454:	7011      	strb	r1, [r2, #0]
 8003456:	e7c1      	b.n	80033dc <_printf_common+0x4c>
 8003458:	0022      	movs	r2, r4
 800345a:	2301      	movs	r3, #1
 800345c:	9901      	ldr	r1, [sp, #4]
 800345e:	9800      	ldr	r0, [sp, #0]
 8003460:	9f08      	ldr	r7, [sp, #32]
 8003462:	321a      	adds	r2, #26
 8003464:	47b8      	blx	r7
 8003466:	3001      	adds	r0, #1
 8003468:	d0e6      	beq.n	8003438 <_printf_common+0xa8>
 800346a:	3601      	adds	r6, #1
 800346c:	e7d1      	b.n	8003412 <_printf_common+0x82>
	...

08003470 <_printf_i>:
 8003470:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003472:	b08b      	sub	sp, #44	; 0x2c
 8003474:	9206      	str	r2, [sp, #24]
 8003476:	000a      	movs	r2, r1
 8003478:	3243      	adds	r2, #67	; 0x43
 800347a:	9307      	str	r3, [sp, #28]
 800347c:	9005      	str	r0, [sp, #20]
 800347e:	9204      	str	r2, [sp, #16]
 8003480:	7e0a      	ldrb	r2, [r1, #24]
 8003482:	000c      	movs	r4, r1
 8003484:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8003486:	2a78      	cmp	r2, #120	; 0x78
 8003488:	d809      	bhi.n	800349e <_printf_i+0x2e>
 800348a:	2a62      	cmp	r2, #98	; 0x62
 800348c:	d80b      	bhi.n	80034a6 <_printf_i+0x36>
 800348e:	2a00      	cmp	r2, #0
 8003490:	d100      	bne.n	8003494 <_printf_i+0x24>
 8003492:	e0be      	b.n	8003612 <_printf_i+0x1a2>
 8003494:	497c      	ldr	r1, [pc, #496]	; (8003688 <_printf_i+0x218>)
 8003496:	9103      	str	r1, [sp, #12]
 8003498:	2a58      	cmp	r2, #88	; 0x58
 800349a:	d100      	bne.n	800349e <_printf_i+0x2e>
 800349c:	e093      	b.n	80035c6 <_printf_i+0x156>
 800349e:	0026      	movs	r6, r4
 80034a0:	3642      	adds	r6, #66	; 0x42
 80034a2:	7032      	strb	r2, [r6, #0]
 80034a4:	e022      	b.n	80034ec <_printf_i+0x7c>
 80034a6:	0010      	movs	r0, r2
 80034a8:	3863      	subs	r0, #99	; 0x63
 80034aa:	2815      	cmp	r0, #21
 80034ac:	d8f7      	bhi.n	800349e <_printf_i+0x2e>
 80034ae:	f7fc fe29 	bl	8000104 <__gnu_thumb1_case_shi>
 80034b2:	0016      	.short	0x0016
 80034b4:	fff6001f 	.word	0xfff6001f
 80034b8:	fff6fff6 	.word	0xfff6fff6
 80034bc:	001ffff6 	.word	0x001ffff6
 80034c0:	fff6fff6 	.word	0xfff6fff6
 80034c4:	fff6fff6 	.word	0xfff6fff6
 80034c8:	003600a3 	.word	0x003600a3
 80034cc:	fff60083 	.word	0xfff60083
 80034d0:	00b4fff6 	.word	0x00b4fff6
 80034d4:	0036fff6 	.word	0x0036fff6
 80034d8:	fff6fff6 	.word	0xfff6fff6
 80034dc:	0087      	.short	0x0087
 80034de:	0026      	movs	r6, r4
 80034e0:	681a      	ldr	r2, [r3, #0]
 80034e2:	3642      	adds	r6, #66	; 0x42
 80034e4:	1d11      	adds	r1, r2, #4
 80034e6:	6019      	str	r1, [r3, #0]
 80034e8:	6813      	ldr	r3, [r2, #0]
 80034ea:	7033      	strb	r3, [r6, #0]
 80034ec:	2301      	movs	r3, #1
 80034ee:	e0a2      	b.n	8003636 <_printf_i+0x1c6>
 80034f0:	6818      	ldr	r0, [r3, #0]
 80034f2:	6809      	ldr	r1, [r1, #0]
 80034f4:	1d02      	adds	r2, r0, #4
 80034f6:	060d      	lsls	r5, r1, #24
 80034f8:	d50b      	bpl.n	8003512 <_printf_i+0xa2>
 80034fa:	6805      	ldr	r5, [r0, #0]
 80034fc:	601a      	str	r2, [r3, #0]
 80034fe:	2d00      	cmp	r5, #0
 8003500:	da03      	bge.n	800350a <_printf_i+0x9a>
 8003502:	232d      	movs	r3, #45	; 0x2d
 8003504:	9a04      	ldr	r2, [sp, #16]
 8003506:	426d      	negs	r5, r5
 8003508:	7013      	strb	r3, [r2, #0]
 800350a:	4b5f      	ldr	r3, [pc, #380]	; (8003688 <_printf_i+0x218>)
 800350c:	270a      	movs	r7, #10
 800350e:	9303      	str	r3, [sp, #12]
 8003510:	e01b      	b.n	800354a <_printf_i+0xda>
 8003512:	6805      	ldr	r5, [r0, #0]
 8003514:	601a      	str	r2, [r3, #0]
 8003516:	0649      	lsls	r1, r1, #25
 8003518:	d5f1      	bpl.n	80034fe <_printf_i+0x8e>
 800351a:	b22d      	sxth	r5, r5
 800351c:	e7ef      	b.n	80034fe <_printf_i+0x8e>
 800351e:	680d      	ldr	r5, [r1, #0]
 8003520:	6819      	ldr	r1, [r3, #0]
 8003522:	1d08      	adds	r0, r1, #4
 8003524:	6018      	str	r0, [r3, #0]
 8003526:	062e      	lsls	r6, r5, #24
 8003528:	d501      	bpl.n	800352e <_printf_i+0xbe>
 800352a:	680d      	ldr	r5, [r1, #0]
 800352c:	e003      	b.n	8003536 <_printf_i+0xc6>
 800352e:	066d      	lsls	r5, r5, #25
 8003530:	d5fb      	bpl.n	800352a <_printf_i+0xba>
 8003532:	680d      	ldr	r5, [r1, #0]
 8003534:	b2ad      	uxth	r5, r5
 8003536:	4b54      	ldr	r3, [pc, #336]	; (8003688 <_printf_i+0x218>)
 8003538:	2708      	movs	r7, #8
 800353a:	9303      	str	r3, [sp, #12]
 800353c:	2a6f      	cmp	r2, #111	; 0x6f
 800353e:	d000      	beq.n	8003542 <_printf_i+0xd2>
 8003540:	3702      	adds	r7, #2
 8003542:	0023      	movs	r3, r4
 8003544:	2200      	movs	r2, #0
 8003546:	3343      	adds	r3, #67	; 0x43
 8003548:	701a      	strb	r2, [r3, #0]
 800354a:	6863      	ldr	r3, [r4, #4]
 800354c:	60a3      	str	r3, [r4, #8]
 800354e:	2b00      	cmp	r3, #0
 8003550:	db03      	blt.n	800355a <_printf_i+0xea>
 8003552:	2104      	movs	r1, #4
 8003554:	6822      	ldr	r2, [r4, #0]
 8003556:	438a      	bics	r2, r1
 8003558:	6022      	str	r2, [r4, #0]
 800355a:	2d00      	cmp	r5, #0
 800355c:	d102      	bne.n	8003564 <_printf_i+0xf4>
 800355e:	9e04      	ldr	r6, [sp, #16]
 8003560:	2b00      	cmp	r3, #0
 8003562:	d00c      	beq.n	800357e <_printf_i+0x10e>
 8003564:	9e04      	ldr	r6, [sp, #16]
 8003566:	0028      	movs	r0, r5
 8003568:	0039      	movs	r1, r7
 800356a:	f7fc fe5b 	bl	8000224 <__aeabi_uidivmod>
 800356e:	9b03      	ldr	r3, [sp, #12]
 8003570:	3e01      	subs	r6, #1
 8003572:	5c5b      	ldrb	r3, [r3, r1]
 8003574:	7033      	strb	r3, [r6, #0]
 8003576:	002b      	movs	r3, r5
 8003578:	0005      	movs	r5, r0
 800357a:	429f      	cmp	r7, r3
 800357c:	d9f3      	bls.n	8003566 <_printf_i+0xf6>
 800357e:	2f08      	cmp	r7, #8
 8003580:	d109      	bne.n	8003596 <_printf_i+0x126>
 8003582:	6823      	ldr	r3, [r4, #0]
 8003584:	07db      	lsls	r3, r3, #31
 8003586:	d506      	bpl.n	8003596 <_printf_i+0x126>
 8003588:	6862      	ldr	r2, [r4, #4]
 800358a:	6923      	ldr	r3, [r4, #16]
 800358c:	429a      	cmp	r2, r3
 800358e:	dc02      	bgt.n	8003596 <_printf_i+0x126>
 8003590:	2330      	movs	r3, #48	; 0x30
 8003592:	3e01      	subs	r6, #1
 8003594:	7033      	strb	r3, [r6, #0]
 8003596:	9b04      	ldr	r3, [sp, #16]
 8003598:	1b9b      	subs	r3, r3, r6
 800359a:	6123      	str	r3, [r4, #16]
 800359c:	9b07      	ldr	r3, [sp, #28]
 800359e:	0021      	movs	r1, r4
 80035a0:	9300      	str	r3, [sp, #0]
 80035a2:	9805      	ldr	r0, [sp, #20]
 80035a4:	9b06      	ldr	r3, [sp, #24]
 80035a6:	aa09      	add	r2, sp, #36	; 0x24
 80035a8:	f7ff fef2 	bl	8003390 <_printf_common>
 80035ac:	3001      	adds	r0, #1
 80035ae:	d147      	bne.n	8003640 <_printf_i+0x1d0>
 80035b0:	2001      	movs	r0, #1
 80035b2:	4240      	negs	r0, r0
 80035b4:	b00b      	add	sp, #44	; 0x2c
 80035b6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80035b8:	2220      	movs	r2, #32
 80035ba:	6809      	ldr	r1, [r1, #0]
 80035bc:	430a      	orrs	r2, r1
 80035be:	6022      	str	r2, [r4, #0]
 80035c0:	2278      	movs	r2, #120	; 0x78
 80035c2:	4932      	ldr	r1, [pc, #200]	; (800368c <_printf_i+0x21c>)
 80035c4:	9103      	str	r1, [sp, #12]
 80035c6:	0021      	movs	r1, r4
 80035c8:	3145      	adds	r1, #69	; 0x45
 80035ca:	700a      	strb	r2, [r1, #0]
 80035cc:	6819      	ldr	r1, [r3, #0]
 80035ce:	6822      	ldr	r2, [r4, #0]
 80035d0:	c920      	ldmia	r1!, {r5}
 80035d2:	0610      	lsls	r0, r2, #24
 80035d4:	d402      	bmi.n	80035dc <_printf_i+0x16c>
 80035d6:	0650      	lsls	r0, r2, #25
 80035d8:	d500      	bpl.n	80035dc <_printf_i+0x16c>
 80035da:	b2ad      	uxth	r5, r5
 80035dc:	6019      	str	r1, [r3, #0]
 80035de:	07d3      	lsls	r3, r2, #31
 80035e0:	d502      	bpl.n	80035e8 <_printf_i+0x178>
 80035e2:	2320      	movs	r3, #32
 80035e4:	4313      	orrs	r3, r2
 80035e6:	6023      	str	r3, [r4, #0]
 80035e8:	2710      	movs	r7, #16
 80035ea:	2d00      	cmp	r5, #0
 80035ec:	d1a9      	bne.n	8003542 <_printf_i+0xd2>
 80035ee:	2220      	movs	r2, #32
 80035f0:	6823      	ldr	r3, [r4, #0]
 80035f2:	4393      	bics	r3, r2
 80035f4:	6023      	str	r3, [r4, #0]
 80035f6:	e7a4      	b.n	8003542 <_printf_i+0xd2>
 80035f8:	681a      	ldr	r2, [r3, #0]
 80035fa:	680d      	ldr	r5, [r1, #0]
 80035fc:	1d10      	adds	r0, r2, #4
 80035fe:	6949      	ldr	r1, [r1, #20]
 8003600:	6018      	str	r0, [r3, #0]
 8003602:	6813      	ldr	r3, [r2, #0]
 8003604:	062e      	lsls	r6, r5, #24
 8003606:	d501      	bpl.n	800360c <_printf_i+0x19c>
 8003608:	6019      	str	r1, [r3, #0]
 800360a:	e002      	b.n	8003612 <_printf_i+0x1a2>
 800360c:	066d      	lsls	r5, r5, #25
 800360e:	d5fb      	bpl.n	8003608 <_printf_i+0x198>
 8003610:	8019      	strh	r1, [r3, #0]
 8003612:	2300      	movs	r3, #0
 8003614:	9e04      	ldr	r6, [sp, #16]
 8003616:	6123      	str	r3, [r4, #16]
 8003618:	e7c0      	b.n	800359c <_printf_i+0x12c>
 800361a:	681a      	ldr	r2, [r3, #0]
 800361c:	1d11      	adds	r1, r2, #4
 800361e:	6019      	str	r1, [r3, #0]
 8003620:	6816      	ldr	r6, [r2, #0]
 8003622:	2100      	movs	r1, #0
 8003624:	0030      	movs	r0, r6
 8003626:	6862      	ldr	r2, [r4, #4]
 8003628:	f000 f858 	bl	80036dc <memchr>
 800362c:	2800      	cmp	r0, #0
 800362e:	d001      	beq.n	8003634 <_printf_i+0x1c4>
 8003630:	1b80      	subs	r0, r0, r6
 8003632:	6060      	str	r0, [r4, #4]
 8003634:	6863      	ldr	r3, [r4, #4]
 8003636:	6123      	str	r3, [r4, #16]
 8003638:	2300      	movs	r3, #0
 800363a:	9a04      	ldr	r2, [sp, #16]
 800363c:	7013      	strb	r3, [r2, #0]
 800363e:	e7ad      	b.n	800359c <_printf_i+0x12c>
 8003640:	0032      	movs	r2, r6
 8003642:	6923      	ldr	r3, [r4, #16]
 8003644:	9906      	ldr	r1, [sp, #24]
 8003646:	9805      	ldr	r0, [sp, #20]
 8003648:	9d07      	ldr	r5, [sp, #28]
 800364a:	47a8      	blx	r5
 800364c:	3001      	adds	r0, #1
 800364e:	d0af      	beq.n	80035b0 <_printf_i+0x140>
 8003650:	6823      	ldr	r3, [r4, #0]
 8003652:	079b      	lsls	r3, r3, #30
 8003654:	d415      	bmi.n	8003682 <_printf_i+0x212>
 8003656:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003658:	68e0      	ldr	r0, [r4, #12]
 800365a:	4298      	cmp	r0, r3
 800365c:	daaa      	bge.n	80035b4 <_printf_i+0x144>
 800365e:	0018      	movs	r0, r3
 8003660:	e7a8      	b.n	80035b4 <_printf_i+0x144>
 8003662:	0022      	movs	r2, r4
 8003664:	2301      	movs	r3, #1
 8003666:	9906      	ldr	r1, [sp, #24]
 8003668:	9805      	ldr	r0, [sp, #20]
 800366a:	9e07      	ldr	r6, [sp, #28]
 800366c:	3219      	adds	r2, #25
 800366e:	47b0      	blx	r6
 8003670:	3001      	adds	r0, #1
 8003672:	d09d      	beq.n	80035b0 <_printf_i+0x140>
 8003674:	3501      	adds	r5, #1
 8003676:	68e3      	ldr	r3, [r4, #12]
 8003678:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800367a:	1a9b      	subs	r3, r3, r2
 800367c:	42ab      	cmp	r3, r5
 800367e:	dcf0      	bgt.n	8003662 <_printf_i+0x1f2>
 8003680:	e7e9      	b.n	8003656 <_printf_i+0x1e6>
 8003682:	2500      	movs	r5, #0
 8003684:	e7f7      	b.n	8003676 <_printf_i+0x206>
 8003686:	46c0      	nop			; (mov r8, r8)
 8003688:	08003851 	.word	0x08003851
 800368c:	08003862 	.word	0x08003862

08003690 <memmove>:
 8003690:	b510      	push	{r4, lr}
 8003692:	4288      	cmp	r0, r1
 8003694:	d902      	bls.n	800369c <memmove+0xc>
 8003696:	188b      	adds	r3, r1, r2
 8003698:	4298      	cmp	r0, r3
 800369a:	d303      	bcc.n	80036a4 <memmove+0x14>
 800369c:	2300      	movs	r3, #0
 800369e:	e007      	b.n	80036b0 <memmove+0x20>
 80036a0:	5c8b      	ldrb	r3, [r1, r2]
 80036a2:	5483      	strb	r3, [r0, r2]
 80036a4:	3a01      	subs	r2, #1
 80036a6:	d2fb      	bcs.n	80036a0 <memmove+0x10>
 80036a8:	bd10      	pop	{r4, pc}
 80036aa:	5ccc      	ldrb	r4, [r1, r3]
 80036ac:	54c4      	strb	r4, [r0, r3]
 80036ae:	3301      	adds	r3, #1
 80036b0:	429a      	cmp	r2, r3
 80036b2:	d1fa      	bne.n	80036aa <memmove+0x1a>
 80036b4:	e7f8      	b.n	80036a8 <memmove+0x18>
	...

080036b8 <_sbrk_r>:
 80036b8:	2300      	movs	r3, #0
 80036ba:	b570      	push	{r4, r5, r6, lr}
 80036bc:	4d06      	ldr	r5, [pc, #24]	; (80036d8 <_sbrk_r+0x20>)
 80036be:	0004      	movs	r4, r0
 80036c0:	0008      	movs	r0, r1
 80036c2:	602b      	str	r3, [r5, #0]
 80036c4:	f7fd f9b0 	bl	8000a28 <_sbrk>
 80036c8:	1c43      	adds	r3, r0, #1
 80036ca:	d103      	bne.n	80036d4 <_sbrk_r+0x1c>
 80036cc:	682b      	ldr	r3, [r5, #0]
 80036ce:	2b00      	cmp	r3, #0
 80036d0:	d000      	beq.n	80036d4 <_sbrk_r+0x1c>
 80036d2:	6023      	str	r3, [r4, #0]
 80036d4:	bd70      	pop	{r4, r5, r6, pc}
 80036d6:	46c0      	nop			; (mov r8, r8)
 80036d8:	20000304 	.word	0x20000304

080036dc <memchr>:
 80036dc:	b2c9      	uxtb	r1, r1
 80036de:	1882      	adds	r2, r0, r2
 80036e0:	4290      	cmp	r0, r2
 80036e2:	d101      	bne.n	80036e8 <memchr+0xc>
 80036e4:	2000      	movs	r0, #0
 80036e6:	4770      	bx	lr
 80036e8:	7803      	ldrb	r3, [r0, #0]
 80036ea:	428b      	cmp	r3, r1
 80036ec:	d0fb      	beq.n	80036e6 <memchr+0xa>
 80036ee:	3001      	adds	r0, #1
 80036f0:	e7f6      	b.n	80036e0 <memchr+0x4>

080036f2 <memcpy>:
 80036f2:	2300      	movs	r3, #0
 80036f4:	b510      	push	{r4, lr}
 80036f6:	429a      	cmp	r2, r3
 80036f8:	d100      	bne.n	80036fc <memcpy+0xa>
 80036fa:	bd10      	pop	{r4, pc}
 80036fc:	5ccc      	ldrb	r4, [r1, r3]
 80036fe:	54c4      	strb	r4, [r0, r3]
 8003700:	3301      	adds	r3, #1
 8003702:	e7f8      	b.n	80036f6 <memcpy+0x4>

08003704 <_realloc_r>:
 8003704:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8003706:	0007      	movs	r7, r0
 8003708:	000e      	movs	r6, r1
 800370a:	0014      	movs	r4, r2
 800370c:	2900      	cmp	r1, #0
 800370e:	d105      	bne.n	800371c <_realloc_r+0x18>
 8003710:	0011      	movs	r1, r2
 8003712:	f7ff fc49 	bl	8002fa8 <_malloc_r>
 8003716:	0005      	movs	r5, r0
 8003718:	0028      	movs	r0, r5
 800371a:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800371c:	2a00      	cmp	r2, #0
 800371e:	d103      	bne.n	8003728 <_realloc_r+0x24>
 8003720:	f7ff fbd6 	bl	8002ed0 <_free_r>
 8003724:	0025      	movs	r5, r4
 8003726:	e7f7      	b.n	8003718 <_realloc_r+0x14>
 8003728:	f000 f81b 	bl	8003762 <_malloc_usable_size_r>
 800372c:	9001      	str	r0, [sp, #4]
 800372e:	4284      	cmp	r4, r0
 8003730:	d803      	bhi.n	800373a <_realloc_r+0x36>
 8003732:	0035      	movs	r5, r6
 8003734:	0843      	lsrs	r3, r0, #1
 8003736:	42a3      	cmp	r3, r4
 8003738:	d3ee      	bcc.n	8003718 <_realloc_r+0x14>
 800373a:	0021      	movs	r1, r4
 800373c:	0038      	movs	r0, r7
 800373e:	f7ff fc33 	bl	8002fa8 <_malloc_r>
 8003742:	1e05      	subs	r5, r0, #0
 8003744:	d0e8      	beq.n	8003718 <_realloc_r+0x14>
 8003746:	9b01      	ldr	r3, [sp, #4]
 8003748:	0022      	movs	r2, r4
 800374a:	429c      	cmp	r4, r3
 800374c:	d900      	bls.n	8003750 <_realloc_r+0x4c>
 800374e:	001a      	movs	r2, r3
 8003750:	0031      	movs	r1, r6
 8003752:	0028      	movs	r0, r5
 8003754:	f7ff ffcd 	bl	80036f2 <memcpy>
 8003758:	0031      	movs	r1, r6
 800375a:	0038      	movs	r0, r7
 800375c:	f7ff fbb8 	bl	8002ed0 <_free_r>
 8003760:	e7da      	b.n	8003718 <_realloc_r+0x14>

08003762 <_malloc_usable_size_r>:
 8003762:	1f0b      	subs	r3, r1, #4
 8003764:	681b      	ldr	r3, [r3, #0]
 8003766:	1f18      	subs	r0, r3, #4
 8003768:	2b00      	cmp	r3, #0
 800376a:	da01      	bge.n	8003770 <_malloc_usable_size_r+0xe>
 800376c:	580b      	ldr	r3, [r1, r0]
 800376e:	18c0      	adds	r0, r0, r3
 8003770:	4770      	bx	lr
	...

08003774 <_init>:
 8003774:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003776:	46c0      	nop			; (mov r8, r8)
 8003778:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800377a:	bc08      	pop	{r3}
 800377c:	469e      	mov	lr, r3
 800377e:	4770      	bx	lr

08003780 <_fini>:
 8003780:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003782:	46c0      	nop			; (mov r8, r8)
 8003784:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003786:	bc08      	pop	{r3}
 8003788:	469e      	mov	lr, r3
 800378a:	4770      	bx	lr
