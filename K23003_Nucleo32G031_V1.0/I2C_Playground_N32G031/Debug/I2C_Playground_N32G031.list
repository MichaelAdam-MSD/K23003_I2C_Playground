
I2C_Playground_N32G031.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000bc  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004334  080000bc  080000bc  000010bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000144  080043f0  080043f0  000053f0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004534  08004534  0000605c  2**0
                  CONTENTS
  4 .ARM          00000008  08004534  08004534  00005534  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800453c  0800453c  0000605c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800453c  0800453c  0000553c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004540  08004540  00005540  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000005c  20000000  08004544  00006000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000002b8  2000005c  080045a0  0000605c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000314  080045a0  00006314  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  0000605c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000deae  00000000  00000000  00006084  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000202c  00000000  00000000  00013f32  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000ae0  00000000  00000000  00015f60  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 0000086f  00000000  00000000  00016a40  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00016d41  00000000  00000000  000172af  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000fc95  00000000  00000000  0002dff0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008b9ff  00000000  00000000  0003dc85  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000c9684  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002b50  00000000  00000000  000c96c8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000081  00000000  00000000  000cc218  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000bc <__do_global_dtors_aux>:
 80000bc:	b510      	push	{r4, lr}
 80000be:	4c06      	ldr	r4, [pc, #24]	@ (80000d8 <__do_global_dtors_aux+0x1c>)
 80000c0:	7823      	ldrb	r3, [r4, #0]
 80000c2:	2b00      	cmp	r3, #0
 80000c4:	d107      	bne.n	80000d6 <__do_global_dtors_aux+0x1a>
 80000c6:	4b05      	ldr	r3, [pc, #20]	@ (80000dc <__do_global_dtors_aux+0x20>)
 80000c8:	2b00      	cmp	r3, #0
 80000ca:	d002      	beq.n	80000d2 <__do_global_dtors_aux+0x16>
 80000cc:	4804      	ldr	r0, [pc, #16]	@ (80000e0 <__do_global_dtors_aux+0x24>)
 80000ce:	e000      	b.n	80000d2 <__do_global_dtors_aux+0x16>
 80000d0:	bf00      	nop
 80000d2:	2301      	movs	r3, #1
 80000d4:	7023      	strb	r3, [r4, #0]
 80000d6:	bd10      	pop	{r4, pc}
 80000d8:	2000005c 	.word	0x2000005c
 80000dc:	00000000 	.word	0x00000000
 80000e0:	080043d8 	.word	0x080043d8

080000e4 <frame_dummy>:
 80000e4:	4b04      	ldr	r3, [pc, #16]	@ (80000f8 <frame_dummy+0x14>)
 80000e6:	b510      	push	{r4, lr}
 80000e8:	2b00      	cmp	r3, #0
 80000ea:	d003      	beq.n	80000f4 <frame_dummy+0x10>
 80000ec:	4903      	ldr	r1, [pc, #12]	@ (80000fc <frame_dummy+0x18>)
 80000ee:	4804      	ldr	r0, [pc, #16]	@ (8000100 <frame_dummy+0x1c>)
 80000f0:	e000      	b.n	80000f4 <frame_dummy+0x10>
 80000f2:	bf00      	nop
 80000f4:	bd10      	pop	{r4, pc}
 80000f6:	46c0      	nop			@ (mov r8, r8)
 80000f8:	00000000 	.word	0x00000000
 80000fc:	20000060 	.word	0x20000060
 8000100:	080043d8 	.word	0x080043d8

08000104 <__gnu_thumb1_case_shi>:
 8000104:	b403      	push	{r0, r1}
 8000106:	4671      	mov	r1, lr
 8000108:	0849      	lsrs	r1, r1, #1
 800010a:	0040      	lsls	r0, r0, #1
 800010c:	0049      	lsls	r1, r1, #1
 800010e:	5e09      	ldrsh	r1, [r1, r0]
 8000110:	0049      	lsls	r1, r1, #1
 8000112:	448e      	add	lr, r1
 8000114:	bc03      	pop	{r0, r1}
 8000116:	4770      	bx	lr

08000118 <__udivsi3>:
 8000118:	2200      	movs	r2, #0
 800011a:	0843      	lsrs	r3, r0, #1
 800011c:	428b      	cmp	r3, r1
 800011e:	d374      	bcc.n	800020a <__udivsi3+0xf2>
 8000120:	0903      	lsrs	r3, r0, #4
 8000122:	428b      	cmp	r3, r1
 8000124:	d35f      	bcc.n	80001e6 <__udivsi3+0xce>
 8000126:	0a03      	lsrs	r3, r0, #8
 8000128:	428b      	cmp	r3, r1
 800012a:	d344      	bcc.n	80001b6 <__udivsi3+0x9e>
 800012c:	0b03      	lsrs	r3, r0, #12
 800012e:	428b      	cmp	r3, r1
 8000130:	d328      	bcc.n	8000184 <__udivsi3+0x6c>
 8000132:	0c03      	lsrs	r3, r0, #16
 8000134:	428b      	cmp	r3, r1
 8000136:	d30d      	bcc.n	8000154 <__udivsi3+0x3c>
 8000138:	22ff      	movs	r2, #255	@ 0xff
 800013a:	0209      	lsls	r1, r1, #8
 800013c:	ba12      	rev	r2, r2
 800013e:	0c03      	lsrs	r3, r0, #16
 8000140:	428b      	cmp	r3, r1
 8000142:	d302      	bcc.n	800014a <__udivsi3+0x32>
 8000144:	1212      	asrs	r2, r2, #8
 8000146:	0209      	lsls	r1, r1, #8
 8000148:	d065      	beq.n	8000216 <__udivsi3+0xfe>
 800014a:	0b03      	lsrs	r3, r0, #12
 800014c:	428b      	cmp	r3, r1
 800014e:	d319      	bcc.n	8000184 <__udivsi3+0x6c>
 8000150:	e000      	b.n	8000154 <__udivsi3+0x3c>
 8000152:	0a09      	lsrs	r1, r1, #8
 8000154:	0bc3      	lsrs	r3, r0, #15
 8000156:	428b      	cmp	r3, r1
 8000158:	d301      	bcc.n	800015e <__udivsi3+0x46>
 800015a:	03cb      	lsls	r3, r1, #15
 800015c:	1ac0      	subs	r0, r0, r3
 800015e:	4152      	adcs	r2, r2
 8000160:	0b83      	lsrs	r3, r0, #14
 8000162:	428b      	cmp	r3, r1
 8000164:	d301      	bcc.n	800016a <__udivsi3+0x52>
 8000166:	038b      	lsls	r3, r1, #14
 8000168:	1ac0      	subs	r0, r0, r3
 800016a:	4152      	adcs	r2, r2
 800016c:	0b43      	lsrs	r3, r0, #13
 800016e:	428b      	cmp	r3, r1
 8000170:	d301      	bcc.n	8000176 <__udivsi3+0x5e>
 8000172:	034b      	lsls	r3, r1, #13
 8000174:	1ac0      	subs	r0, r0, r3
 8000176:	4152      	adcs	r2, r2
 8000178:	0b03      	lsrs	r3, r0, #12
 800017a:	428b      	cmp	r3, r1
 800017c:	d301      	bcc.n	8000182 <__udivsi3+0x6a>
 800017e:	030b      	lsls	r3, r1, #12
 8000180:	1ac0      	subs	r0, r0, r3
 8000182:	4152      	adcs	r2, r2
 8000184:	0ac3      	lsrs	r3, r0, #11
 8000186:	428b      	cmp	r3, r1
 8000188:	d301      	bcc.n	800018e <__udivsi3+0x76>
 800018a:	02cb      	lsls	r3, r1, #11
 800018c:	1ac0      	subs	r0, r0, r3
 800018e:	4152      	adcs	r2, r2
 8000190:	0a83      	lsrs	r3, r0, #10
 8000192:	428b      	cmp	r3, r1
 8000194:	d301      	bcc.n	800019a <__udivsi3+0x82>
 8000196:	028b      	lsls	r3, r1, #10
 8000198:	1ac0      	subs	r0, r0, r3
 800019a:	4152      	adcs	r2, r2
 800019c:	0a43      	lsrs	r3, r0, #9
 800019e:	428b      	cmp	r3, r1
 80001a0:	d301      	bcc.n	80001a6 <__udivsi3+0x8e>
 80001a2:	024b      	lsls	r3, r1, #9
 80001a4:	1ac0      	subs	r0, r0, r3
 80001a6:	4152      	adcs	r2, r2
 80001a8:	0a03      	lsrs	r3, r0, #8
 80001aa:	428b      	cmp	r3, r1
 80001ac:	d301      	bcc.n	80001b2 <__udivsi3+0x9a>
 80001ae:	020b      	lsls	r3, r1, #8
 80001b0:	1ac0      	subs	r0, r0, r3
 80001b2:	4152      	adcs	r2, r2
 80001b4:	d2cd      	bcs.n	8000152 <__udivsi3+0x3a>
 80001b6:	09c3      	lsrs	r3, r0, #7
 80001b8:	428b      	cmp	r3, r1
 80001ba:	d301      	bcc.n	80001c0 <__udivsi3+0xa8>
 80001bc:	01cb      	lsls	r3, r1, #7
 80001be:	1ac0      	subs	r0, r0, r3
 80001c0:	4152      	adcs	r2, r2
 80001c2:	0983      	lsrs	r3, r0, #6
 80001c4:	428b      	cmp	r3, r1
 80001c6:	d301      	bcc.n	80001cc <__udivsi3+0xb4>
 80001c8:	018b      	lsls	r3, r1, #6
 80001ca:	1ac0      	subs	r0, r0, r3
 80001cc:	4152      	adcs	r2, r2
 80001ce:	0943      	lsrs	r3, r0, #5
 80001d0:	428b      	cmp	r3, r1
 80001d2:	d301      	bcc.n	80001d8 <__udivsi3+0xc0>
 80001d4:	014b      	lsls	r3, r1, #5
 80001d6:	1ac0      	subs	r0, r0, r3
 80001d8:	4152      	adcs	r2, r2
 80001da:	0903      	lsrs	r3, r0, #4
 80001dc:	428b      	cmp	r3, r1
 80001de:	d301      	bcc.n	80001e4 <__udivsi3+0xcc>
 80001e0:	010b      	lsls	r3, r1, #4
 80001e2:	1ac0      	subs	r0, r0, r3
 80001e4:	4152      	adcs	r2, r2
 80001e6:	08c3      	lsrs	r3, r0, #3
 80001e8:	428b      	cmp	r3, r1
 80001ea:	d301      	bcc.n	80001f0 <__udivsi3+0xd8>
 80001ec:	00cb      	lsls	r3, r1, #3
 80001ee:	1ac0      	subs	r0, r0, r3
 80001f0:	4152      	adcs	r2, r2
 80001f2:	0883      	lsrs	r3, r0, #2
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d301      	bcc.n	80001fc <__udivsi3+0xe4>
 80001f8:	008b      	lsls	r3, r1, #2
 80001fa:	1ac0      	subs	r0, r0, r3
 80001fc:	4152      	adcs	r2, r2
 80001fe:	0843      	lsrs	r3, r0, #1
 8000200:	428b      	cmp	r3, r1
 8000202:	d301      	bcc.n	8000208 <__udivsi3+0xf0>
 8000204:	004b      	lsls	r3, r1, #1
 8000206:	1ac0      	subs	r0, r0, r3
 8000208:	4152      	adcs	r2, r2
 800020a:	1a41      	subs	r1, r0, r1
 800020c:	d200      	bcs.n	8000210 <__udivsi3+0xf8>
 800020e:	4601      	mov	r1, r0
 8000210:	4152      	adcs	r2, r2
 8000212:	4610      	mov	r0, r2
 8000214:	4770      	bx	lr
 8000216:	e7ff      	b.n	8000218 <__udivsi3+0x100>
 8000218:	b501      	push	{r0, lr}
 800021a:	2000      	movs	r0, #0
 800021c:	f000 f806 	bl	800022c <__aeabi_idiv0>
 8000220:	bd02      	pop	{r1, pc}
 8000222:	46c0      	nop			@ (mov r8, r8)

08000224 <__aeabi_uidivmod>:
 8000224:	2900      	cmp	r1, #0
 8000226:	d0f7      	beq.n	8000218 <__udivsi3+0x100>
 8000228:	e776      	b.n	8000118 <__udivsi3>
 800022a:	4770      	bx	lr

0800022c <__aeabi_idiv0>:
 800022c:	4770      	bx	lr
 800022e:	46c0      	nop			@ (mov r8, r8)

08000230 <__aeabi_uldivmod>:
 8000230:	2b00      	cmp	r3, #0
 8000232:	d111      	bne.n	8000258 <__aeabi_uldivmod+0x28>
 8000234:	2a00      	cmp	r2, #0
 8000236:	d10f      	bne.n	8000258 <__aeabi_uldivmod+0x28>
 8000238:	2900      	cmp	r1, #0
 800023a:	d100      	bne.n	800023e <__aeabi_uldivmod+0xe>
 800023c:	2800      	cmp	r0, #0
 800023e:	d002      	beq.n	8000246 <__aeabi_uldivmod+0x16>
 8000240:	2100      	movs	r1, #0
 8000242:	43c9      	mvns	r1, r1
 8000244:	0008      	movs	r0, r1
 8000246:	b407      	push	{r0, r1, r2}
 8000248:	4802      	ldr	r0, [pc, #8]	@ (8000254 <__aeabi_uldivmod+0x24>)
 800024a:	a102      	add	r1, pc, #8	@ (adr r1, 8000254 <__aeabi_uldivmod+0x24>)
 800024c:	1840      	adds	r0, r0, r1
 800024e:	9002      	str	r0, [sp, #8]
 8000250:	bd03      	pop	{r0, r1, pc}
 8000252:	46c0      	nop			@ (mov r8, r8)
 8000254:	ffffffd9 	.word	0xffffffd9
 8000258:	b403      	push	{r0, r1}
 800025a:	4668      	mov	r0, sp
 800025c:	b501      	push	{r0, lr}
 800025e:	9802      	ldr	r0, [sp, #8]
 8000260:	f000 f806 	bl	8000270 <__udivmoddi4>
 8000264:	9b01      	ldr	r3, [sp, #4]
 8000266:	469e      	mov	lr, r3
 8000268:	b002      	add	sp, #8
 800026a:	bc0c      	pop	{r2, r3}
 800026c:	4770      	bx	lr
 800026e:	46c0      	nop			@ (mov r8, r8)

08000270 <__udivmoddi4>:
 8000270:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000272:	4657      	mov	r7, sl
 8000274:	464e      	mov	r6, r9
 8000276:	4645      	mov	r5, r8
 8000278:	46de      	mov	lr, fp
 800027a:	b5e0      	push	{r5, r6, r7, lr}
 800027c:	0004      	movs	r4, r0
 800027e:	000d      	movs	r5, r1
 8000280:	4692      	mov	sl, r2
 8000282:	4699      	mov	r9, r3
 8000284:	b083      	sub	sp, #12
 8000286:	428b      	cmp	r3, r1
 8000288:	d830      	bhi.n	80002ec <__udivmoddi4+0x7c>
 800028a:	d02d      	beq.n	80002e8 <__udivmoddi4+0x78>
 800028c:	4649      	mov	r1, r9
 800028e:	4650      	mov	r0, sl
 8000290:	f000 fa82 	bl	8000798 <__clzdi2>
 8000294:	0029      	movs	r1, r5
 8000296:	0006      	movs	r6, r0
 8000298:	0020      	movs	r0, r4
 800029a:	f000 fa7d 	bl	8000798 <__clzdi2>
 800029e:	1a33      	subs	r3, r6, r0
 80002a0:	4698      	mov	r8, r3
 80002a2:	3b20      	subs	r3, #32
 80002a4:	d434      	bmi.n	8000310 <__udivmoddi4+0xa0>
 80002a6:	469b      	mov	fp, r3
 80002a8:	4653      	mov	r3, sl
 80002aa:	465a      	mov	r2, fp
 80002ac:	4093      	lsls	r3, r2
 80002ae:	4642      	mov	r2, r8
 80002b0:	001f      	movs	r7, r3
 80002b2:	4653      	mov	r3, sl
 80002b4:	4093      	lsls	r3, r2
 80002b6:	001e      	movs	r6, r3
 80002b8:	42af      	cmp	r7, r5
 80002ba:	d83b      	bhi.n	8000334 <__udivmoddi4+0xc4>
 80002bc:	42af      	cmp	r7, r5
 80002be:	d100      	bne.n	80002c2 <__udivmoddi4+0x52>
 80002c0:	e079      	b.n	80003b6 <__udivmoddi4+0x146>
 80002c2:	465b      	mov	r3, fp
 80002c4:	1ba4      	subs	r4, r4, r6
 80002c6:	41bd      	sbcs	r5, r7
 80002c8:	2b00      	cmp	r3, #0
 80002ca:	da00      	bge.n	80002ce <__udivmoddi4+0x5e>
 80002cc:	e076      	b.n	80003bc <__udivmoddi4+0x14c>
 80002ce:	2200      	movs	r2, #0
 80002d0:	2300      	movs	r3, #0
 80002d2:	9200      	str	r2, [sp, #0]
 80002d4:	9301      	str	r3, [sp, #4]
 80002d6:	2301      	movs	r3, #1
 80002d8:	465a      	mov	r2, fp
 80002da:	4093      	lsls	r3, r2
 80002dc:	9301      	str	r3, [sp, #4]
 80002de:	2301      	movs	r3, #1
 80002e0:	4642      	mov	r2, r8
 80002e2:	4093      	lsls	r3, r2
 80002e4:	9300      	str	r3, [sp, #0]
 80002e6:	e029      	b.n	800033c <__udivmoddi4+0xcc>
 80002e8:	4282      	cmp	r2, r0
 80002ea:	d9cf      	bls.n	800028c <__udivmoddi4+0x1c>
 80002ec:	2200      	movs	r2, #0
 80002ee:	2300      	movs	r3, #0
 80002f0:	9200      	str	r2, [sp, #0]
 80002f2:	9301      	str	r3, [sp, #4]
 80002f4:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80002f6:	2b00      	cmp	r3, #0
 80002f8:	d001      	beq.n	80002fe <__udivmoddi4+0x8e>
 80002fa:	601c      	str	r4, [r3, #0]
 80002fc:	605d      	str	r5, [r3, #4]
 80002fe:	9800      	ldr	r0, [sp, #0]
 8000300:	9901      	ldr	r1, [sp, #4]
 8000302:	b003      	add	sp, #12
 8000304:	bcf0      	pop	{r4, r5, r6, r7}
 8000306:	46bb      	mov	fp, r7
 8000308:	46b2      	mov	sl, r6
 800030a:	46a9      	mov	r9, r5
 800030c:	46a0      	mov	r8, r4
 800030e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000310:	4642      	mov	r2, r8
 8000312:	469b      	mov	fp, r3
 8000314:	2320      	movs	r3, #32
 8000316:	1a9b      	subs	r3, r3, r2
 8000318:	4652      	mov	r2, sl
 800031a:	40da      	lsrs	r2, r3
 800031c:	4641      	mov	r1, r8
 800031e:	0013      	movs	r3, r2
 8000320:	464a      	mov	r2, r9
 8000322:	408a      	lsls	r2, r1
 8000324:	0017      	movs	r7, r2
 8000326:	4642      	mov	r2, r8
 8000328:	431f      	orrs	r7, r3
 800032a:	4653      	mov	r3, sl
 800032c:	4093      	lsls	r3, r2
 800032e:	001e      	movs	r6, r3
 8000330:	42af      	cmp	r7, r5
 8000332:	d9c3      	bls.n	80002bc <__udivmoddi4+0x4c>
 8000334:	2200      	movs	r2, #0
 8000336:	2300      	movs	r3, #0
 8000338:	9200      	str	r2, [sp, #0]
 800033a:	9301      	str	r3, [sp, #4]
 800033c:	4643      	mov	r3, r8
 800033e:	2b00      	cmp	r3, #0
 8000340:	d0d8      	beq.n	80002f4 <__udivmoddi4+0x84>
 8000342:	07fb      	lsls	r3, r7, #31
 8000344:	0872      	lsrs	r2, r6, #1
 8000346:	431a      	orrs	r2, r3
 8000348:	4646      	mov	r6, r8
 800034a:	087b      	lsrs	r3, r7, #1
 800034c:	e00e      	b.n	800036c <__udivmoddi4+0xfc>
 800034e:	42ab      	cmp	r3, r5
 8000350:	d101      	bne.n	8000356 <__udivmoddi4+0xe6>
 8000352:	42a2      	cmp	r2, r4
 8000354:	d80c      	bhi.n	8000370 <__udivmoddi4+0x100>
 8000356:	1aa4      	subs	r4, r4, r2
 8000358:	419d      	sbcs	r5, r3
 800035a:	2001      	movs	r0, #1
 800035c:	1924      	adds	r4, r4, r4
 800035e:	416d      	adcs	r5, r5
 8000360:	2100      	movs	r1, #0
 8000362:	3e01      	subs	r6, #1
 8000364:	1824      	adds	r4, r4, r0
 8000366:	414d      	adcs	r5, r1
 8000368:	2e00      	cmp	r6, #0
 800036a:	d006      	beq.n	800037a <__udivmoddi4+0x10a>
 800036c:	42ab      	cmp	r3, r5
 800036e:	d9ee      	bls.n	800034e <__udivmoddi4+0xde>
 8000370:	3e01      	subs	r6, #1
 8000372:	1924      	adds	r4, r4, r4
 8000374:	416d      	adcs	r5, r5
 8000376:	2e00      	cmp	r6, #0
 8000378:	d1f8      	bne.n	800036c <__udivmoddi4+0xfc>
 800037a:	9800      	ldr	r0, [sp, #0]
 800037c:	9901      	ldr	r1, [sp, #4]
 800037e:	465b      	mov	r3, fp
 8000380:	1900      	adds	r0, r0, r4
 8000382:	4169      	adcs	r1, r5
 8000384:	2b00      	cmp	r3, #0
 8000386:	db24      	blt.n	80003d2 <__udivmoddi4+0x162>
 8000388:	002b      	movs	r3, r5
 800038a:	465a      	mov	r2, fp
 800038c:	4644      	mov	r4, r8
 800038e:	40d3      	lsrs	r3, r2
 8000390:	002a      	movs	r2, r5
 8000392:	40e2      	lsrs	r2, r4
 8000394:	001c      	movs	r4, r3
 8000396:	465b      	mov	r3, fp
 8000398:	0015      	movs	r5, r2
 800039a:	2b00      	cmp	r3, #0
 800039c:	db2a      	blt.n	80003f4 <__udivmoddi4+0x184>
 800039e:	0026      	movs	r6, r4
 80003a0:	409e      	lsls	r6, r3
 80003a2:	0033      	movs	r3, r6
 80003a4:	0026      	movs	r6, r4
 80003a6:	4647      	mov	r7, r8
 80003a8:	40be      	lsls	r6, r7
 80003aa:	0032      	movs	r2, r6
 80003ac:	1a80      	subs	r0, r0, r2
 80003ae:	4199      	sbcs	r1, r3
 80003b0:	9000      	str	r0, [sp, #0]
 80003b2:	9101      	str	r1, [sp, #4]
 80003b4:	e79e      	b.n	80002f4 <__udivmoddi4+0x84>
 80003b6:	42a3      	cmp	r3, r4
 80003b8:	d8bc      	bhi.n	8000334 <__udivmoddi4+0xc4>
 80003ba:	e782      	b.n	80002c2 <__udivmoddi4+0x52>
 80003bc:	4642      	mov	r2, r8
 80003be:	2320      	movs	r3, #32
 80003c0:	2100      	movs	r1, #0
 80003c2:	1a9b      	subs	r3, r3, r2
 80003c4:	2200      	movs	r2, #0
 80003c6:	9100      	str	r1, [sp, #0]
 80003c8:	9201      	str	r2, [sp, #4]
 80003ca:	2201      	movs	r2, #1
 80003cc:	40da      	lsrs	r2, r3
 80003ce:	9201      	str	r2, [sp, #4]
 80003d0:	e785      	b.n	80002de <__udivmoddi4+0x6e>
 80003d2:	4642      	mov	r2, r8
 80003d4:	2320      	movs	r3, #32
 80003d6:	1a9b      	subs	r3, r3, r2
 80003d8:	002a      	movs	r2, r5
 80003da:	4646      	mov	r6, r8
 80003dc:	409a      	lsls	r2, r3
 80003de:	0023      	movs	r3, r4
 80003e0:	40f3      	lsrs	r3, r6
 80003e2:	4644      	mov	r4, r8
 80003e4:	4313      	orrs	r3, r2
 80003e6:	002a      	movs	r2, r5
 80003e8:	40e2      	lsrs	r2, r4
 80003ea:	001c      	movs	r4, r3
 80003ec:	465b      	mov	r3, fp
 80003ee:	0015      	movs	r5, r2
 80003f0:	2b00      	cmp	r3, #0
 80003f2:	dad4      	bge.n	800039e <__udivmoddi4+0x12e>
 80003f4:	4642      	mov	r2, r8
 80003f6:	002f      	movs	r7, r5
 80003f8:	2320      	movs	r3, #32
 80003fa:	0026      	movs	r6, r4
 80003fc:	4097      	lsls	r7, r2
 80003fe:	1a9b      	subs	r3, r3, r2
 8000400:	40de      	lsrs	r6, r3
 8000402:	003b      	movs	r3, r7
 8000404:	4333      	orrs	r3, r6
 8000406:	e7cd      	b.n	80003a4 <__udivmoddi4+0x134>

08000408 <__aeabi_fmul>:
 8000408:	b5f0      	push	{r4, r5, r6, r7, lr}
 800040a:	464f      	mov	r7, r9
 800040c:	4646      	mov	r6, r8
 800040e:	46d6      	mov	lr, sl
 8000410:	0243      	lsls	r3, r0, #9
 8000412:	0a5b      	lsrs	r3, r3, #9
 8000414:	0045      	lsls	r5, r0, #1
 8000416:	b5c0      	push	{r6, r7, lr}
 8000418:	4699      	mov	r9, r3
 800041a:	1c0f      	adds	r7, r1, #0
 800041c:	0e2d      	lsrs	r5, r5, #24
 800041e:	0fc6      	lsrs	r6, r0, #31
 8000420:	2d00      	cmp	r5, #0
 8000422:	d100      	bne.n	8000426 <__aeabi_fmul+0x1e>
 8000424:	e088      	b.n	8000538 <__aeabi_fmul+0x130>
 8000426:	2dff      	cmp	r5, #255	@ 0xff
 8000428:	d100      	bne.n	800042c <__aeabi_fmul+0x24>
 800042a:	e08d      	b.n	8000548 <__aeabi_fmul+0x140>
 800042c:	2280      	movs	r2, #128	@ 0x80
 800042e:	00db      	lsls	r3, r3, #3
 8000430:	04d2      	lsls	r2, r2, #19
 8000432:	431a      	orrs	r2, r3
 8000434:	2300      	movs	r3, #0
 8000436:	4691      	mov	r9, r2
 8000438:	4698      	mov	r8, r3
 800043a:	469a      	mov	sl, r3
 800043c:	3d7f      	subs	r5, #127	@ 0x7f
 800043e:	027c      	lsls	r4, r7, #9
 8000440:	007b      	lsls	r3, r7, #1
 8000442:	0a64      	lsrs	r4, r4, #9
 8000444:	0e1b      	lsrs	r3, r3, #24
 8000446:	0fff      	lsrs	r7, r7, #31
 8000448:	2b00      	cmp	r3, #0
 800044a:	d068      	beq.n	800051e <__aeabi_fmul+0x116>
 800044c:	2bff      	cmp	r3, #255	@ 0xff
 800044e:	d021      	beq.n	8000494 <__aeabi_fmul+0x8c>
 8000450:	2280      	movs	r2, #128	@ 0x80
 8000452:	00e4      	lsls	r4, r4, #3
 8000454:	04d2      	lsls	r2, r2, #19
 8000456:	4314      	orrs	r4, r2
 8000458:	4642      	mov	r2, r8
 800045a:	3b7f      	subs	r3, #127	@ 0x7f
 800045c:	195b      	adds	r3, r3, r5
 800045e:	2100      	movs	r1, #0
 8000460:	1c5d      	adds	r5, r3, #1
 8000462:	2a0a      	cmp	r2, #10
 8000464:	dc2e      	bgt.n	80004c4 <__aeabi_fmul+0xbc>
 8000466:	407e      	eors	r6, r7
 8000468:	4642      	mov	r2, r8
 800046a:	2a02      	cmp	r2, #2
 800046c:	dc23      	bgt.n	80004b6 <__aeabi_fmul+0xae>
 800046e:	3a01      	subs	r2, #1
 8000470:	2a01      	cmp	r2, #1
 8000472:	d900      	bls.n	8000476 <__aeabi_fmul+0x6e>
 8000474:	e0bd      	b.n	80005f2 <__aeabi_fmul+0x1ea>
 8000476:	2902      	cmp	r1, #2
 8000478:	d06e      	beq.n	8000558 <__aeabi_fmul+0x150>
 800047a:	2901      	cmp	r1, #1
 800047c:	d12c      	bne.n	80004d8 <__aeabi_fmul+0xd0>
 800047e:	2000      	movs	r0, #0
 8000480:	2200      	movs	r2, #0
 8000482:	05c0      	lsls	r0, r0, #23
 8000484:	07f6      	lsls	r6, r6, #31
 8000486:	4310      	orrs	r0, r2
 8000488:	4330      	orrs	r0, r6
 800048a:	bce0      	pop	{r5, r6, r7}
 800048c:	46ba      	mov	sl, r7
 800048e:	46b1      	mov	r9, r6
 8000490:	46a8      	mov	r8, r5
 8000492:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000494:	002b      	movs	r3, r5
 8000496:	33ff      	adds	r3, #255	@ 0xff
 8000498:	2c00      	cmp	r4, #0
 800049a:	d065      	beq.n	8000568 <__aeabi_fmul+0x160>
 800049c:	2203      	movs	r2, #3
 800049e:	4641      	mov	r1, r8
 80004a0:	4311      	orrs	r1, r2
 80004a2:	0032      	movs	r2, r6
 80004a4:	3501      	adds	r5, #1
 80004a6:	4688      	mov	r8, r1
 80004a8:	407a      	eors	r2, r7
 80004aa:	35ff      	adds	r5, #255	@ 0xff
 80004ac:	290a      	cmp	r1, #10
 80004ae:	dd00      	ble.n	80004b2 <__aeabi_fmul+0xaa>
 80004b0:	e0d8      	b.n	8000664 <__aeabi_fmul+0x25c>
 80004b2:	0016      	movs	r6, r2
 80004b4:	2103      	movs	r1, #3
 80004b6:	4640      	mov	r0, r8
 80004b8:	2201      	movs	r2, #1
 80004ba:	4082      	lsls	r2, r0
 80004bc:	20a6      	movs	r0, #166	@ 0xa6
 80004be:	00c0      	lsls	r0, r0, #3
 80004c0:	4202      	tst	r2, r0
 80004c2:	d020      	beq.n	8000506 <__aeabi_fmul+0xfe>
 80004c4:	4653      	mov	r3, sl
 80004c6:	2b02      	cmp	r3, #2
 80004c8:	d046      	beq.n	8000558 <__aeabi_fmul+0x150>
 80004ca:	2b03      	cmp	r3, #3
 80004cc:	d100      	bne.n	80004d0 <__aeabi_fmul+0xc8>
 80004ce:	e0bb      	b.n	8000648 <__aeabi_fmul+0x240>
 80004d0:	4651      	mov	r1, sl
 80004d2:	464c      	mov	r4, r9
 80004d4:	2901      	cmp	r1, #1
 80004d6:	d0d2      	beq.n	800047e <__aeabi_fmul+0x76>
 80004d8:	002b      	movs	r3, r5
 80004da:	337f      	adds	r3, #127	@ 0x7f
 80004dc:	2b00      	cmp	r3, #0
 80004de:	dd70      	ble.n	80005c2 <__aeabi_fmul+0x1ba>
 80004e0:	0762      	lsls	r2, r4, #29
 80004e2:	d004      	beq.n	80004ee <__aeabi_fmul+0xe6>
 80004e4:	220f      	movs	r2, #15
 80004e6:	4022      	ands	r2, r4
 80004e8:	2a04      	cmp	r2, #4
 80004ea:	d000      	beq.n	80004ee <__aeabi_fmul+0xe6>
 80004ec:	3404      	adds	r4, #4
 80004ee:	0122      	lsls	r2, r4, #4
 80004f0:	d503      	bpl.n	80004fa <__aeabi_fmul+0xf2>
 80004f2:	4b63      	ldr	r3, [pc, #396]	@ (8000680 <__aeabi_fmul+0x278>)
 80004f4:	401c      	ands	r4, r3
 80004f6:	002b      	movs	r3, r5
 80004f8:	3380      	adds	r3, #128	@ 0x80
 80004fa:	2bfe      	cmp	r3, #254	@ 0xfe
 80004fc:	dc2c      	bgt.n	8000558 <__aeabi_fmul+0x150>
 80004fe:	01a2      	lsls	r2, r4, #6
 8000500:	0a52      	lsrs	r2, r2, #9
 8000502:	b2d8      	uxtb	r0, r3
 8000504:	e7bd      	b.n	8000482 <__aeabi_fmul+0x7a>
 8000506:	2090      	movs	r0, #144	@ 0x90
 8000508:	0080      	lsls	r0, r0, #2
 800050a:	4202      	tst	r2, r0
 800050c:	d127      	bne.n	800055e <__aeabi_fmul+0x156>
 800050e:	38b9      	subs	r0, #185	@ 0xb9
 8000510:	38ff      	subs	r0, #255	@ 0xff
 8000512:	4210      	tst	r0, r2
 8000514:	d06d      	beq.n	80005f2 <__aeabi_fmul+0x1ea>
 8000516:	003e      	movs	r6, r7
 8000518:	46a1      	mov	r9, r4
 800051a:	468a      	mov	sl, r1
 800051c:	e7d2      	b.n	80004c4 <__aeabi_fmul+0xbc>
 800051e:	2c00      	cmp	r4, #0
 8000520:	d141      	bne.n	80005a6 <__aeabi_fmul+0x19e>
 8000522:	2301      	movs	r3, #1
 8000524:	4642      	mov	r2, r8
 8000526:	431a      	orrs	r2, r3
 8000528:	4690      	mov	r8, r2
 800052a:	002b      	movs	r3, r5
 800052c:	4642      	mov	r2, r8
 800052e:	2101      	movs	r1, #1
 8000530:	1c5d      	adds	r5, r3, #1
 8000532:	2a0a      	cmp	r2, #10
 8000534:	dd97      	ble.n	8000466 <__aeabi_fmul+0x5e>
 8000536:	e7c5      	b.n	80004c4 <__aeabi_fmul+0xbc>
 8000538:	2b00      	cmp	r3, #0
 800053a:	d126      	bne.n	800058a <__aeabi_fmul+0x182>
 800053c:	2304      	movs	r3, #4
 800053e:	4698      	mov	r8, r3
 8000540:	3b03      	subs	r3, #3
 8000542:	2500      	movs	r5, #0
 8000544:	469a      	mov	sl, r3
 8000546:	e77a      	b.n	800043e <__aeabi_fmul+0x36>
 8000548:	2b00      	cmp	r3, #0
 800054a:	d118      	bne.n	800057e <__aeabi_fmul+0x176>
 800054c:	2308      	movs	r3, #8
 800054e:	4698      	mov	r8, r3
 8000550:	3b06      	subs	r3, #6
 8000552:	25ff      	movs	r5, #255	@ 0xff
 8000554:	469a      	mov	sl, r3
 8000556:	e772      	b.n	800043e <__aeabi_fmul+0x36>
 8000558:	20ff      	movs	r0, #255	@ 0xff
 800055a:	2200      	movs	r2, #0
 800055c:	e791      	b.n	8000482 <__aeabi_fmul+0x7a>
 800055e:	2280      	movs	r2, #128	@ 0x80
 8000560:	2600      	movs	r6, #0
 8000562:	20ff      	movs	r0, #255	@ 0xff
 8000564:	03d2      	lsls	r2, r2, #15
 8000566:	e78c      	b.n	8000482 <__aeabi_fmul+0x7a>
 8000568:	4641      	mov	r1, r8
 800056a:	2202      	movs	r2, #2
 800056c:	3501      	adds	r5, #1
 800056e:	4311      	orrs	r1, r2
 8000570:	4688      	mov	r8, r1
 8000572:	35ff      	adds	r5, #255	@ 0xff
 8000574:	290a      	cmp	r1, #10
 8000576:	dca5      	bgt.n	80004c4 <__aeabi_fmul+0xbc>
 8000578:	2102      	movs	r1, #2
 800057a:	407e      	eors	r6, r7
 800057c:	e774      	b.n	8000468 <__aeabi_fmul+0x60>
 800057e:	230c      	movs	r3, #12
 8000580:	4698      	mov	r8, r3
 8000582:	3b09      	subs	r3, #9
 8000584:	25ff      	movs	r5, #255	@ 0xff
 8000586:	469a      	mov	sl, r3
 8000588:	e759      	b.n	800043e <__aeabi_fmul+0x36>
 800058a:	0018      	movs	r0, r3
 800058c:	f000 f8e6 	bl	800075c <__clzsi2>
 8000590:	464a      	mov	r2, r9
 8000592:	1f43      	subs	r3, r0, #5
 8000594:	2576      	movs	r5, #118	@ 0x76
 8000596:	409a      	lsls	r2, r3
 8000598:	2300      	movs	r3, #0
 800059a:	426d      	negs	r5, r5
 800059c:	4691      	mov	r9, r2
 800059e:	4698      	mov	r8, r3
 80005a0:	469a      	mov	sl, r3
 80005a2:	1a2d      	subs	r5, r5, r0
 80005a4:	e74b      	b.n	800043e <__aeabi_fmul+0x36>
 80005a6:	0020      	movs	r0, r4
 80005a8:	f000 f8d8 	bl	800075c <__clzsi2>
 80005ac:	4642      	mov	r2, r8
 80005ae:	1f43      	subs	r3, r0, #5
 80005b0:	409c      	lsls	r4, r3
 80005b2:	1a2b      	subs	r3, r5, r0
 80005b4:	3b76      	subs	r3, #118	@ 0x76
 80005b6:	2100      	movs	r1, #0
 80005b8:	1c5d      	adds	r5, r3, #1
 80005ba:	2a0a      	cmp	r2, #10
 80005bc:	dc00      	bgt.n	80005c0 <__aeabi_fmul+0x1b8>
 80005be:	e752      	b.n	8000466 <__aeabi_fmul+0x5e>
 80005c0:	e780      	b.n	80004c4 <__aeabi_fmul+0xbc>
 80005c2:	2201      	movs	r2, #1
 80005c4:	1ad3      	subs	r3, r2, r3
 80005c6:	2b1b      	cmp	r3, #27
 80005c8:	dd00      	ble.n	80005cc <__aeabi_fmul+0x1c4>
 80005ca:	e758      	b.n	800047e <__aeabi_fmul+0x76>
 80005cc:	359e      	adds	r5, #158	@ 0x9e
 80005ce:	0022      	movs	r2, r4
 80005d0:	40ac      	lsls	r4, r5
 80005d2:	40da      	lsrs	r2, r3
 80005d4:	1e63      	subs	r3, r4, #1
 80005d6:	419c      	sbcs	r4, r3
 80005d8:	4322      	orrs	r2, r4
 80005da:	0753      	lsls	r3, r2, #29
 80005dc:	d004      	beq.n	80005e8 <__aeabi_fmul+0x1e0>
 80005de:	230f      	movs	r3, #15
 80005e0:	4013      	ands	r3, r2
 80005e2:	2b04      	cmp	r3, #4
 80005e4:	d000      	beq.n	80005e8 <__aeabi_fmul+0x1e0>
 80005e6:	3204      	adds	r2, #4
 80005e8:	0153      	lsls	r3, r2, #5
 80005ea:	d537      	bpl.n	800065c <__aeabi_fmul+0x254>
 80005ec:	2001      	movs	r0, #1
 80005ee:	2200      	movs	r2, #0
 80005f0:	e747      	b.n	8000482 <__aeabi_fmul+0x7a>
 80005f2:	0c21      	lsrs	r1, r4, #16
 80005f4:	464a      	mov	r2, r9
 80005f6:	0424      	lsls	r4, r4, #16
 80005f8:	0c24      	lsrs	r4, r4, #16
 80005fa:	0027      	movs	r7, r4
 80005fc:	0c10      	lsrs	r0, r2, #16
 80005fe:	0412      	lsls	r2, r2, #16
 8000600:	0c12      	lsrs	r2, r2, #16
 8000602:	4344      	muls	r4, r0
 8000604:	4357      	muls	r7, r2
 8000606:	4348      	muls	r0, r1
 8000608:	4351      	muls	r1, r2
 800060a:	0c3a      	lsrs	r2, r7, #16
 800060c:	1909      	adds	r1, r1, r4
 800060e:	1852      	adds	r2, r2, r1
 8000610:	4294      	cmp	r4, r2
 8000612:	d903      	bls.n	800061c <__aeabi_fmul+0x214>
 8000614:	2180      	movs	r1, #128	@ 0x80
 8000616:	0249      	lsls	r1, r1, #9
 8000618:	468c      	mov	ip, r1
 800061a:	4460      	add	r0, ip
 800061c:	043f      	lsls	r7, r7, #16
 800061e:	0411      	lsls	r1, r2, #16
 8000620:	0c3f      	lsrs	r7, r7, #16
 8000622:	19c9      	adds	r1, r1, r7
 8000624:	018c      	lsls	r4, r1, #6
 8000626:	1e67      	subs	r7, r4, #1
 8000628:	41bc      	sbcs	r4, r7
 800062a:	0c12      	lsrs	r2, r2, #16
 800062c:	0e89      	lsrs	r1, r1, #26
 800062e:	1812      	adds	r2, r2, r0
 8000630:	430c      	orrs	r4, r1
 8000632:	0192      	lsls	r2, r2, #6
 8000634:	4314      	orrs	r4, r2
 8000636:	0112      	lsls	r2, r2, #4
 8000638:	d50e      	bpl.n	8000658 <__aeabi_fmul+0x250>
 800063a:	2301      	movs	r3, #1
 800063c:	0862      	lsrs	r2, r4, #1
 800063e:	401c      	ands	r4, r3
 8000640:	4314      	orrs	r4, r2
 8000642:	e749      	b.n	80004d8 <__aeabi_fmul+0xd0>
 8000644:	003e      	movs	r6, r7
 8000646:	46a1      	mov	r9, r4
 8000648:	2280      	movs	r2, #128	@ 0x80
 800064a:	464b      	mov	r3, r9
 800064c:	03d2      	lsls	r2, r2, #15
 800064e:	431a      	orrs	r2, r3
 8000650:	0252      	lsls	r2, r2, #9
 8000652:	20ff      	movs	r0, #255	@ 0xff
 8000654:	0a52      	lsrs	r2, r2, #9
 8000656:	e714      	b.n	8000482 <__aeabi_fmul+0x7a>
 8000658:	001d      	movs	r5, r3
 800065a:	e73d      	b.n	80004d8 <__aeabi_fmul+0xd0>
 800065c:	0192      	lsls	r2, r2, #6
 800065e:	2000      	movs	r0, #0
 8000660:	0a52      	lsrs	r2, r2, #9
 8000662:	e70e      	b.n	8000482 <__aeabi_fmul+0x7a>
 8000664:	290f      	cmp	r1, #15
 8000666:	d1ed      	bne.n	8000644 <__aeabi_fmul+0x23c>
 8000668:	2280      	movs	r2, #128	@ 0x80
 800066a:	464b      	mov	r3, r9
 800066c:	03d2      	lsls	r2, r2, #15
 800066e:	4213      	tst	r3, r2
 8000670:	d0ea      	beq.n	8000648 <__aeabi_fmul+0x240>
 8000672:	4214      	tst	r4, r2
 8000674:	d1e8      	bne.n	8000648 <__aeabi_fmul+0x240>
 8000676:	003e      	movs	r6, r7
 8000678:	20ff      	movs	r0, #255	@ 0xff
 800067a:	4322      	orrs	r2, r4
 800067c:	e701      	b.n	8000482 <__aeabi_fmul+0x7a>
 800067e:	46c0      	nop			@ (mov r8, r8)
 8000680:	f7ffffff 	.word	0xf7ffffff

08000684 <__aeabi_f2iz>:
 8000684:	0241      	lsls	r1, r0, #9
 8000686:	0042      	lsls	r2, r0, #1
 8000688:	0fc3      	lsrs	r3, r0, #31
 800068a:	0a49      	lsrs	r1, r1, #9
 800068c:	2000      	movs	r0, #0
 800068e:	0e12      	lsrs	r2, r2, #24
 8000690:	2a7e      	cmp	r2, #126	@ 0x7e
 8000692:	dd03      	ble.n	800069c <__aeabi_f2iz+0x18>
 8000694:	2a9d      	cmp	r2, #157	@ 0x9d
 8000696:	dd02      	ble.n	800069e <__aeabi_f2iz+0x1a>
 8000698:	4a09      	ldr	r2, [pc, #36]	@ (80006c0 <__aeabi_f2iz+0x3c>)
 800069a:	1898      	adds	r0, r3, r2
 800069c:	4770      	bx	lr
 800069e:	2080      	movs	r0, #128	@ 0x80
 80006a0:	0400      	lsls	r0, r0, #16
 80006a2:	4301      	orrs	r1, r0
 80006a4:	2a95      	cmp	r2, #149	@ 0x95
 80006a6:	dc07      	bgt.n	80006b8 <__aeabi_f2iz+0x34>
 80006a8:	2096      	movs	r0, #150	@ 0x96
 80006aa:	1a82      	subs	r2, r0, r2
 80006ac:	40d1      	lsrs	r1, r2
 80006ae:	4248      	negs	r0, r1
 80006b0:	2b00      	cmp	r3, #0
 80006b2:	d1f3      	bne.n	800069c <__aeabi_f2iz+0x18>
 80006b4:	0008      	movs	r0, r1
 80006b6:	e7f1      	b.n	800069c <__aeabi_f2iz+0x18>
 80006b8:	3a96      	subs	r2, #150	@ 0x96
 80006ba:	4091      	lsls	r1, r2
 80006bc:	e7f7      	b.n	80006ae <__aeabi_f2iz+0x2a>
 80006be:	46c0      	nop			@ (mov r8, r8)
 80006c0:	7fffffff 	.word	0x7fffffff

080006c4 <__aeabi_i2f>:
 80006c4:	b570      	push	{r4, r5, r6, lr}
 80006c6:	2800      	cmp	r0, #0
 80006c8:	d013      	beq.n	80006f2 <__aeabi_i2f+0x2e>
 80006ca:	17c3      	asrs	r3, r0, #31
 80006cc:	18c5      	adds	r5, r0, r3
 80006ce:	405d      	eors	r5, r3
 80006d0:	0fc4      	lsrs	r4, r0, #31
 80006d2:	0028      	movs	r0, r5
 80006d4:	f000 f842 	bl	800075c <__clzsi2>
 80006d8:	239e      	movs	r3, #158	@ 0x9e
 80006da:	0001      	movs	r1, r0
 80006dc:	1a1b      	subs	r3, r3, r0
 80006de:	2b96      	cmp	r3, #150	@ 0x96
 80006e0:	dc0f      	bgt.n	8000702 <__aeabi_i2f+0x3e>
 80006e2:	2808      	cmp	r0, #8
 80006e4:	d034      	beq.n	8000750 <__aeabi_i2f+0x8c>
 80006e6:	3908      	subs	r1, #8
 80006e8:	408d      	lsls	r5, r1
 80006ea:	026d      	lsls	r5, r5, #9
 80006ec:	0a6d      	lsrs	r5, r5, #9
 80006ee:	b2d8      	uxtb	r0, r3
 80006f0:	e002      	b.n	80006f8 <__aeabi_i2f+0x34>
 80006f2:	2400      	movs	r4, #0
 80006f4:	2000      	movs	r0, #0
 80006f6:	2500      	movs	r5, #0
 80006f8:	05c0      	lsls	r0, r0, #23
 80006fa:	4328      	orrs	r0, r5
 80006fc:	07e4      	lsls	r4, r4, #31
 80006fe:	4320      	orrs	r0, r4
 8000700:	bd70      	pop	{r4, r5, r6, pc}
 8000702:	2b99      	cmp	r3, #153	@ 0x99
 8000704:	dc16      	bgt.n	8000734 <__aeabi_i2f+0x70>
 8000706:	1f42      	subs	r2, r0, #5
 8000708:	2805      	cmp	r0, #5
 800070a:	d000      	beq.n	800070e <__aeabi_i2f+0x4a>
 800070c:	4095      	lsls	r5, r2
 800070e:	002a      	movs	r2, r5
 8000710:	4811      	ldr	r0, [pc, #68]	@ (8000758 <__aeabi_i2f+0x94>)
 8000712:	4002      	ands	r2, r0
 8000714:	076e      	lsls	r6, r5, #29
 8000716:	d009      	beq.n	800072c <__aeabi_i2f+0x68>
 8000718:	260f      	movs	r6, #15
 800071a:	4035      	ands	r5, r6
 800071c:	2d04      	cmp	r5, #4
 800071e:	d005      	beq.n	800072c <__aeabi_i2f+0x68>
 8000720:	3204      	adds	r2, #4
 8000722:	0155      	lsls	r5, r2, #5
 8000724:	d502      	bpl.n	800072c <__aeabi_i2f+0x68>
 8000726:	239f      	movs	r3, #159	@ 0x9f
 8000728:	4002      	ands	r2, r0
 800072a:	1a5b      	subs	r3, r3, r1
 800072c:	0192      	lsls	r2, r2, #6
 800072e:	0a55      	lsrs	r5, r2, #9
 8000730:	b2d8      	uxtb	r0, r3
 8000732:	e7e1      	b.n	80006f8 <__aeabi_i2f+0x34>
 8000734:	2205      	movs	r2, #5
 8000736:	1a12      	subs	r2, r2, r0
 8000738:	0028      	movs	r0, r5
 800073a:	40d0      	lsrs	r0, r2
 800073c:	0002      	movs	r2, r0
 800073e:	0008      	movs	r0, r1
 8000740:	301b      	adds	r0, #27
 8000742:	4085      	lsls	r5, r0
 8000744:	0028      	movs	r0, r5
 8000746:	1e45      	subs	r5, r0, #1
 8000748:	41a8      	sbcs	r0, r5
 800074a:	4302      	orrs	r2, r0
 800074c:	0015      	movs	r5, r2
 800074e:	e7de      	b.n	800070e <__aeabi_i2f+0x4a>
 8000750:	026d      	lsls	r5, r5, #9
 8000752:	2096      	movs	r0, #150	@ 0x96
 8000754:	0a6d      	lsrs	r5, r5, #9
 8000756:	e7cf      	b.n	80006f8 <__aeabi_i2f+0x34>
 8000758:	fbffffff 	.word	0xfbffffff

0800075c <__clzsi2>:
 800075c:	211c      	movs	r1, #28
 800075e:	2301      	movs	r3, #1
 8000760:	041b      	lsls	r3, r3, #16
 8000762:	4298      	cmp	r0, r3
 8000764:	d301      	bcc.n	800076a <__clzsi2+0xe>
 8000766:	0c00      	lsrs	r0, r0, #16
 8000768:	3910      	subs	r1, #16
 800076a:	0a1b      	lsrs	r3, r3, #8
 800076c:	4298      	cmp	r0, r3
 800076e:	d301      	bcc.n	8000774 <__clzsi2+0x18>
 8000770:	0a00      	lsrs	r0, r0, #8
 8000772:	3908      	subs	r1, #8
 8000774:	091b      	lsrs	r3, r3, #4
 8000776:	4298      	cmp	r0, r3
 8000778:	d301      	bcc.n	800077e <__clzsi2+0x22>
 800077a:	0900      	lsrs	r0, r0, #4
 800077c:	3904      	subs	r1, #4
 800077e:	a202      	add	r2, pc, #8	@ (adr r2, 8000788 <__clzsi2+0x2c>)
 8000780:	5c10      	ldrb	r0, [r2, r0]
 8000782:	1840      	adds	r0, r0, r1
 8000784:	4770      	bx	lr
 8000786:	46c0      	nop			@ (mov r8, r8)
 8000788:	02020304 	.word	0x02020304
 800078c:	01010101 	.word	0x01010101
	...

08000798 <__clzdi2>:
 8000798:	b510      	push	{r4, lr}
 800079a:	2900      	cmp	r1, #0
 800079c:	d103      	bne.n	80007a6 <__clzdi2+0xe>
 800079e:	f7ff ffdd 	bl	800075c <__clzsi2>
 80007a2:	3020      	adds	r0, #32
 80007a4:	e002      	b.n	80007ac <__clzdi2+0x14>
 80007a6:	0008      	movs	r0, r1
 80007a8:	f7ff ffd8 	bl	800075c <__clzsi2>
 80007ac:	bd10      	pop	{r4, pc}
 80007ae:	46c0      	nop			@ (mov r8, r8)

080007b0 <debug_print>:
extern UART_HandleTypeDef huart2;

char tx_buf[TX_BUF_SIZE];

// Use this instead of printf()
void debug_print(char *format, ...) {
 80007b0:	b40f      	push	{r0, r1, r2, r3}
 80007b2:	b580      	push	{r7, lr}
 80007b4:	b082      	sub	sp, #8
 80007b6:	af00      	add	r7, sp, #0
	va_list args;
	va_start(args, format);
 80007b8:	2314      	movs	r3, #20
 80007ba:	18fb      	adds	r3, r7, r3
 80007bc:	603b      	str	r3, [r7, #0]

	uint16_t size = vsnprintf(tx_buf, TX_BUF_SIZE, format, args);
 80007be:	683b      	ldr	r3, [r7, #0]
 80007c0:	693a      	ldr	r2, [r7, #16]
 80007c2:	480a      	ldr	r0, [pc, #40]	@ (80007ec <debug_print+0x3c>)
 80007c4:	2164      	movs	r1, #100	@ 0x64
 80007c6:	f003 f97d 	bl	8003ac4 <vsniprintf>
 80007ca:	0002      	movs	r2, r0
 80007cc:	1dbb      	adds	r3, r7, #6
 80007ce:	801a      	strh	r2, [r3, #0]

	//project_print_user_implementation(tx_buf, size);

	HAL_UART_Transmit(&huart2, (uint8_t*) tx_buf, size, 100);
 80007d0:	1dbb      	adds	r3, r7, #6
 80007d2:	881a      	ldrh	r2, [r3, #0]
 80007d4:	4905      	ldr	r1, [pc, #20]	@ (80007ec <debug_print+0x3c>)
 80007d6:	4806      	ldr	r0, [pc, #24]	@ (80007f0 <debug_print+0x40>)
 80007d8:	2364      	movs	r3, #100	@ 0x64
 80007da:	f002 fbf7 	bl	8002fcc <HAL_UART_Transmit>
}
 80007de:	46c0      	nop			@ (mov r8, r8)
 80007e0:	46bd      	mov	sp, r7
 80007e2:	b002      	add	sp, #8
 80007e4:	bc80      	pop	{r7}
 80007e6:	bc08      	pop	{r3}
 80007e8:	b004      	add	sp, #16
 80007ea:	4718      	bx	r3
 80007ec:	20000078 	.word	0x20000078
 80007f0:	20000130 	.word	0x20000130

080007f4 <LM75_Init>:

	return SUCCESS;
}

ErrorStatus LM75_Init(uint8_t device_addr)
{
 80007f4:	b580      	push	{r7, lr}
 80007f6:	b082      	sub	sp, #8
 80007f8:	af00      	add	r7, sp, #0
 80007fa:	0002      	movs	r2, r0
 80007fc:	1dfb      	adds	r3, r7, #7
 80007fe:	701a      	strb	r2, [r3, #0]
	if (HAL_I2C_IsDeviceReady(&LM75_I2C_HANDLER, device_addr, 1, 20000) != HAL_OK)
 8000800:	1dfb      	adds	r3, r7, #7
 8000802:	781b      	ldrb	r3, [r3, #0]
 8000804:	b299      	uxth	r1, r3
 8000806:	4b07      	ldr	r3, [pc, #28]	@ (8000824 <LM75_Init+0x30>)
 8000808:	4807      	ldr	r0, [pc, #28]	@ (8000828 <LM75_Init+0x34>)
 800080a:	2201      	movs	r2, #1
 800080c:	f001 fa10 	bl	8001c30 <HAL_I2C_IsDeviceReady>
 8000810:	1e03      	subs	r3, r0, #0
 8000812:	d001      	beq.n	8000818 <LM75_Init+0x24>
	{
		// Return error
		return ERROR;
 8000814:	2301      	movs	r3, #1
 8000816:	e000      	b.n	800081a <LM75_Init+0x26>
	}

	return SUCCESS;
 8000818:	2300      	movs	r3, #0
}
 800081a:	0018      	movs	r0, r3
 800081c:	46bd      	mov	sp, r7
 800081e:	b002      	add	sp, #8
 8000820:	bd80      	pop	{r7, pc}
 8000822:	46c0      	nop			@ (mov r8, r8)
 8000824:	00004e20 	.word	0x00004e20
 8000828:	200000dc 	.word	0x200000dc

0800082c <LM75_Poll_Temperature>:

float LM75_Poll_Temperature(uint8_t device_addr)
{
 800082c:	b590      	push	{r4, r7, lr}
 800082e:	b089      	sub	sp, #36	@ 0x24
 8000830:	af02      	add	r7, sp, #8
 8000832:	0002      	movs	r2, r0
 8000834:	1dfb      	adds	r3, r7, #7
 8000836:	701a      	strb	r2, [r3, #0]
	uint8_t buf[5];
	int16_t raw_temperature;
	uint8_t negative;
	float temperature;

	buf[0] = LM75_TEMP_REG;
 8000838:	2408      	movs	r4, #8
 800083a:	193b      	adds	r3, r7, r4
 800083c:	2200      	movs	r2, #0
 800083e:	701a      	strb	r2, [r3, #0]
	HAL_I2C_Master_Transmit(&LM75_I2C_HANDLER, device_addr, buf, 1, HAL_MAX_DELAY);
 8000840:	1dfb      	adds	r3, r7, #7
 8000842:	781b      	ldrb	r3, [r3, #0]
 8000844:	b299      	uxth	r1, r3
 8000846:	193a      	adds	r2, r7, r4
 8000848:	482b      	ldr	r0, [pc, #172]	@ (80008f8 <LM75_Poll_Temperature+0xcc>)
 800084a:	2301      	movs	r3, #1
 800084c:	425b      	negs	r3, r3
 800084e:	9300      	str	r3, [sp, #0]
 8000850:	2301      	movs	r3, #1
 8000852:	f000 ffbb 	bl	80017cc <HAL_I2C_Master_Transmit>

	HAL_I2C_Master_Receive(&LM75_I2C_HANDLER, device_addr, buf, 2, HAL_MAX_DELAY);
 8000856:	1dfb      	adds	r3, r7, #7
 8000858:	781b      	ldrb	r3, [r3, #0]
 800085a:	b299      	uxth	r1, r3
 800085c:	193a      	adds	r2, r7, r4
 800085e:	4826      	ldr	r0, [pc, #152]	@ (80008f8 <LM75_Poll_Temperature+0xcc>)
 8000860:	2301      	movs	r3, #1
 8000862:	425b      	negs	r3, r3
 8000864:	9300      	str	r3, [sp, #0]
 8000866:	2302      	movs	r3, #2
 8000868:	f001 f8da 	bl	8001a20 <HAL_I2C_Master_Receive>

	negative = (buf[0] & 0x80) ? 1 : 0;
 800086c:	193b      	adds	r3, r7, r4
 800086e:	781a      	ldrb	r2, [r3, #0]
 8000870:	2313      	movs	r3, #19
 8000872:	18fb      	adds	r3, r7, r3
 8000874:	09d2      	lsrs	r2, r2, #7
 8000876:	701a      	strb	r2, [r3, #0]
	raw_temperature = (buf[0] << 3) | buf[1] >> 5;
 8000878:	193b      	adds	r3, r7, r4
 800087a:	781b      	ldrb	r3, [r3, #0]
 800087c:	00db      	lsls	r3, r3, #3
 800087e:	b219      	sxth	r1, r3
 8000880:	193b      	adds	r3, r7, r4
 8000882:	785b      	ldrb	r3, [r3, #1]
 8000884:	095b      	lsrs	r3, r3, #5
 8000886:	b2db      	uxtb	r3, r3
 8000888:	b21a      	sxth	r2, r3
 800088a:	2010      	movs	r0, #16
 800088c:	183b      	adds	r3, r7, r0
 800088e:	430a      	orrs	r2, r1
 8000890:	801a      	strh	r2, [r3, #0]

    if ((raw_temperature & 0x0400) != 0)                                                         /* check first bit */
 8000892:	0001      	movs	r1, r0
 8000894:	187b      	adds	r3, r7, r1
 8000896:	881b      	ldrh	r3, [r3, #0]
 8000898:	001a      	movs	r2, r3
 800089a:	2380      	movs	r3, #128	@ 0x80
 800089c:	00db      	lsls	r3, r3, #3
 800089e:	4013      	ands	r3, r2
 80008a0:	d015      	beq.n	80008ce <LM75_Poll_Temperature+0xa2>
    {
        raw_temperature = (raw_temperature) | 0xF800U;                                                        /* set negative part */
 80008a2:	187b      	adds	r3, r7, r1
 80008a4:	881b      	ldrh	r3, [r3, #0]
 80008a6:	4a15      	ldr	r2, [pc, #84]	@ (80008fc <LM75_Poll_Temperature+0xd0>)
 80008a8:	4313      	orrs	r3, r2
 80008aa:	b29a      	uxth	r2, r3
 80008ac:	187b      	adds	r3, r7, r1
 80008ae:	801a      	strh	r2, [r3, #0]
        temperature = (float)(-(~raw_temperature + 1)) * 0.125f;                                          /* if negative set convert temp */
 80008b0:	187b      	adds	r3, r7, r1
 80008b2:	2200      	movs	r2, #0
 80008b4:	5e9b      	ldrsh	r3, [r3, r2]
 80008b6:	0018      	movs	r0, r3
 80008b8:	f7ff ff04 	bl	80006c4 <__aeabi_i2f>
 80008bc:	1c03      	adds	r3, r0, #0
 80008be:	21f8      	movs	r1, #248	@ 0xf8
 80008c0:	0589      	lsls	r1, r1, #22
 80008c2:	1c18      	adds	r0, r3, #0
 80008c4:	f7ff fda0 	bl	8000408 <__aeabi_fmul>
 80008c8:	1c03      	adds	r3, r0, #0
 80008ca:	617b      	str	r3, [r7, #20]
 80008cc:	e00e      	b.n	80008ec <LM75_Poll_Temperature+0xc0>
    }
    else
    {
    	temperature = (float)raw_temperature * 0.125f;                                                    /* if positive set convert temp */
 80008ce:	2310      	movs	r3, #16
 80008d0:	18fb      	adds	r3, r7, r3
 80008d2:	2200      	movs	r2, #0
 80008d4:	5e9b      	ldrsh	r3, [r3, r2]
 80008d6:	0018      	movs	r0, r3
 80008d8:	f7ff fef4 	bl	80006c4 <__aeabi_i2f>
 80008dc:	1c03      	adds	r3, r0, #0
 80008de:	21f8      	movs	r1, #248	@ 0xf8
 80008e0:	0589      	lsls	r1, r1, #22
 80008e2:	1c18      	adds	r0, r3, #0
 80008e4:	f7ff fd90 	bl	8000408 <__aeabi_fmul>
 80008e8:	1c03      	adds	r3, r0, #0
 80008ea:	617b      	str	r3, [r7, #20]
    }

	return temperature;
 80008ec:	697b      	ldr	r3, [r7, #20]
}
 80008ee:	1c18      	adds	r0, r3, #0
 80008f0:	46bd      	mov	sp, r7
 80008f2:	b007      	add	sp, #28
 80008f4:	bd90      	pop	{r4, r7, pc}
 80008f6:	46c0      	nop			@ (mov r8, r8)
 80008f8:	200000dc 	.word	0x200000dc
 80008fc:	fffff800 	.word	0xfffff800

08000900 <__NVIC_SystemReset>:
/**
  \brief   System Reset
  \details Initiates a system reset request to reset the MCU.
 */
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
 8000900:	b580      	push	{r7, lr}
 8000902:	af00      	add	r7, sp, #0
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8000904:	f3bf 8f4f 	dsb	sy
}
 8000908:	46c0      	nop			@ (mov r8, r8)
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = ((0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800090a:	4b04      	ldr	r3, [pc, #16]	@ (800091c <__NVIC_SystemReset+0x1c>)
 800090c:	4a04      	ldr	r2, [pc, #16]	@ (8000920 <__NVIC_SystemReset+0x20>)
 800090e:	60da      	str	r2, [r3, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 8000910:	f3bf 8f4f 	dsb	sy
}
 8000914:	46c0      	nop			@ (mov r8, r8)
                 SCB_AIRCR_SYSRESETREQ_Msk);
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
 8000916:	46c0      	nop			@ (mov r8, r8)
 8000918:	e7fd      	b.n	8000916 <__NVIC_SystemReset+0x16>
 800091a:	46c0      	nop			@ (mov r8, r8)
 800091c:	e000ed00 	.word	0xe000ed00
 8000920:	05fa0004 	.word	0x05fa0004

08000924 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000924:	b590      	push	{r4, r7, lr}
 8000926:	b085      	sub	sp, #20
 8000928:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800092a:	f000 fb91 	bl	8001050 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800092e:	f000 f8a7 	bl	8000a80 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000932:	f000 f961 	bl	8000bf8 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000936:	f000 f92b 	bl	8000b90 <MX_USART2_UART_Init>
  MX_I2C2_Init();
 800093a:	f000 f8e9 	bl	8000b10 <MX_I2C2_Init>
  /* USER CODE BEGIN 2 */

	//vt52 Cursor home
	debug_print("\e[H");
 800093e:	4b42      	ldr	r3, [pc, #264]	@ (8000a48 <main+0x124>)
 8000940:	0018      	movs	r0, r3
 8000942:	f7ff ff35 	bl	80007b0 <debug_print>

	//vt52 Clear Screen
	debug_print("\e[J");
 8000946:	4b41      	ldr	r3, [pc, #260]	@ (8000a4c <main+0x128>)
 8000948:	0018      	movs	r0, r3
 800094a:	f7ff ff31 	bl	80007b0 <debug_print>

	//vt52 Turn OFF cursor
	debug_print("\x1b[?25l");
 800094e:	4b40      	ldr	r3, [pc, #256]	@ (8000a50 <main+0x12c>)
 8000950:	0018      	movs	r0, r3
 8000952:	f7ff ff2d 	bl	80007b0 <debug_print>

	debug_print("K23003 I2C Playground\n\r");
 8000956:	4b3f      	ldr	r3, [pc, #252]	@ (8000a54 <main+0x130>)
 8000958:	0018      	movs	r0, r3
 800095a:	f7ff ff29 	bl	80007b0 <debug_print>

	for (address = 0; address < 127; address++) {
 800095e:	230f      	movs	r3, #15
 8000960:	18fb      	adds	r3, r7, r3
 8000962:	2200      	movs	r2, #0
 8000964:	701a      	strb	r2, [r3, #0]
 8000966:	e019      	b.n	800099c <main+0x78>
		if (HAL_I2C_IsDeviceReady(&hi2c2, (uint16_t) (address << 1), 3, 100)
 8000968:	240f      	movs	r4, #15
 800096a:	193b      	adds	r3, r7, r4
 800096c:	781b      	ldrb	r3, [r3, #0]
 800096e:	b29b      	uxth	r3, r3
 8000970:	18db      	adds	r3, r3, r3
 8000972:	b299      	uxth	r1, r3
 8000974:	4838      	ldr	r0, [pc, #224]	@ (8000a58 <main+0x134>)
 8000976:	2364      	movs	r3, #100	@ 0x64
 8000978:	2203      	movs	r2, #3
 800097a:	f001 f959 	bl	8001c30 <HAL_I2C_IsDeviceReady>
 800097e:	1e03      	subs	r3, r0, #0
 8000980:	d106      	bne.n	8000990 <main+0x6c>
				== HAL_OK) {
			debug_print("\n\rI2C Address found: 0x%X", address);
 8000982:	193b      	adds	r3, r7, r4
 8000984:	781a      	ldrb	r2, [r3, #0]
 8000986:	4b35      	ldr	r3, [pc, #212]	@ (8000a5c <main+0x138>)
 8000988:	0011      	movs	r1, r2
 800098a:	0018      	movs	r0, r3
 800098c:	f7ff ff10 	bl	80007b0 <debug_print>
	for (address = 0; address < 127; address++) {
 8000990:	210f      	movs	r1, #15
 8000992:	187b      	adds	r3, r7, r1
 8000994:	781a      	ldrb	r2, [r3, #0]
 8000996:	187b      	adds	r3, r7, r1
 8000998:	3201      	adds	r2, #1
 800099a:	701a      	strb	r2, [r3, #0]
 800099c:	230f      	movs	r3, #15
 800099e:	18fb      	adds	r3, r7, r3
 80009a0:	781b      	ldrb	r3, [r3, #0]
 80009a2:	2b7e      	cmp	r3, #126	@ 0x7e
 80009a4:	d9e0      	bls.n	8000968 <main+0x44>
		}
	}

    debug_print("\e[11;0H");
 80009a6:	4b2e      	ldr	r3, [pc, #184]	@ (8000a60 <main+0x13c>)
 80009a8:	0018      	movs	r0, r3
 80009aa:	f7ff ff01 	bl	80007b0 <debug_print>
	debug_print("LM75 Temperature: ");
 80009ae:	4b2d      	ldr	r3, [pc, #180]	@ (8000a64 <main+0x140>)
 80009b0:	0018      	movs	r0, r3
 80009b2:	f7ff fefd 	bl	80007b0 <debug_print>
    debug_print("\e[12;0H");
 80009b6:	4b2c      	ldr	r3, [pc, #176]	@ (8000a68 <main+0x144>)
 80009b8:	0018      	movs	r0, r3
 80009ba:	f7ff fef9 	bl	80007b0 <debug_print>
	debug_print("ADC Val. (Count): ");
 80009be:	4b2b      	ldr	r3, [pc, #172]	@ (8000a6c <main+0x148>)
 80009c0:	0018      	movs	r0, r3
 80009c2:	f7ff fef5 	bl	80007b0 <debug_print>

	LM75_Init(LM75_ADDR_0);
 80009c6:	2090      	movs	r0, #144	@ 0x90
 80009c8:	f7ff ff14 	bl	80007f4 <LM75_Init>
  /* USER CODE BEGIN WHILE */
	while (1) {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
		if (HAL_GPIO_ReadPin(RST_GPIO_Port, RST_Pin) == 0) {
 80009cc:	4b28      	ldr	r3, [pc, #160]	@ (8000a70 <main+0x14c>)
 80009ce:	2104      	movs	r1, #4
 80009d0:	0018      	movs	r0, r3
 80009d2:	f000 fdff 	bl	80015d4 <HAL_GPIO_ReadPin>
 80009d6:	1e03      	subs	r3, r0, #0
 80009d8:	d104      	bne.n	80009e4 <main+0xc0>
			HAL_Delay(100);
 80009da:	2064      	movs	r0, #100	@ 0x64
 80009dc:	f000 fbbe 	bl	800115c <HAL_Delay>
			NVIC_SystemReset();
 80009e0:	f7ff ff8e 	bl	8000900 <__NVIC_SystemReset>
		}


		// Readout and print temperature
		temperature = LM75_Poll_Temperature(LM75_ADDR_0);
 80009e4:	2090      	movs	r0, #144	@ 0x90
 80009e6:	f7ff ff21 	bl	800082c <LM75_Poll_Temperature>
 80009ea:	1c03      	adds	r3, r0, #0
 80009ec:	60bb      	str	r3, [r7, #8]
		temperature_dec = temperature;
 80009ee:	1dbc      	adds	r4, r7, #6
 80009f0:	68b8      	ldr	r0, [r7, #8]
 80009f2:	f7ff fe47 	bl	8000684 <__aeabi_f2iz>
 80009f6:	0003      	movs	r3, r0
 80009f8:	8023      	strh	r3, [r4, #0]
	    debug_print("\e[11;20H");
 80009fa:	4b1e      	ldr	r3, [pc, #120]	@ (8000a74 <main+0x150>)
 80009fc:	0018      	movs	r0, r3
 80009fe:	f7ff fed7 	bl	80007b0 <debug_print>
		debug_print(" %d", temperature_dec);
 8000a02:	1dbb      	adds	r3, r7, #6
 8000a04:	2200      	movs	r2, #0
 8000a06:	5e9a      	ldrsh	r2, [r3, r2]
 8000a08:	4b1b      	ldr	r3, [pc, #108]	@ (8000a78 <main+0x154>)
 8000a0a:	0011      	movs	r1, r2
 8000a0c:	0018      	movs	r0, r3
 8000a0e:	f7ff fecf 	bl	80007b0 <debug_print>

		// Readout ADC
		adc_value = MCP3021_Read_ADC_Counts(MCP3021_ADDR);
 8000a12:	1d3c      	adds	r4, r7, #4
 8000a14:	209a      	movs	r0, #154	@ 0x9a
 8000a16:	f000 f9b7 	bl	8000d88 <MCP3021_Read_ADC_Counts>
 8000a1a:	0003      	movs	r3, r0
 8000a1c:	8023      	strh	r3, [r4, #0]
	    debug_print("\e[12;20H");
 8000a1e:	4b17      	ldr	r3, [pc, #92]	@ (8000a7c <main+0x158>)
 8000a20:	0018      	movs	r0, r3
 8000a22:	f7ff fec5 	bl	80007b0 <debug_print>
		debug_print(" %d", adc_value);
 8000a26:	1d3b      	adds	r3, r7, #4
 8000a28:	881a      	ldrh	r2, [r3, #0]
 8000a2a:	4b13      	ldr	r3, [pc, #76]	@ (8000a78 <main+0x154>)
 8000a2c:	0011      	movs	r1, r2
 8000a2e:	0018      	movs	r0, r3
 8000a30:	f7ff febe 	bl	80007b0 <debug_print>

		// Toggle GPIO
		HAL_GPIO_TogglePin(LED_GPIO_Port, LED_Pin);
 8000a34:	23a0      	movs	r3, #160	@ 0xa0
 8000a36:	05db      	lsls	r3, r3, #23
 8000a38:	2180      	movs	r1, #128	@ 0x80
 8000a3a:	0018      	movs	r0, r3
 8000a3c:	f000 fe04 	bl	8001648 <HAL_GPIO_TogglePin>
		HAL_Delay(100);
 8000a40:	2064      	movs	r0, #100	@ 0x64
 8000a42:	f000 fb8b 	bl	800115c <HAL_Delay>
		if (HAL_GPIO_ReadPin(RST_GPIO_Port, RST_Pin) == 0) {
 8000a46:	e7c1      	b.n	80009cc <main+0xa8>
 8000a48:	080043f0 	.word	0x080043f0
 8000a4c:	080043f4 	.word	0x080043f4
 8000a50:	080043f8 	.word	0x080043f8
 8000a54:	08004400 	.word	0x08004400
 8000a58:	200000dc 	.word	0x200000dc
 8000a5c:	08004418 	.word	0x08004418
 8000a60:	08004434 	.word	0x08004434
 8000a64:	0800443c 	.word	0x0800443c
 8000a68:	08004450 	.word	0x08004450
 8000a6c:	08004458 	.word	0x08004458
 8000a70:	50001400 	.word	0x50001400
 8000a74:	0800446c 	.word	0x0800446c
 8000a78:	08004478 	.word	0x08004478
 8000a7c:	0800447c 	.word	0x0800447c

08000a80 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000a80:	b590      	push	{r4, r7, lr}
 8000a82:	b093      	sub	sp, #76	@ 0x4c
 8000a84:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000a86:	2410      	movs	r4, #16
 8000a88:	193b      	adds	r3, r7, r4
 8000a8a:	0018      	movs	r0, r3
 8000a8c:	2338      	movs	r3, #56	@ 0x38
 8000a8e:	001a      	movs	r2, r3
 8000a90:	2100      	movs	r1, #0
 8000a92:	f003 f823 	bl	8003adc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000a96:	003b      	movs	r3, r7
 8000a98:	0018      	movs	r0, r3
 8000a9a:	2310      	movs	r3, #16
 8000a9c:	001a      	movs	r2, r3
 8000a9e:	2100      	movs	r1, #0
 8000aa0:	f003 f81c 	bl	8003adc <memset>

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000aa4:	2380      	movs	r3, #128	@ 0x80
 8000aa6:	009b      	lsls	r3, r3, #2
 8000aa8:	0018      	movs	r0, r3
 8000aaa:	f001 fd29 	bl	8002500 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000aae:	193b      	adds	r3, r7, r4
 8000ab0:	2202      	movs	r2, #2
 8000ab2:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000ab4:	193b      	adds	r3, r7, r4
 8000ab6:	2280      	movs	r2, #128	@ 0x80
 8000ab8:	0052      	lsls	r2, r2, #1
 8000aba:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSIDiv = RCC_HSI_DIV1;
 8000abc:	193b      	adds	r3, r7, r4
 8000abe:	2200      	movs	r2, #0
 8000ac0:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000ac2:	193b      	adds	r3, r7, r4
 8000ac4:	2240      	movs	r2, #64	@ 0x40
 8000ac6:	615a      	str	r2, [r3, #20]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000ac8:	193b      	adds	r3, r7, r4
 8000aca:	2200      	movs	r2, #0
 8000acc:	61da      	str	r2, [r3, #28]
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000ace:	193b      	adds	r3, r7, r4
 8000ad0:	0018      	movs	r0, r3
 8000ad2:	f001 fd61 	bl	8002598 <HAL_RCC_OscConfig>
 8000ad6:	1e03      	subs	r3, r0, #0
 8000ad8:	d001      	beq.n	8000ade <SystemClock_Config+0x5e>
  {
    Error_Handler();
 8000ada:	f000 f94f 	bl	8000d7c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000ade:	003b      	movs	r3, r7
 8000ae0:	2207      	movs	r2, #7
 8000ae2:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000ae4:	003b      	movs	r3, r7
 8000ae6:	2200      	movs	r2, #0
 8000ae8:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000aea:	003b      	movs	r3, r7
 8000aec:	2200      	movs	r2, #0
 8000aee:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000af0:	003b      	movs	r3, r7
 8000af2:	2200      	movs	r2, #0
 8000af4:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000af6:	003b      	movs	r3, r7
 8000af8:	2100      	movs	r1, #0
 8000afa:	0018      	movs	r0, r3
 8000afc:	f002 f866 	bl	8002bcc <HAL_RCC_ClockConfig>
 8000b00:	1e03      	subs	r3, r0, #0
 8000b02:	d001      	beq.n	8000b08 <SystemClock_Config+0x88>
  {
    Error_Handler();
 8000b04:	f000 f93a 	bl	8000d7c <Error_Handler>
  }
}
 8000b08:	46c0      	nop			@ (mov r8, r8)
 8000b0a:	46bd      	mov	sp, r7
 8000b0c:	b013      	add	sp, #76	@ 0x4c
 8000b0e:	bd90      	pop	{r4, r7, pc}

08000b10 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 8000b10:	b580      	push	{r7, lr}
 8000b12:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8000b14:	4b1b      	ldr	r3, [pc, #108]	@ (8000b84 <MX_I2C2_Init+0x74>)
 8000b16:	4a1c      	ldr	r2, [pc, #112]	@ (8000b88 <MX_I2C2_Init+0x78>)
 8000b18:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x0010061A;
 8000b1a:	4b1a      	ldr	r3, [pc, #104]	@ (8000b84 <MX_I2C2_Init+0x74>)
 8000b1c:	4a1b      	ldr	r2, [pc, #108]	@ (8000b8c <MX_I2C2_Init+0x7c>)
 8000b1e:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 0;
 8000b20:	4b18      	ldr	r3, [pc, #96]	@ (8000b84 <MX_I2C2_Init+0x74>)
 8000b22:	2200      	movs	r2, #0
 8000b24:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000b26:	4b17      	ldr	r3, [pc, #92]	@ (8000b84 <MX_I2C2_Init+0x74>)
 8000b28:	2201      	movs	r2, #1
 8000b2a:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000b2c:	4b15      	ldr	r3, [pc, #84]	@ (8000b84 <MX_I2C2_Init+0x74>)
 8000b2e:	2200      	movs	r2, #0
 8000b30:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 8000b32:	4b14      	ldr	r3, [pc, #80]	@ (8000b84 <MX_I2C2_Init+0x74>)
 8000b34:	2200      	movs	r2, #0
 8000b36:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000b38:	4b12      	ldr	r3, [pc, #72]	@ (8000b84 <MX_I2C2_Init+0x74>)
 8000b3a:	2200      	movs	r2, #0
 8000b3c:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000b3e:	4b11      	ldr	r3, [pc, #68]	@ (8000b84 <MX_I2C2_Init+0x74>)
 8000b40:	2200      	movs	r2, #0
 8000b42:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000b44:	4b0f      	ldr	r3, [pc, #60]	@ (8000b84 <MX_I2C2_Init+0x74>)
 8000b46:	2200      	movs	r2, #0
 8000b48:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8000b4a:	4b0e      	ldr	r3, [pc, #56]	@ (8000b84 <MX_I2C2_Init+0x74>)
 8000b4c:	0018      	movs	r0, r3
 8000b4e:	f000 fd97 	bl	8001680 <HAL_I2C_Init>
 8000b52:	1e03      	subs	r3, r0, #0
 8000b54:	d001      	beq.n	8000b5a <MX_I2C2_Init+0x4a>
  {
    Error_Handler();
 8000b56:	f000 f911 	bl	8000d7c <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000b5a:	4b0a      	ldr	r3, [pc, #40]	@ (8000b84 <MX_I2C2_Init+0x74>)
 8000b5c:	2100      	movs	r1, #0
 8000b5e:	0018      	movs	r0, r3
 8000b60:	f001 fc36 	bl	80023d0 <HAL_I2CEx_ConfigAnalogFilter>
 8000b64:	1e03      	subs	r3, r0, #0
 8000b66:	d001      	beq.n	8000b6c <MX_I2C2_Init+0x5c>
  {
    Error_Handler();
 8000b68:	f000 f908 	bl	8000d7c <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 8000b6c:	4b05      	ldr	r3, [pc, #20]	@ (8000b84 <MX_I2C2_Init+0x74>)
 8000b6e:	2100      	movs	r1, #0
 8000b70:	0018      	movs	r0, r3
 8000b72:	f001 fc79 	bl	8002468 <HAL_I2CEx_ConfigDigitalFilter>
 8000b76:	1e03      	subs	r3, r0, #0
 8000b78:	d001      	beq.n	8000b7e <MX_I2C2_Init+0x6e>
  {
    Error_Handler();
 8000b7a:	f000 f8ff 	bl	8000d7c <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8000b7e:	46c0      	nop			@ (mov r8, r8)
 8000b80:	46bd      	mov	sp, r7
 8000b82:	bd80      	pop	{r7, pc}
 8000b84:	200000dc 	.word	0x200000dc
 8000b88:	40005800 	.word	0x40005800
 8000b8c:	0010061a 	.word	0x0010061a

08000b90 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000b90:	b580      	push	{r7, lr}
 8000b92:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000b94:	4b16      	ldr	r3, [pc, #88]	@ (8000bf0 <MX_USART2_UART_Init+0x60>)
 8000b96:	4a17      	ldr	r2, [pc, #92]	@ (8000bf4 <MX_USART2_UART_Init+0x64>)
 8000b98:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000b9a:	4b15      	ldr	r3, [pc, #84]	@ (8000bf0 <MX_USART2_UART_Init+0x60>)
 8000b9c:	22e1      	movs	r2, #225	@ 0xe1
 8000b9e:	0252      	lsls	r2, r2, #9
 8000ba0:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000ba2:	4b13      	ldr	r3, [pc, #76]	@ (8000bf0 <MX_USART2_UART_Init+0x60>)
 8000ba4:	2200      	movs	r2, #0
 8000ba6:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000ba8:	4b11      	ldr	r3, [pc, #68]	@ (8000bf0 <MX_USART2_UART_Init+0x60>)
 8000baa:	2200      	movs	r2, #0
 8000bac:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000bae:	4b10      	ldr	r3, [pc, #64]	@ (8000bf0 <MX_USART2_UART_Init+0x60>)
 8000bb0:	2200      	movs	r2, #0
 8000bb2:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000bb4:	4b0e      	ldr	r3, [pc, #56]	@ (8000bf0 <MX_USART2_UART_Init+0x60>)
 8000bb6:	220c      	movs	r2, #12
 8000bb8:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000bba:	4b0d      	ldr	r3, [pc, #52]	@ (8000bf0 <MX_USART2_UART_Init+0x60>)
 8000bbc:	2200      	movs	r2, #0
 8000bbe:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000bc0:	4b0b      	ldr	r3, [pc, #44]	@ (8000bf0 <MX_USART2_UART_Init+0x60>)
 8000bc2:	2200      	movs	r2, #0
 8000bc4:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000bc6:	4b0a      	ldr	r3, [pc, #40]	@ (8000bf0 <MX_USART2_UART_Init+0x60>)
 8000bc8:	2200      	movs	r2, #0
 8000bca:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000bcc:	4b08      	ldr	r3, [pc, #32]	@ (8000bf0 <MX_USART2_UART_Init+0x60>)
 8000bce:	2200      	movs	r2, #0
 8000bd0:	625a      	str	r2, [r3, #36]	@ 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000bd2:	4b07      	ldr	r3, [pc, #28]	@ (8000bf0 <MX_USART2_UART_Init+0x60>)
 8000bd4:	2200      	movs	r2, #0
 8000bd6:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000bd8:	4b05      	ldr	r3, [pc, #20]	@ (8000bf0 <MX_USART2_UART_Init+0x60>)
 8000bda:	0018      	movs	r0, r3
 8000bdc:	f002 f9a0 	bl	8002f20 <HAL_UART_Init>
 8000be0:	1e03      	subs	r3, r0, #0
 8000be2:	d001      	beq.n	8000be8 <MX_USART2_UART_Init+0x58>
  {
    Error_Handler();
 8000be4:	f000 f8ca 	bl	8000d7c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000be8:	46c0      	nop			@ (mov r8, r8)
 8000bea:	46bd      	mov	sp, r7
 8000bec:	bd80      	pop	{r7, pc}
 8000bee:	46c0      	nop			@ (mov r8, r8)
 8000bf0:	20000130 	.word	0x20000130
 8000bf4:	40004400 	.word	0x40004400

08000bf8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000bf8:	b590      	push	{r4, r7, lr}
 8000bfa:	b08b      	sub	sp, #44	@ 0x2c
 8000bfc:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000bfe:	2414      	movs	r4, #20
 8000c00:	193b      	adds	r3, r7, r4
 8000c02:	0018      	movs	r0, r3
 8000c04:	2314      	movs	r3, #20
 8000c06:	001a      	movs	r2, r3
 8000c08:	2100      	movs	r1, #0
 8000c0a:	f002 ff67 	bl	8003adc <memset>
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000c0e:	4b57      	ldr	r3, [pc, #348]	@ (8000d6c <MX_GPIO_Init+0x174>)
 8000c10:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8000c12:	4b56      	ldr	r3, [pc, #344]	@ (8000d6c <MX_GPIO_Init+0x174>)
 8000c14:	2102      	movs	r1, #2
 8000c16:	430a      	orrs	r2, r1
 8000c18:	635a      	str	r2, [r3, #52]	@ 0x34
 8000c1a:	4b54      	ldr	r3, [pc, #336]	@ (8000d6c <MX_GPIO_Init+0x174>)
 8000c1c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8000c1e:	2202      	movs	r2, #2
 8000c20:	4013      	ands	r3, r2
 8000c22:	613b      	str	r3, [r7, #16]
 8000c24:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000c26:	4b51      	ldr	r3, [pc, #324]	@ (8000d6c <MX_GPIO_Init+0x174>)
 8000c28:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8000c2a:	4b50      	ldr	r3, [pc, #320]	@ (8000d6c <MX_GPIO_Init+0x174>)
 8000c2c:	2104      	movs	r1, #4
 8000c2e:	430a      	orrs	r2, r1
 8000c30:	635a      	str	r2, [r3, #52]	@ 0x34
 8000c32:	4b4e      	ldr	r3, [pc, #312]	@ (8000d6c <MX_GPIO_Init+0x174>)
 8000c34:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8000c36:	2204      	movs	r2, #4
 8000c38:	4013      	ands	r3, r2
 8000c3a:	60fb      	str	r3, [r7, #12]
 8000c3c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000c3e:	4b4b      	ldr	r3, [pc, #300]	@ (8000d6c <MX_GPIO_Init+0x174>)
 8000c40:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8000c42:	4b4a      	ldr	r3, [pc, #296]	@ (8000d6c <MX_GPIO_Init+0x174>)
 8000c44:	2120      	movs	r1, #32
 8000c46:	430a      	orrs	r2, r1
 8000c48:	635a      	str	r2, [r3, #52]	@ 0x34
 8000c4a:	4b48      	ldr	r3, [pc, #288]	@ (8000d6c <MX_GPIO_Init+0x174>)
 8000c4c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8000c4e:	2220      	movs	r2, #32
 8000c50:	4013      	ands	r3, r2
 8000c52:	60bb      	str	r3, [r7, #8]
 8000c54:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c56:	4b45      	ldr	r3, [pc, #276]	@ (8000d6c <MX_GPIO_Init+0x174>)
 8000c58:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8000c5a:	4b44      	ldr	r3, [pc, #272]	@ (8000d6c <MX_GPIO_Init+0x174>)
 8000c5c:	2101      	movs	r1, #1
 8000c5e:	430a      	orrs	r2, r1
 8000c60:	635a      	str	r2, [r3, #52]	@ 0x34
 8000c62:	4b42      	ldr	r3, [pc, #264]	@ (8000d6c <MX_GPIO_Init+0x174>)
 8000c64:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8000c66:	2201      	movs	r2, #1
 8000c68:	4013      	ands	r3, r2
 8000c6a:	607b      	str	r3, [r7, #4]
 8000c6c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(WP_GPIO_Port, WP_Pin, GPIO_PIN_RESET);
 8000c6e:	2380      	movs	r3, #128	@ 0x80
 8000c70:	009b      	lsls	r3, r3, #2
 8000c72:	483f      	ldr	r0, [pc, #252]	@ (8000d70 <MX_GPIO_Init+0x178>)
 8000c74:	2200      	movs	r2, #0
 8000c76:	0019      	movs	r1, r3
 8000c78:	f000 fcc9 	bl	800160e <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 8000c7c:	23a0      	movs	r3, #160	@ 0xa0
 8000c7e:	05db      	lsls	r3, r3, #23
 8000c80:	2200      	movs	r2, #0
 8000c82:	2180      	movs	r1, #128	@ 0x80
 8000c84:	0018      	movs	r0, r3
 8000c86:	f000 fcc2 	bl	800160e <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, GPIO_PIN_RESET);
 8000c8a:	4b3a      	ldr	r3, [pc, #232]	@ (8000d74 <MX_GPIO_Init+0x17c>)
 8000c8c:	2200      	movs	r2, #0
 8000c8e:	2140      	movs	r1, #64	@ 0x40
 8000c90:	0018      	movs	r0, r3
 8000c92:	f000 fcbc 	bl	800160e <HAL_GPIO_WritePin>

  /*Configure GPIO pin : WP_Pin */
  GPIO_InitStruct.Pin = WP_Pin;
 8000c96:	193b      	adds	r3, r7, r4
 8000c98:	2280      	movs	r2, #128	@ 0x80
 8000c9a:	0092      	lsls	r2, r2, #2
 8000c9c:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c9e:	193b      	adds	r3, r7, r4
 8000ca0:	2201      	movs	r2, #1
 8000ca2:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ca4:	193b      	adds	r3, r7, r4
 8000ca6:	2200      	movs	r2, #0
 8000ca8:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000caa:	193b      	adds	r3, r7, r4
 8000cac:	2200      	movs	r2, #0
 8000cae:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(WP_GPIO_Port, &GPIO_InitStruct);
 8000cb0:	193b      	adds	r3, r7, r4
 8000cb2:	4a2f      	ldr	r2, [pc, #188]	@ (8000d70 <MX_GPIO_Init+0x178>)
 8000cb4:	0019      	movs	r1, r3
 8000cb6:	0010      	movs	r0, r2
 8000cb8:	f000 fb28 	bl	800130c <HAL_GPIO_Init>

  /*Configure GPIO pin : RST_Pin */
  GPIO_InitStruct.Pin = RST_Pin;
 8000cbc:	193b      	adds	r3, r7, r4
 8000cbe:	2204      	movs	r2, #4
 8000cc0:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000cc2:	193b      	adds	r3, r7, r4
 8000cc4:	2200      	movs	r2, #0
 8000cc6:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000cc8:	193b      	adds	r3, r7, r4
 8000cca:	2201      	movs	r2, #1
 8000ccc:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(RST_GPIO_Port, &GPIO_InitStruct);
 8000cce:	193b      	adds	r3, r7, r4
 8000cd0:	4a29      	ldr	r2, [pc, #164]	@ (8000d78 <MX_GPIO_Init+0x180>)
 8000cd2:	0019      	movs	r1, r3
 8000cd4:	0010      	movs	r0, r2
 8000cd6:	f000 fb19 	bl	800130c <HAL_GPIO_Init>

  /*Configure GPIO pin : LED_Pin */
  GPIO_InitStruct.Pin = LED_Pin;
 8000cda:	193b      	adds	r3, r7, r4
 8000cdc:	2280      	movs	r2, #128	@ 0x80
 8000cde:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000ce0:	193b      	adds	r3, r7, r4
 8000ce2:	2201      	movs	r2, #1
 8000ce4:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ce6:	193b      	adds	r3, r7, r4
 8000ce8:	2200      	movs	r2, #0
 8000cea:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000cec:	193b      	adds	r3, r7, r4
 8000cee:	2200      	movs	r2, #0
 8000cf0:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);
 8000cf2:	193a      	adds	r2, r7, r4
 8000cf4:	23a0      	movs	r3, #160	@ 0xa0
 8000cf6:	05db      	lsls	r3, r3, #23
 8000cf8:	0011      	movs	r1, r2
 8000cfa:	0018      	movs	r0, r3
 8000cfc:	f000 fb06 	bl	800130c <HAL_GPIO_Init>

  /*Configure GPIO pin : LD3_Pin */
  GPIO_InitStruct.Pin = LD3_Pin;
 8000d00:	193b      	adds	r3, r7, r4
 8000d02:	2240      	movs	r2, #64	@ 0x40
 8000d04:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000d06:	193b      	adds	r3, r7, r4
 8000d08:	2201      	movs	r2, #1
 8000d0a:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d0c:	193b      	adds	r3, r7, r4
 8000d0e:	2200      	movs	r2, #0
 8000d10:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d12:	193b      	adds	r3, r7, r4
 8000d14:	2200      	movs	r2, #0
 8000d16:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(LD3_GPIO_Port, &GPIO_InitStruct);
 8000d18:	193b      	adds	r3, r7, r4
 8000d1a:	4a16      	ldr	r2, [pc, #88]	@ (8000d74 <MX_GPIO_Init+0x17c>)
 8000d1c:	0019      	movs	r1, r3
 8000d1e:	0010      	movs	r0, r2
 8000d20:	f000 faf4 	bl	800130c <HAL_GPIO_Init>

  /*Configure GPIO pin : INT_Pin */
  GPIO_InitStruct.Pin = INT_Pin;
 8000d24:	193b      	adds	r3, r7, r4
 8000d26:	2280      	movs	r2, #128	@ 0x80
 8000d28:	00d2      	lsls	r2, r2, #3
 8000d2a:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000d2c:	193b      	adds	r3, r7, r4
 8000d2e:	2200      	movs	r2, #0
 8000d30:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d32:	193b      	adds	r3, r7, r4
 8000d34:	2200      	movs	r2, #0
 8000d36:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(INT_GPIO_Port, &GPIO_InitStruct);
 8000d38:	193a      	adds	r2, r7, r4
 8000d3a:	23a0      	movs	r3, #160	@ 0xa0
 8000d3c:	05db      	lsls	r3, r3, #23
 8000d3e:	0011      	movs	r1, r2
 8000d40:	0018      	movs	r0, r3
 8000d42:	f000 fae3 	bl	800130c <HAL_GPIO_Init>

  /*Configure GPIO pin : OS_Pin */
  GPIO_InitStruct.Pin = OS_Pin;
 8000d46:	193b      	adds	r3, r7, r4
 8000d48:	2210      	movs	r2, #16
 8000d4a:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000d4c:	193b      	adds	r3, r7, r4
 8000d4e:	2200      	movs	r2, #0
 8000d50:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d52:	193b      	adds	r3, r7, r4
 8000d54:	2200      	movs	r2, #0
 8000d56:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(OS_GPIO_Port, &GPIO_InitStruct);
 8000d58:	193b      	adds	r3, r7, r4
 8000d5a:	4a05      	ldr	r2, [pc, #20]	@ (8000d70 <MX_GPIO_Init+0x178>)
 8000d5c:	0019      	movs	r1, r3
 8000d5e:	0010      	movs	r0, r2
 8000d60:	f000 fad4 	bl	800130c <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000d64:	46c0      	nop			@ (mov r8, r8)
 8000d66:	46bd      	mov	sp, r7
 8000d68:	b00b      	add	sp, #44	@ 0x2c
 8000d6a:	bd90      	pop	{r4, r7, pc}
 8000d6c:	40021000 	.word	0x40021000
 8000d70:	50000400 	.word	0x50000400
 8000d74:	50000800 	.word	0x50000800
 8000d78:	50001400 	.word	0x50001400

08000d7c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000d7c:	b580      	push	{r7, lr}
 8000d7e:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8000d80:	b672      	cpsid	i
}
 8000d82:	46c0      	nop			@ (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 8000d84:	46c0      	nop			@ (mov r8, r8)
 8000d86:	e7fd      	b.n	8000d84 <Error_Handler+0x8>

08000d88 <MCP3021_Read_ADC_Counts>:

// Local Function Prototypes

// Functions
uint16_t MCP3021_Read_ADC_Counts(uint8_t device_addr)
{
 8000d88:	b590      	push	{r4, r7, lr}
 8000d8a:	b087      	sub	sp, #28
 8000d8c:	af02      	add	r7, sp, #8
 8000d8e:	0002      	movs	r2, r0
 8000d90:	1dfb      	adds	r3, r7, #7
 8000d92:	701a      	strb	r2, [r3, #0]
	uint8_t buf[2];
	uint16_t adc_counts;

	HAL_I2C_Master_Receive(&MCP3021_I2C_HANDLER, device_addr, buf, 2, HAL_MAX_DELAY);
 8000d94:	1dfb      	adds	r3, r7, #7
 8000d96:	781b      	ldrb	r3, [r3, #0]
 8000d98:	b299      	uxth	r1, r3
 8000d9a:	240c      	movs	r4, #12
 8000d9c:	193a      	adds	r2, r7, r4
 8000d9e:	480e      	ldr	r0, [pc, #56]	@ (8000dd8 <MCP3021_Read_ADC_Counts+0x50>)
 8000da0:	2301      	movs	r3, #1
 8000da2:	425b      	negs	r3, r3
 8000da4:	9300      	str	r3, [sp, #0]
 8000da6:	2302      	movs	r3, #2
 8000da8:	f000 fe3a 	bl	8001a20 <HAL_I2C_Master_Receive>

	adc_counts = (buf[0] << 6) | (buf[1] >> 2);
 8000dac:	0021      	movs	r1, r4
 8000dae:	187b      	adds	r3, r7, r1
 8000db0:	781b      	ldrb	r3, [r3, #0]
 8000db2:	019b      	lsls	r3, r3, #6
 8000db4:	b21a      	sxth	r2, r3
 8000db6:	187b      	adds	r3, r7, r1
 8000db8:	785b      	ldrb	r3, [r3, #1]
 8000dba:	089b      	lsrs	r3, r3, #2
 8000dbc:	b2db      	uxtb	r3, r3
 8000dbe:	b21b      	sxth	r3, r3
 8000dc0:	4313      	orrs	r3, r2
 8000dc2:	b21a      	sxth	r2, r3
 8000dc4:	210e      	movs	r1, #14
 8000dc6:	187b      	adds	r3, r7, r1
 8000dc8:	801a      	strh	r2, [r3, #0]

	return adc_counts;
 8000dca:	187b      	adds	r3, r7, r1
 8000dcc:	881b      	ldrh	r3, [r3, #0]
}
 8000dce:	0018      	movs	r0, r3
 8000dd0:	46bd      	mov	sp, r7
 8000dd2:	b005      	add	sp, #20
 8000dd4:	bd90      	pop	{r4, r7, pc}
 8000dd6:	46c0      	nop			@ (mov r8, r8)
 8000dd8:	200000dc 	.word	0x200000dc

08000ddc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000ddc:	b580      	push	{r7, lr}
 8000dde:	b082      	sub	sp, #8
 8000de0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000de2:	4b0f      	ldr	r3, [pc, #60]	@ (8000e20 <HAL_MspInit+0x44>)
 8000de4:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8000de6:	4b0e      	ldr	r3, [pc, #56]	@ (8000e20 <HAL_MspInit+0x44>)
 8000de8:	2101      	movs	r1, #1
 8000dea:	430a      	orrs	r2, r1
 8000dec:	641a      	str	r2, [r3, #64]	@ 0x40
 8000dee:	4b0c      	ldr	r3, [pc, #48]	@ (8000e20 <HAL_MspInit+0x44>)
 8000df0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000df2:	2201      	movs	r2, #1
 8000df4:	4013      	ands	r3, r2
 8000df6:	607b      	str	r3, [r7, #4]
 8000df8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000dfa:	4b09      	ldr	r3, [pc, #36]	@ (8000e20 <HAL_MspInit+0x44>)
 8000dfc:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8000dfe:	4b08      	ldr	r3, [pc, #32]	@ (8000e20 <HAL_MspInit+0x44>)
 8000e00:	2180      	movs	r1, #128	@ 0x80
 8000e02:	0549      	lsls	r1, r1, #21
 8000e04:	430a      	orrs	r2, r1
 8000e06:	63da      	str	r2, [r3, #60]	@ 0x3c
 8000e08:	4b05      	ldr	r3, [pc, #20]	@ (8000e20 <HAL_MspInit+0x44>)
 8000e0a:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8000e0c:	2380      	movs	r3, #128	@ 0x80
 8000e0e:	055b      	lsls	r3, r3, #21
 8000e10:	4013      	ands	r3, r2
 8000e12:	603b      	str	r3, [r7, #0]
 8000e14:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000e16:	46c0      	nop			@ (mov r8, r8)
 8000e18:	46bd      	mov	sp, r7
 8000e1a:	b002      	add	sp, #8
 8000e1c:	bd80      	pop	{r7, pc}
 8000e1e:	46c0      	nop			@ (mov r8, r8)
 8000e20:	40021000 	.word	0x40021000

08000e24 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000e24:	b590      	push	{r4, r7, lr}
 8000e26:	b08b      	sub	sp, #44	@ 0x2c
 8000e28:	af00      	add	r7, sp, #0
 8000e2a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e2c:	2414      	movs	r4, #20
 8000e2e:	193b      	adds	r3, r7, r4
 8000e30:	0018      	movs	r0, r3
 8000e32:	2314      	movs	r3, #20
 8000e34:	001a      	movs	r2, r3
 8000e36:	2100      	movs	r1, #0
 8000e38:	f002 fe50 	bl	8003adc <memset>
  if(hi2c->Instance==I2C2)
 8000e3c:	687b      	ldr	r3, [r7, #4]
 8000e3e:	681b      	ldr	r3, [r3, #0]
 8000e40:	4a1c      	ldr	r2, [pc, #112]	@ (8000eb4 <HAL_I2C_MspInit+0x90>)
 8000e42:	4293      	cmp	r3, r2
 8000e44:	d131      	bne.n	8000eaa <HAL_I2C_MspInit+0x86>
  {
  /* USER CODE BEGIN I2C2_MspInit 0 */

  /* USER CODE END I2C2_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e46:	4b1c      	ldr	r3, [pc, #112]	@ (8000eb8 <HAL_I2C_MspInit+0x94>)
 8000e48:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8000e4a:	4b1b      	ldr	r3, [pc, #108]	@ (8000eb8 <HAL_I2C_MspInit+0x94>)
 8000e4c:	2101      	movs	r1, #1
 8000e4e:	430a      	orrs	r2, r1
 8000e50:	635a      	str	r2, [r3, #52]	@ 0x34
 8000e52:	4b19      	ldr	r3, [pc, #100]	@ (8000eb8 <HAL_I2C_MspInit+0x94>)
 8000e54:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8000e56:	2201      	movs	r2, #1
 8000e58:	4013      	ands	r3, r2
 8000e5a:	613b      	str	r3, [r7, #16]
 8000e5c:	693b      	ldr	r3, [r7, #16]
    /**I2C2 GPIO Configuration
    PA11 [PA9]     ------> I2C2_SCL
    PA12 [PA10]     ------> I2C2_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8000e5e:	193b      	adds	r3, r7, r4
 8000e60:	22c0      	movs	r2, #192	@ 0xc0
 8000e62:	0152      	lsls	r2, r2, #5
 8000e64:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000e66:	0021      	movs	r1, r4
 8000e68:	187b      	adds	r3, r7, r1
 8000e6a:	2212      	movs	r2, #18
 8000e6c:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e6e:	187b      	adds	r3, r7, r1
 8000e70:	2200      	movs	r2, #0
 8000e72:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e74:	187b      	adds	r3, r7, r1
 8000e76:	2200      	movs	r2, #0
 8000e78:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF6_I2C2;
 8000e7a:	187b      	adds	r3, r7, r1
 8000e7c:	2206      	movs	r2, #6
 8000e7e:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e80:	187a      	adds	r2, r7, r1
 8000e82:	23a0      	movs	r3, #160	@ 0xa0
 8000e84:	05db      	lsls	r3, r3, #23
 8000e86:	0011      	movs	r1, r2
 8000e88:	0018      	movs	r0, r3
 8000e8a:	f000 fa3f 	bl	800130c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 8000e8e:	4b0a      	ldr	r3, [pc, #40]	@ (8000eb8 <HAL_I2C_MspInit+0x94>)
 8000e90:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8000e92:	4b09      	ldr	r3, [pc, #36]	@ (8000eb8 <HAL_I2C_MspInit+0x94>)
 8000e94:	2180      	movs	r1, #128	@ 0x80
 8000e96:	03c9      	lsls	r1, r1, #15
 8000e98:	430a      	orrs	r2, r1
 8000e9a:	63da      	str	r2, [r3, #60]	@ 0x3c
 8000e9c:	4b06      	ldr	r3, [pc, #24]	@ (8000eb8 <HAL_I2C_MspInit+0x94>)
 8000e9e:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8000ea0:	2380      	movs	r3, #128	@ 0x80
 8000ea2:	03db      	lsls	r3, r3, #15
 8000ea4:	4013      	ands	r3, r2
 8000ea6:	60fb      	str	r3, [r7, #12]
 8000ea8:	68fb      	ldr	r3, [r7, #12]

  /* USER CODE END I2C2_MspInit 1 */

  }

}
 8000eaa:	46c0      	nop			@ (mov r8, r8)
 8000eac:	46bd      	mov	sp, r7
 8000eae:	b00b      	add	sp, #44	@ 0x2c
 8000eb0:	bd90      	pop	{r4, r7, pc}
 8000eb2:	46c0      	nop			@ (mov r8, r8)
 8000eb4:	40005800 	.word	0x40005800
 8000eb8:	40021000 	.word	0x40021000

08000ebc <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000ebc:	b590      	push	{r4, r7, lr}
 8000ebe:	b08b      	sub	sp, #44	@ 0x2c
 8000ec0:	af00      	add	r7, sp, #0
 8000ec2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ec4:	2414      	movs	r4, #20
 8000ec6:	193b      	adds	r3, r7, r4
 8000ec8:	0018      	movs	r0, r3
 8000eca:	2314      	movs	r3, #20
 8000ecc:	001a      	movs	r2, r3
 8000ece:	2100      	movs	r1, #0
 8000ed0:	f002 fe04 	bl	8003adc <memset>
  if(huart->Instance==USART2)
 8000ed4:	687b      	ldr	r3, [r7, #4]
 8000ed6:	681b      	ldr	r3, [r3, #0]
 8000ed8:	4a1b      	ldr	r2, [pc, #108]	@ (8000f48 <HAL_UART_MspInit+0x8c>)
 8000eda:	4293      	cmp	r3, r2
 8000edc:	d130      	bne.n	8000f40 <HAL_UART_MspInit+0x84>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000ede:	4b1b      	ldr	r3, [pc, #108]	@ (8000f4c <HAL_UART_MspInit+0x90>)
 8000ee0:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8000ee2:	4b1a      	ldr	r3, [pc, #104]	@ (8000f4c <HAL_UART_MspInit+0x90>)
 8000ee4:	2180      	movs	r1, #128	@ 0x80
 8000ee6:	0289      	lsls	r1, r1, #10
 8000ee8:	430a      	orrs	r2, r1
 8000eea:	63da      	str	r2, [r3, #60]	@ 0x3c
 8000eec:	4b17      	ldr	r3, [pc, #92]	@ (8000f4c <HAL_UART_MspInit+0x90>)
 8000eee:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8000ef0:	2380      	movs	r3, #128	@ 0x80
 8000ef2:	029b      	lsls	r3, r3, #10
 8000ef4:	4013      	ands	r3, r2
 8000ef6:	613b      	str	r3, [r7, #16]
 8000ef8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000efa:	4b14      	ldr	r3, [pc, #80]	@ (8000f4c <HAL_UART_MspInit+0x90>)
 8000efc:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8000efe:	4b13      	ldr	r3, [pc, #76]	@ (8000f4c <HAL_UART_MspInit+0x90>)
 8000f00:	2101      	movs	r1, #1
 8000f02:	430a      	orrs	r2, r1
 8000f04:	635a      	str	r2, [r3, #52]	@ 0x34
 8000f06:	4b11      	ldr	r3, [pc, #68]	@ (8000f4c <HAL_UART_MspInit+0x90>)
 8000f08:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8000f0a:	2201      	movs	r2, #1
 8000f0c:	4013      	ands	r3, r2
 8000f0e:	60fb      	str	r3, [r7, #12]
 8000f10:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = T_VCP_TX_Pin|T_VCP_RX_Pin;
 8000f12:	0021      	movs	r1, r4
 8000f14:	187b      	adds	r3, r7, r1
 8000f16:	220c      	movs	r2, #12
 8000f18:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f1a:	187b      	adds	r3, r7, r1
 8000f1c:	2202      	movs	r2, #2
 8000f1e:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000f20:	187b      	adds	r3, r7, r1
 8000f22:	2201      	movs	r2, #1
 8000f24:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f26:	187b      	adds	r3, r7, r1
 8000f28:	2200      	movs	r2, #0
 8000f2a:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART2;
 8000f2c:	187b      	adds	r3, r7, r1
 8000f2e:	2201      	movs	r2, #1
 8000f30:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f32:	187a      	adds	r2, r7, r1
 8000f34:	23a0      	movs	r3, #160	@ 0xa0
 8000f36:	05db      	lsls	r3, r3, #23
 8000f38:	0011      	movs	r1, r2
 8000f3a:	0018      	movs	r0, r3
 8000f3c:	f000 f9e6 	bl	800130c <HAL_GPIO_Init>

  /* USER CODE END USART2_MspInit 1 */

  }

}
 8000f40:	46c0      	nop			@ (mov r8, r8)
 8000f42:	46bd      	mov	sp, r7
 8000f44:	b00b      	add	sp, #44	@ 0x2c
 8000f46:	bd90      	pop	{r4, r7, pc}
 8000f48:	40004400 	.word	0x40004400
 8000f4c:	40021000 	.word	0x40021000

08000f50 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000f50:	b580      	push	{r7, lr}
 8000f52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
	while (1) {
 8000f54:	46c0      	nop			@ (mov r8, r8)
 8000f56:	e7fd      	b.n	8000f54 <NMI_Handler+0x4>

08000f58 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000f58:	b580      	push	{r7, lr}
 8000f5a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000f5c:	46c0      	nop			@ (mov r8, r8)
 8000f5e:	e7fd      	b.n	8000f5c <HardFault_Handler+0x4>

08000f60 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000f60:	b580      	push	{r7, lr}
 8000f62:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8000f64:	46c0      	nop			@ (mov r8, r8)
 8000f66:	46bd      	mov	sp, r7
 8000f68:	bd80      	pop	{r7, pc}

08000f6a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000f6a:	b580      	push	{r7, lr}
 8000f6c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000f6e:	46c0      	nop			@ (mov r8, r8)
 8000f70:	46bd      	mov	sp, r7
 8000f72:	bd80      	pop	{r7, pc}

08000f74 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000f74:	b580      	push	{r7, lr}
 8000f76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000f78:	f000 f8d4 	bl	8001124 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000f7c:	46c0      	nop			@ (mov r8, r8)
 8000f7e:	46bd      	mov	sp, r7
 8000f80:	bd80      	pop	{r7, pc}
	...

08000f84 <_sbrk>:
 * reserved size, please increase the '_Min_Stack_Size'.
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void* _sbrk(ptrdiff_t incr) {
 8000f84:	b580      	push	{r7, lr}
 8000f86:	b086      	sub	sp, #24
 8000f88:	af00      	add	r7, sp, #0
 8000f8a:	6078      	str	r0, [r7, #4]
	extern uint8_t _end; /* Symbol defined in the linker script */
	extern uint8_t _estack; /* Symbol defined in the linker script */
	extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
	const uint32_t stack_limit = (uint32_t) &_estack
 8000f8c:	4a14      	ldr	r2, [pc, #80]	@ (8000fe0 <_sbrk+0x5c>)
			- (uint32_t) &_Min_Stack_Size;
 8000f8e:	4b15      	ldr	r3, [pc, #84]	@ (8000fe4 <_sbrk+0x60>)
	const uint32_t stack_limit = (uint32_t) &_estack
 8000f90:	1ad3      	subs	r3, r2, r3
 8000f92:	617b      	str	r3, [r7, #20]
	const uint8_t *max_heap = (uint8_t*) stack_limit;
 8000f94:	697b      	ldr	r3, [r7, #20]
 8000f96:	613b      	str	r3, [r7, #16]
	uint8_t *prev_heap_end;

	/* Initialize heap end at first call */
	if (NULL == __sbrk_heap_end) {
 8000f98:	4b13      	ldr	r3, [pc, #76]	@ (8000fe8 <_sbrk+0x64>)
 8000f9a:	681b      	ldr	r3, [r3, #0]
 8000f9c:	2b00      	cmp	r3, #0
 8000f9e:	d102      	bne.n	8000fa6 <_sbrk+0x22>
		__sbrk_heap_end = &_end;
 8000fa0:	4b11      	ldr	r3, [pc, #68]	@ (8000fe8 <_sbrk+0x64>)
 8000fa2:	4a12      	ldr	r2, [pc, #72]	@ (8000fec <_sbrk+0x68>)
 8000fa4:	601a      	str	r2, [r3, #0]
	}

	/* Protect heap from growing into the reserved MSP stack */
	if (__sbrk_heap_end + incr > max_heap) {
 8000fa6:	4b10      	ldr	r3, [pc, #64]	@ (8000fe8 <_sbrk+0x64>)
 8000fa8:	681a      	ldr	r2, [r3, #0]
 8000faa:	687b      	ldr	r3, [r7, #4]
 8000fac:	18d3      	adds	r3, r2, r3
 8000fae:	693a      	ldr	r2, [r7, #16]
 8000fb0:	429a      	cmp	r2, r3
 8000fb2:	d207      	bcs.n	8000fc4 <_sbrk+0x40>
		errno = ENOMEM;
 8000fb4:	f002 fd9a 	bl	8003aec <__errno>
 8000fb8:	0003      	movs	r3, r0
 8000fba:	220c      	movs	r2, #12
 8000fbc:	601a      	str	r2, [r3, #0]
		return (void*) -1;
 8000fbe:	2301      	movs	r3, #1
 8000fc0:	425b      	negs	r3, r3
 8000fc2:	e009      	b.n	8000fd8 <_sbrk+0x54>
	}

	prev_heap_end = __sbrk_heap_end;
 8000fc4:	4b08      	ldr	r3, [pc, #32]	@ (8000fe8 <_sbrk+0x64>)
 8000fc6:	681b      	ldr	r3, [r3, #0]
 8000fc8:	60fb      	str	r3, [r7, #12]
	__sbrk_heap_end += incr;
 8000fca:	4b07      	ldr	r3, [pc, #28]	@ (8000fe8 <_sbrk+0x64>)
 8000fcc:	681a      	ldr	r2, [r3, #0]
 8000fce:	687b      	ldr	r3, [r7, #4]
 8000fd0:	18d2      	adds	r2, r2, r3
 8000fd2:	4b05      	ldr	r3, [pc, #20]	@ (8000fe8 <_sbrk+0x64>)
 8000fd4:	601a      	str	r2, [r3, #0]

	return (void*) prev_heap_end;
 8000fd6:	68fb      	ldr	r3, [r7, #12]
}
 8000fd8:	0018      	movs	r0, r3
 8000fda:	46bd      	mov	sp, r7
 8000fdc:	b006      	add	sp, #24
 8000fde:	bd80      	pop	{r7, pc}
 8000fe0:	20002000 	.word	0x20002000
 8000fe4:	00000400 	.word	0x00000400
 8000fe8:	200001c4 	.word	0x200001c4
 8000fec:	20000318 	.word	0x20000318

08000ff0 <SystemInit>:
/**
 * @brief  Setup the microcontroller system.
 * @param  None
 * @retval None
 */
void SystemInit(void) {
 8000ff0:	b580      	push	{r7, lr}
 8000ff2:	af00      	add	r7, sp, #0
	/* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000ff4:	46c0      	nop			@ (mov r8, r8)
 8000ff6:	46bd      	mov	sp, r7
 8000ff8:	bd80      	pop	{r7, pc}
	...

08000ffc <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000ffc:	480d      	ldr	r0, [pc, #52]	@ (8001034 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000ffe:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
  bl  SystemInit
 8001000:	f7ff fff6 	bl	8000ff0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001004:	480c      	ldr	r0, [pc, #48]	@ (8001038 <LoopForever+0x6>)
  ldr r1, =_edata
 8001006:	490d      	ldr	r1, [pc, #52]	@ (800103c <LoopForever+0xa>)
  ldr r2, =_sidata
 8001008:	4a0d      	ldr	r2, [pc, #52]	@ (8001040 <LoopForever+0xe>)
  movs r3, #0
 800100a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800100c:	e002      	b.n	8001014 <LoopCopyDataInit>

0800100e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800100e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001010:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001012:	3304      	adds	r3, #4

08001014 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001014:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001016:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001018:	d3f9      	bcc.n	800100e <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800101a:	4a0a      	ldr	r2, [pc, #40]	@ (8001044 <LoopForever+0x12>)
  ldr r4, =_ebss
 800101c:	4c0a      	ldr	r4, [pc, #40]	@ (8001048 <LoopForever+0x16>)
  movs r3, #0
 800101e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001020:	e001      	b.n	8001026 <LoopFillZerobss>

08001022 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001022:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001024:	3204      	adds	r2, #4

08001026 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001026:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001028:	d3fb      	bcc.n	8001022 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 800102a:	f002 fd65 	bl	8003af8 <__libc_init_array>
/* Call the application s entry point.*/
  bl main
 800102e:	f7ff fc79 	bl	8000924 <main>

08001032 <LoopForever>:

LoopForever:
  b LoopForever
 8001032:	e7fe      	b.n	8001032 <LoopForever>
  ldr   r0, =_estack
 8001034:	20002000 	.word	0x20002000
  ldr r0, =_sdata
 8001038:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800103c:	2000005c 	.word	0x2000005c
  ldr r2, =_sidata
 8001040:	08004544 	.word	0x08004544
  ldr r2, =_sbss
 8001044:	2000005c 	.word	0x2000005c
  ldr r4, =_ebss
 8001048:	20000314 	.word	0x20000314

0800104c <ADC1_IRQHandler>:
 * @retval None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 800104c:	e7fe      	b.n	800104c <ADC1_IRQHandler>
	...

08001050 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001050:	b580      	push	{r7, lr}
 8001052:	b082      	sub	sp, #8
 8001054:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001056:	1dfb      	adds	r3, r7, #7
 8001058:	2200      	movs	r2, #0
 800105a:	701a      	strb	r2, [r3, #0]
#if (INSTRUCTION_CACHE_ENABLE == 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800105c:	4b0b      	ldr	r3, [pc, #44]	@ (800108c <HAL_Init+0x3c>)
 800105e:	681a      	ldr	r2, [r3, #0]
 8001060:	4b0a      	ldr	r3, [pc, #40]	@ (800108c <HAL_Init+0x3c>)
 8001062:	2180      	movs	r1, #128	@ 0x80
 8001064:	0049      	lsls	r1, r1, #1
 8001066:	430a      	orrs	r2, r1
 8001068:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800106a:	2000      	movs	r0, #0
 800106c:	f000 f810 	bl	8001090 <HAL_InitTick>
 8001070:	1e03      	subs	r3, r0, #0
 8001072:	d003      	beq.n	800107c <HAL_Init+0x2c>
  {
    status = HAL_ERROR;
 8001074:	1dfb      	adds	r3, r7, #7
 8001076:	2201      	movs	r2, #1
 8001078:	701a      	strb	r2, [r3, #0]
 800107a:	e001      	b.n	8001080 <HAL_Init+0x30>
  }
  else
  {
  /* Init the low level hardware */
  HAL_MspInit();
 800107c:	f7ff feae 	bl	8000ddc <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001080:	1dfb      	adds	r3, r7, #7
 8001082:	781b      	ldrb	r3, [r3, #0]
}
 8001084:	0018      	movs	r0, r3
 8001086:	46bd      	mov	sp, r7
 8001088:	b002      	add	sp, #8
 800108a:	bd80      	pop	{r7, pc}
 800108c:	40022000 	.word	0x40022000

08001090 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001090:	b590      	push	{r4, r7, lr}
 8001092:	b085      	sub	sp, #20
 8001094:	af00      	add	r7, sp, #0
 8001096:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8001098:	230f      	movs	r3, #15
 800109a:	18fb      	adds	r3, r7, r3
 800109c:	2200      	movs	r2, #0
 800109e:	701a      	strb	r2, [r3, #0]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/ 
  if ((uint32_t)uwTickFreq != 0U)
 80010a0:	4b1d      	ldr	r3, [pc, #116]	@ (8001118 <HAL_InitTick+0x88>)
 80010a2:	781b      	ldrb	r3, [r3, #0]
 80010a4:	2b00      	cmp	r3, #0
 80010a6:	d02b      	beq.n	8001100 <HAL_InitTick+0x70>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U /(uint32_t)uwTickFreq)) == 0U)
 80010a8:	4b1c      	ldr	r3, [pc, #112]	@ (800111c <HAL_InitTick+0x8c>)
 80010aa:	681c      	ldr	r4, [r3, #0]
 80010ac:	4b1a      	ldr	r3, [pc, #104]	@ (8001118 <HAL_InitTick+0x88>)
 80010ae:	781b      	ldrb	r3, [r3, #0]
 80010b0:	0019      	movs	r1, r3
 80010b2:	23fa      	movs	r3, #250	@ 0xfa
 80010b4:	0098      	lsls	r0, r3, #2
 80010b6:	f7ff f82f 	bl	8000118 <__udivsi3>
 80010ba:	0003      	movs	r3, r0
 80010bc:	0019      	movs	r1, r3
 80010be:	0020      	movs	r0, r4
 80010c0:	f7ff f82a 	bl	8000118 <__udivsi3>
 80010c4:	0003      	movs	r3, r0
 80010c6:	0018      	movs	r0, r3
 80010c8:	f000 f913 	bl	80012f2 <HAL_SYSTICK_Config>
 80010cc:	1e03      	subs	r3, r0, #0
 80010ce:	d112      	bne.n	80010f6 <HAL_InitTick+0x66>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80010d0:	687b      	ldr	r3, [r7, #4]
 80010d2:	2b03      	cmp	r3, #3
 80010d4:	d80a      	bhi.n	80010ec <HAL_InitTick+0x5c>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80010d6:	6879      	ldr	r1, [r7, #4]
 80010d8:	2301      	movs	r3, #1
 80010da:	425b      	negs	r3, r3
 80010dc:	2200      	movs	r2, #0
 80010de:	0018      	movs	r0, r3
 80010e0:	f000 f8f2 	bl	80012c8 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80010e4:	4b0e      	ldr	r3, [pc, #56]	@ (8001120 <HAL_InitTick+0x90>)
 80010e6:	687a      	ldr	r2, [r7, #4]
 80010e8:	601a      	str	r2, [r3, #0]
 80010ea:	e00d      	b.n	8001108 <HAL_InitTick+0x78>
      }
      else
      {
        status = HAL_ERROR;
 80010ec:	230f      	movs	r3, #15
 80010ee:	18fb      	adds	r3, r7, r3
 80010f0:	2201      	movs	r2, #1
 80010f2:	701a      	strb	r2, [r3, #0]
 80010f4:	e008      	b.n	8001108 <HAL_InitTick+0x78>
      }
    }
    else
    {
      status = HAL_ERROR;
 80010f6:	230f      	movs	r3, #15
 80010f8:	18fb      	adds	r3, r7, r3
 80010fa:	2201      	movs	r2, #1
 80010fc:	701a      	strb	r2, [r3, #0]
 80010fe:	e003      	b.n	8001108 <HAL_InitTick+0x78>
    }
  }
  else
  {
    status = HAL_ERROR;
 8001100:	230f      	movs	r3, #15
 8001102:	18fb      	adds	r3, r7, r3
 8001104:	2201      	movs	r2, #1
 8001106:	701a      	strb	r2, [r3, #0]
  }

  /* Return function status */
  return status;
 8001108:	230f      	movs	r3, #15
 800110a:	18fb      	adds	r3, r7, r3
 800110c:	781b      	ldrb	r3, [r3, #0]
}
 800110e:	0018      	movs	r0, r3
 8001110:	46bd      	mov	sp, r7
 8001112:	b005      	add	sp, #20
 8001114:	bd90      	pop	{r4, r7, pc}
 8001116:	46c0      	nop			@ (mov r8, r8)
 8001118:	20000008 	.word	0x20000008
 800111c:	20000000 	.word	0x20000000
 8001120:	20000004 	.word	0x20000004

08001124 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001124:	b580      	push	{r7, lr}
 8001126:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001128:	4b05      	ldr	r3, [pc, #20]	@ (8001140 <HAL_IncTick+0x1c>)
 800112a:	781b      	ldrb	r3, [r3, #0]
 800112c:	001a      	movs	r2, r3
 800112e:	4b05      	ldr	r3, [pc, #20]	@ (8001144 <HAL_IncTick+0x20>)
 8001130:	681b      	ldr	r3, [r3, #0]
 8001132:	18d2      	adds	r2, r2, r3
 8001134:	4b03      	ldr	r3, [pc, #12]	@ (8001144 <HAL_IncTick+0x20>)
 8001136:	601a      	str	r2, [r3, #0]
}
 8001138:	46c0      	nop			@ (mov r8, r8)
 800113a:	46bd      	mov	sp, r7
 800113c:	bd80      	pop	{r7, pc}
 800113e:	46c0      	nop			@ (mov r8, r8)
 8001140:	20000008 	.word	0x20000008
 8001144:	200001c8 	.word	0x200001c8

08001148 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001148:	b580      	push	{r7, lr}
 800114a:	af00      	add	r7, sp, #0
  return uwTick;
 800114c:	4b02      	ldr	r3, [pc, #8]	@ (8001158 <HAL_GetTick+0x10>)
 800114e:	681b      	ldr	r3, [r3, #0]
}
 8001150:	0018      	movs	r0, r3
 8001152:	46bd      	mov	sp, r7
 8001154:	bd80      	pop	{r7, pc}
 8001156:	46c0      	nop			@ (mov r8, r8)
 8001158:	200001c8 	.word	0x200001c8

0800115c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800115c:	b580      	push	{r7, lr}
 800115e:	b084      	sub	sp, #16
 8001160:	af00      	add	r7, sp, #0
 8001162:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001164:	f7ff fff0 	bl	8001148 <HAL_GetTick>
 8001168:	0003      	movs	r3, r0
 800116a:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 800116c:	687b      	ldr	r3, [r7, #4]
 800116e:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001170:	68fb      	ldr	r3, [r7, #12]
 8001172:	3301      	adds	r3, #1
 8001174:	d005      	beq.n	8001182 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001176:	4b0a      	ldr	r3, [pc, #40]	@ (80011a0 <HAL_Delay+0x44>)
 8001178:	781b      	ldrb	r3, [r3, #0]
 800117a:	001a      	movs	r2, r3
 800117c:	68fb      	ldr	r3, [r7, #12]
 800117e:	189b      	adds	r3, r3, r2
 8001180:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001182:	46c0      	nop			@ (mov r8, r8)
 8001184:	f7ff ffe0 	bl	8001148 <HAL_GetTick>
 8001188:	0002      	movs	r2, r0
 800118a:	68bb      	ldr	r3, [r7, #8]
 800118c:	1ad3      	subs	r3, r2, r3
 800118e:	68fa      	ldr	r2, [r7, #12]
 8001190:	429a      	cmp	r2, r3
 8001192:	d8f7      	bhi.n	8001184 <HAL_Delay+0x28>
  {
  }
}
 8001194:	46c0      	nop			@ (mov r8, r8)
 8001196:	46c0      	nop			@ (mov r8, r8)
 8001198:	46bd      	mov	sp, r7
 800119a:	b004      	add	sp, #16
 800119c:	bd80      	pop	{r7, pc}
 800119e:	46c0      	nop			@ (mov r8, r8)
 80011a0:	20000008 	.word	0x20000008

080011a4 <__NVIC_SetPriority>:
{
 80011a4:	b590      	push	{r4, r7, lr}
 80011a6:	b083      	sub	sp, #12
 80011a8:	af00      	add	r7, sp, #0
 80011aa:	0002      	movs	r2, r0
 80011ac:	6039      	str	r1, [r7, #0]
 80011ae:	1dfb      	adds	r3, r7, #7
 80011b0:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 80011b2:	1dfb      	adds	r3, r7, #7
 80011b4:	781b      	ldrb	r3, [r3, #0]
 80011b6:	2b7f      	cmp	r3, #127	@ 0x7f
 80011b8:	d828      	bhi.n	800120c <__NVIC_SetPriority+0x68>
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80011ba:	4a2f      	ldr	r2, [pc, #188]	@ (8001278 <__NVIC_SetPriority+0xd4>)
 80011bc:	1dfb      	adds	r3, r7, #7
 80011be:	781b      	ldrb	r3, [r3, #0]
 80011c0:	b25b      	sxtb	r3, r3
 80011c2:	089b      	lsrs	r3, r3, #2
 80011c4:	33c0      	adds	r3, #192	@ 0xc0
 80011c6:	009b      	lsls	r3, r3, #2
 80011c8:	589b      	ldr	r3, [r3, r2]
 80011ca:	1dfa      	adds	r2, r7, #7
 80011cc:	7812      	ldrb	r2, [r2, #0]
 80011ce:	0011      	movs	r1, r2
 80011d0:	2203      	movs	r2, #3
 80011d2:	400a      	ands	r2, r1
 80011d4:	00d2      	lsls	r2, r2, #3
 80011d6:	21ff      	movs	r1, #255	@ 0xff
 80011d8:	4091      	lsls	r1, r2
 80011da:	000a      	movs	r2, r1
 80011dc:	43d2      	mvns	r2, r2
 80011de:	401a      	ands	r2, r3
 80011e0:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80011e2:	683b      	ldr	r3, [r7, #0]
 80011e4:	019b      	lsls	r3, r3, #6
 80011e6:	22ff      	movs	r2, #255	@ 0xff
 80011e8:	401a      	ands	r2, r3
 80011ea:	1dfb      	adds	r3, r7, #7
 80011ec:	781b      	ldrb	r3, [r3, #0]
 80011ee:	0018      	movs	r0, r3
 80011f0:	2303      	movs	r3, #3
 80011f2:	4003      	ands	r3, r0
 80011f4:	00db      	lsls	r3, r3, #3
 80011f6:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80011f8:	481f      	ldr	r0, [pc, #124]	@ (8001278 <__NVIC_SetPriority+0xd4>)
 80011fa:	1dfb      	adds	r3, r7, #7
 80011fc:	781b      	ldrb	r3, [r3, #0]
 80011fe:	b25b      	sxtb	r3, r3
 8001200:	089b      	lsrs	r3, r3, #2
 8001202:	430a      	orrs	r2, r1
 8001204:	33c0      	adds	r3, #192	@ 0xc0
 8001206:	009b      	lsls	r3, r3, #2
 8001208:	501a      	str	r2, [r3, r0]
}
 800120a:	e031      	b.n	8001270 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800120c:	4a1b      	ldr	r2, [pc, #108]	@ (800127c <__NVIC_SetPriority+0xd8>)
 800120e:	1dfb      	adds	r3, r7, #7
 8001210:	781b      	ldrb	r3, [r3, #0]
 8001212:	0019      	movs	r1, r3
 8001214:	230f      	movs	r3, #15
 8001216:	400b      	ands	r3, r1
 8001218:	3b08      	subs	r3, #8
 800121a:	089b      	lsrs	r3, r3, #2
 800121c:	3306      	adds	r3, #6
 800121e:	009b      	lsls	r3, r3, #2
 8001220:	18d3      	adds	r3, r2, r3
 8001222:	3304      	adds	r3, #4
 8001224:	681b      	ldr	r3, [r3, #0]
 8001226:	1dfa      	adds	r2, r7, #7
 8001228:	7812      	ldrb	r2, [r2, #0]
 800122a:	0011      	movs	r1, r2
 800122c:	2203      	movs	r2, #3
 800122e:	400a      	ands	r2, r1
 8001230:	00d2      	lsls	r2, r2, #3
 8001232:	21ff      	movs	r1, #255	@ 0xff
 8001234:	4091      	lsls	r1, r2
 8001236:	000a      	movs	r2, r1
 8001238:	43d2      	mvns	r2, r2
 800123a:	401a      	ands	r2, r3
 800123c:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 800123e:	683b      	ldr	r3, [r7, #0]
 8001240:	019b      	lsls	r3, r3, #6
 8001242:	22ff      	movs	r2, #255	@ 0xff
 8001244:	401a      	ands	r2, r3
 8001246:	1dfb      	adds	r3, r7, #7
 8001248:	781b      	ldrb	r3, [r3, #0]
 800124a:	0018      	movs	r0, r3
 800124c:	2303      	movs	r3, #3
 800124e:	4003      	ands	r3, r0
 8001250:	00db      	lsls	r3, r3, #3
 8001252:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001254:	4809      	ldr	r0, [pc, #36]	@ (800127c <__NVIC_SetPriority+0xd8>)
 8001256:	1dfb      	adds	r3, r7, #7
 8001258:	781b      	ldrb	r3, [r3, #0]
 800125a:	001c      	movs	r4, r3
 800125c:	230f      	movs	r3, #15
 800125e:	4023      	ands	r3, r4
 8001260:	3b08      	subs	r3, #8
 8001262:	089b      	lsrs	r3, r3, #2
 8001264:	430a      	orrs	r2, r1
 8001266:	3306      	adds	r3, #6
 8001268:	009b      	lsls	r3, r3, #2
 800126a:	18c3      	adds	r3, r0, r3
 800126c:	3304      	adds	r3, #4
 800126e:	601a      	str	r2, [r3, #0]
}
 8001270:	46c0      	nop			@ (mov r8, r8)
 8001272:	46bd      	mov	sp, r7
 8001274:	b003      	add	sp, #12
 8001276:	bd90      	pop	{r4, r7, pc}
 8001278:	e000e100 	.word	0xe000e100
 800127c:	e000ed00 	.word	0xe000ed00

08001280 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001280:	b580      	push	{r7, lr}
 8001282:	b082      	sub	sp, #8
 8001284:	af00      	add	r7, sp, #0
 8001286:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001288:	687b      	ldr	r3, [r7, #4]
 800128a:	1e5a      	subs	r2, r3, #1
 800128c:	2380      	movs	r3, #128	@ 0x80
 800128e:	045b      	lsls	r3, r3, #17
 8001290:	429a      	cmp	r2, r3
 8001292:	d301      	bcc.n	8001298 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001294:	2301      	movs	r3, #1
 8001296:	e010      	b.n	80012ba <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001298:	4b0a      	ldr	r3, [pc, #40]	@ (80012c4 <SysTick_Config+0x44>)
 800129a:	687a      	ldr	r2, [r7, #4]
 800129c:	3a01      	subs	r2, #1
 800129e:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80012a0:	2301      	movs	r3, #1
 80012a2:	425b      	negs	r3, r3
 80012a4:	2103      	movs	r1, #3
 80012a6:	0018      	movs	r0, r3
 80012a8:	f7ff ff7c 	bl	80011a4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80012ac:	4b05      	ldr	r3, [pc, #20]	@ (80012c4 <SysTick_Config+0x44>)
 80012ae:	2200      	movs	r2, #0
 80012b0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80012b2:	4b04      	ldr	r3, [pc, #16]	@ (80012c4 <SysTick_Config+0x44>)
 80012b4:	2207      	movs	r2, #7
 80012b6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80012b8:	2300      	movs	r3, #0
}
 80012ba:	0018      	movs	r0, r3
 80012bc:	46bd      	mov	sp, r7
 80012be:	b002      	add	sp, #8
 80012c0:	bd80      	pop	{r7, pc}
 80012c2:	46c0      	nop			@ (mov r8, r8)
 80012c4:	e000e010 	.word	0xe000e010

080012c8 <HAL_NVIC_SetPriority>:
  *         with stm32g0xx devices, this parameter is a dummy value and it is ignored, because
  *         no subpriority supported in Cortex M0+ based products.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80012c8:	b580      	push	{r7, lr}
 80012ca:	b084      	sub	sp, #16
 80012cc:	af00      	add	r7, sp, #0
 80012ce:	60b9      	str	r1, [r7, #8]
 80012d0:	607a      	str	r2, [r7, #4]
 80012d2:	210f      	movs	r1, #15
 80012d4:	187b      	adds	r3, r7, r1
 80012d6:	1c02      	adds	r2, r0, #0
 80012d8:	701a      	strb	r2, [r3, #0]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(SubPriority);

  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn, PreemptPriority);
 80012da:	68ba      	ldr	r2, [r7, #8]
 80012dc:	187b      	adds	r3, r7, r1
 80012de:	781b      	ldrb	r3, [r3, #0]
 80012e0:	b25b      	sxtb	r3, r3
 80012e2:	0011      	movs	r1, r2
 80012e4:	0018      	movs	r0, r3
 80012e6:	f7ff ff5d 	bl	80011a4 <__NVIC_SetPriority>
}
 80012ea:	46c0      	nop			@ (mov r8, r8)
 80012ec:	46bd      	mov	sp, r7
 80012ee:	b004      	add	sp, #16
 80012f0:	bd80      	pop	{r7, pc}

080012f2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80012f2:	b580      	push	{r7, lr}
 80012f4:	b082      	sub	sp, #8
 80012f6:	af00      	add	r7, sp, #0
 80012f8:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 80012fa:	687b      	ldr	r3, [r7, #4]
 80012fc:	0018      	movs	r0, r3
 80012fe:	f7ff ffbf 	bl	8001280 <SysTick_Config>
 8001302:	0003      	movs	r3, r0
}
 8001304:	0018      	movs	r0, r3
 8001306:	46bd      	mov	sp, r7
 8001308:	b002      	add	sp, #8
 800130a:	bd80      	pop	{r7, pc}

0800130c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800130c:	b580      	push	{r7, lr}
 800130e:	b086      	sub	sp, #24
 8001310:	af00      	add	r7, sp, #0
 8001312:	6078      	str	r0, [r7, #4]
 8001314:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001316:	2300      	movs	r3, #0
 8001318:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800131a:	e147      	b.n	80015ac <HAL_GPIO_Init+0x2a0>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 800131c:	683b      	ldr	r3, [r7, #0]
 800131e:	681b      	ldr	r3, [r3, #0]
 8001320:	2101      	movs	r1, #1
 8001322:	697a      	ldr	r2, [r7, #20]
 8001324:	4091      	lsls	r1, r2
 8001326:	000a      	movs	r2, r1
 8001328:	4013      	ands	r3, r2
 800132a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 800132c:	68fb      	ldr	r3, [r7, #12]
 800132e:	2b00      	cmp	r3, #0
 8001330:	d100      	bne.n	8001334 <HAL_GPIO_Init+0x28>
 8001332:	e138      	b.n	80015a6 <HAL_GPIO_Init+0x29a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001334:	683b      	ldr	r3, [r7, #0]
 8001336:	685b      	ldr	r3, [r3, #4]
 8001338:	2203      	movs	r2, #3
 800133a:	4013      	ands	r3, r2
 800133c:	2b01      	cmp	r3, #1
 800133e:	d005      	beq.n	800134c <HAL_GPIO_Init+0x40>
 8001340:	683b      	ldr	r3, [r7, #0]
 8001342:	685b      	ldr	r3, [r3, #4]
 8001344:	2203      	movs	r2, #3
 8001346:	4013      	ands	r3, r2
 8001348:	2b02      	cmp	r3, #2
 800134a:	d130      	bne.n	80013ae <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800134c:	687b      	ldr	r3, [r7, #4]
 800134e:	689b      	ldr	r3, [r3, #8]
 8001350:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8001352:	697b      	ldr	r3, [r7, #20]
 8001354:	005b      	lsls	r3, r3, #1
 8001356:	2203      	movs	r2, #3
 8001358:	409a      	lsls	r2, r3
 800135a:	0013      	movs	r3, r2
 800135c:	43da      	mvns	r2, r3
 800135e:	693b      	ldr	r3, [r7, #16]
 8001360:	4013      	ands	r3, r2
 8001362:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001364:	683b      	ldr	r3, [r7, #0]
 8001366:	68da      	ldr	r2, [r3, #12]
 8001368:	697b      	ldr	r3, [r7, #20]
 800136a:	005b      	lsls	r3, r3, #1
 800136c:	409a      	lsls	r2, r3
 800136e:	0013      	movs	r3, r2
 8001370:	693a      	ldr	r2, [r7, #16]
 8001372:	4313      	orrs	r3, r2
 8001374:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001376:	687b      	ldr	r3, [r7, #4]
 8001378:	693a      	ldr	r2, [r7, #16]
 800137a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800137c:	687b      	ldr	r3, [r7, #4]
 800137e:	685b      	ldr	r3, [r3, #4]
 8001380:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001382:	2201      	movs	r2, #1
 8001384:	697b      	ldr	r3, [r7, #20]
 8001386:	409a      	lsls	r2, r3
 8001388:	0013      	movs	r3, r2
 800138a:	43da      	mvns	r2, r3
 800138c:	693b      	ldr	r3, [r7, #16]
 800138e:	4013      	ands	r3, r2
 8001390:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001392:	683b      	ldr	r3, [r7, #0]
 8001394:	685b      	ldr	r3, [r3, #4]
 8001396:	091b      	lsrs	r3, r3, #4
 8001398:	2201      	movs	r2, #1
 800139a:	401a      	ands	r2, r3
 800139c:	697b      	ldr	r3, [r7, #20]
 800139e:	409a      	lsls	r2, r3
 80013a0:	0013      	movs	r3, r2
 80013a2:	693a      	ldr	r2, [r7, #16]
 80013a4:	4313      	orrs	r3, r2
 80013a6:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80013a8:	687b      	ldr	r3, [r7, #4]
 80013aa:	693a      	ldr	r2, [r7, #16]
 80013ac:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80013ae:	683b      	ldr	r3, [r7, #0]
 80013b0:	685b      	ldr	r3, [r3, #4]
 80013b2:	2203      	movs	r2, #3
 80013b4:	4013      	ands	r3, r2
 80013b6:	2b03      	cmp	r3, #3
 80013b8:	d017      	beq.n	80013ea <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80013ba:	687b      	ldr	r3, [r7, #4]
 80013bc:	68db      	ldr	r3, [r3, #12]
 80013be:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 80013c0:	697b      	ldr	r3, [r7, #20]
 80013c2:	005b      	lsls	r3, r3, #1
 80013c4:	2203      	movs	r2, #3
 80013c6:	409a      	lsls	r2, r3
 80013c8:	0013      	movs	r3, r2
 80013ca:	43da      	mvns	r2, r3
 80013cc:	693b      	ldr	r3, [r7, #16]
 80013ce:	4013      	ands	r3, r2
 80013d0:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 80013d2:	683b      	ldr	r3, [r7, #0]
 80013d4:	689a      	ldr	r2, [r3, #8]
 80013d6:	697b      	ldr	r3, [r7, #20]
 80013d8:	005b      	lsls	r3, r3, #1
 80013da:	409a      	lsls	r2, r3
 80013dc:	0013      	movs	r3, r2
 80013de:	693a      	ldr	r2, [r7, #16]
 80013e0:	4313      	orrs	r3, r2
 80013e2:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80013e4:	687b      	ldr	r3, [r7, #4]
 80013e6:	693a      	ldr	r2, [r7, #16]
 80013e8:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80013ea:	683b      	ldr	r3, [r7, #0]
 80013ec:	685b      	ldr	r3, [r3, #4]
 80013ee:	2203      	movs	r2, #3
 80013f0:	4013      	ands	r3, r2
 80013f2:	2b02      	cmp	r3, #2
 80013f4:	d123      	bne.n	800143e <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80013f6:	697b      	ldr	r3, [r7, #20]
 80013f8:	08da      	lsrs	r2, r3, #3
 80013fa:	687b      	ldr	r3, [r7, #4]
 80013fc:	3208      	adds	r2, #8
 80013fe:	0092      	lsls	r2, r2, #2
 8001400:	58d3      	ldr	r3, [r2, r3]
 8001402:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001404:	697b      	ldr	r3, [r7, #20]
 8001406:	2207      	movs	r2, #7
 8001408:	4013      	ands	r3, r2
 800140a:	009b      	lsls	r3, r3, #2
 800140c:	220f      	movs	r2, #15
 800140e:	409a      	lsls	r2, r3
 8001410:	0013      	movs	r3, r2
 8001412:	43da      	mvns	r2, r3
 8001414:	693b      	ldr	r3, [r7, #16]
 8001416:	4013      	ands	r3, r2
 8001418:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 800141a:	683b      	ldr	r3, [r7, #0]
 800141c:	691a      	ldr	r2, [r3, #16]
 800141e:	697b      	ldr	r3, [r7, #20]
 8001420:	2107      	movs	r1, #7
 8001422:	400b      	ands	r3, r1
 8001424:	009b      	lsls	r3, r3, #2
 8001426:	409a      	lsls	r2, r3
 8001428:	0013      	movs	r3, r2
 800142a:	693a      	ldr	r2, [r7, #16]
 800142c:	4313      	orrs	r3, r2
 800142e:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001430:	697b      	ldr	r3, [r7, #20]
 8001432:	08da      	lsrs	r2, r3, #3
 8001434:	687b      	ldr	r3, [r7, #4]
 8001436:	3208      	adds	r2, #8
 8001438:	0092      	lsls	r2, r2, #2
 800143a:	6939      	ldr	r1, [r7, #16]
 800143c:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800143e:	687b      	ldr	r3, [r7, #4]
 8001440:	681b      	ldr	r3, [r3, #0]
 8001442:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8001444:	697b      	ldr	r3, [r7, #20]
 8001446:	005b      	lsls	r3, r3, #1
 8001448:	2203      	movs	r2, #3
 800144a:	409a      	lsls	r2, r3
 800144c:	0013      	movs	r3, r2
 800144e:	43da      	mvns	r2, r3
 8001450:	693b      	ldr	r3, [r7, #16]
 8001452:	4013      	ands	r3, r2
 8001454:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001456:	683b      	ldr	r3, [r7, #0]
 8001458:	685b      	ldr	r3, [r3, #4]
 800145a:	2203      	movs	r2, #3
 800145c:	401a      	ands	r2, r3
 800145e:	697b      	ldr	r3, [r7, #20]
 8001460:	005b      	lsls	r3, r3, #1
 8001462:	409a      	lsls	r2, r3
 8001464:	0013      	movs	r3, r2
 8001466:	693a      	ldr	r2, [r7, #16]
 8001468:	4313      	orrs	r3, r2
 800146a:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 800146c:	687b      	ldr	r3, [r7, #4]
 800146e:	693a      	ldr	r2, [r7, #16]
 8001470:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001472:	683b      	ldr	r3, [r7, #0]
 8001474:	685a      	ldr	r2, [r3, #4]
 8001476:	23c0      	movs	r3, #192	@ 0xc0
 8001478:	029b      	lsls	r3, r3, #10
 800147a:	4013      	ands	r3, r2
 800147c:	d100      	bne.n	8001480 <HAL_GPIO_Init+0x174>
 800147e:	e092      	b.n	80015a6 <HAL_GPIO_Init+0x29a>
      {
        temp = EXTI->EXTICR[position >> 2u];
 8001480:	4a50      	ldr	r2, [pc, #320]	@ (80015c4 <HAL_GPIO_Init+0x2b8>)
 8001482:	697b      	ldr	r3, [r7, #20]
 8001484:	089b      	lsrs	r3, r3, #2
 8001486:	3318      	adds	r3, #24
 8001488:	009b      	lsls	r3, r3, #2
 800148a:	589b      	ldr	r3, [r3, r2]
 800148c:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (8u * (position & 0x03u)));
 800148e:	697b      	ldr	r3, [r7, #20]
 8001490:	2203      	movs	r2, #3
 8001492:	4013      	ands	r3, r2
 8001494:	00db      	lsls	r3, r3, #3
 8001496:	220f      	movs	r2, #15
 8001498:	409a      	lsls	r2, r3
 800149a:	0013      	movs	r3, r2
 800149c:	43da      	mvns	r2, r3
 800149e:	693b      	ldr	r3, [r7, #16]
 80014a0:	4013      	ands	r3, r2
 80014a2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (8u * (position & 0x03u)));
 80014a4:	687a      	ldr	r2, [r7, #4]
 80014a6:	23a0      	movs	r3, #160	@ 0xa0
 80014a8:	05db      	lsls	r3, r3, #23
 80014aa:	429a      	cmp	r2, r3
 80014ac:	d013      	beq.n	80014d6 <HAL_GPIO_Init+0x1ca>
 80014ae:	687b      	ldr	r3, [r7, #4]
 80014b0:	4a45      	ldr	r2, [pc, #276]	@ (80015c8 <HAL_GPIO_Init+0x2bc>)
 80014b2:	4293      	cmp	r3, r2
 80014b4:	d00d      	beq.n	80014d2 <HAL_GPIO_Init+0x1c6>
 80014b6:	687b      	ldr	r3, [r7, #4]
 80014b8:	4a44      	ldr	r2, [pc, #272]	@ (80015cc <HAL_GPIO_Init+0x2c0>)
 80014ba:	4293      	cmp	r3, r2
 80014bc:	d007      	beq.n	80014ce <HAL_GPIO_Init+0x1c2>
 80014be:	687b      	ldr	r3, [r7, #4]
 80014c0:	4a43      	ldr	r2, [pc, #268]	@ (80015d0 <HAL_GPIO_Init+0x2c4>)
 80014c2:	4293      	cmp	r3, r2
 80014c4:	d101      	bne.n	80014ca <HAL_GPIO_Init+0x1be>
 80014c6:	2303      	movs	r3, #3
 80014c8:	e006      	b.n	80014d8 <HAL_GPIO_Init+0x1cc>
 80014ca:	2305      	movs	r3, #5
 80014cc:	e004      	b.n	80014d8 <HAL_GPIO_Init+0x1cc>
 80014ce:	2302      	movs	r3, #2
 80014d0:	e002      	b.n	80014d8 <HAL_GPIO_Init+0x1cc>
 80014d2:	2301      	movs	r3, #1
 80014d4:	e000      	b.n	80014d8 <HAL_GPIO_Init+0x1cc>
 80014d6:	2300      	movs	r3, #0
 80014d8:	697a      	ldr	r2, [r7, #20]
 80014da:	2103      	movs	r1, #3
 80014dc:	400a      	ands	r2, r1
 80014de:	00d2      	lsls	r2, r2, #3
 80014e0:	4093      	lsls	r3, r2
 80014e2:	693a      	ldr	r2, [r7, #16]
 80014e4:	4313      	orrs	r3, r2
 80014e6:	613b      	str	r3, [r7, #16]
        EXTI->EXTICR[position >> 2u] = temp;
 80014e8:	4936      	ldr	r1, [pc, #216]	@ (80015c4 <HAL_GPIO_Init+0x2b8>)
 80014ea:	697b      	ldr	r3, [r7, #20]
 80014ec:	089b      	lsrs	r3, r3, #2
 80014ee:	3318      	adds	r3, #24
 80014f0:	009b      	lsls	r3, r3, #2
 80014f2:	693a      	ldr	r2, [r7, #16]
 80014f4:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80014f6:	4b33      	ldr	r3, [pc, #204]	@ (80015c4 <HAL_GPIO_Init+0x2b8>)
 80014f8:	681b      	ldr	r3, [r3, #0]
 80014fa:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80014fc:	68fb      	ldr	r3, [r7, #12]
 80014fe:	43da      	mvns	r2, r3
 8001500:	693b      	ldr	r3, [r7, #16]
 8001502:	4013      	ands	r3, r2
 8001504:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001506:	683b      	ldr	r3, [r7, #0]
 8001508:	685a      	ldr	r2, [r3, #4]
 800150a:	2380      	movs	r3, #128	@ 0x80
 800150c:	035b      	lsls	r3, r3, #13
 800150e:	4013      	ands	r3, r2
 8001510:	d003      	beq.n	800151a <HAL_GPIO_Init+0x20e>
        {
          temp |= iocurrent;
 8001512:	693a      	ldr	r2, [r7, #16]
 8001514:	68fb      	ldr	r3, [r7, #12]
 8001516:	4313      	orrs	r3, r2
 8001518:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 800151a:	4b2a      	ldr	r3, [pc, #168]	@ (80015c4 <HAL_GPIO_Init+0x2b8>)
 800151c:	693a      	ldr	r2, [r7, #16]
 800151e:	601a      	str	r2, [r3, #0]

        temp = EXTI->FTSR1;
 8001520:	4b28      	ldr	r3, [pc, #160]	@ (80015c4 <HAL_GPIO_Init+0x2b8>)
 8001522:	685b      	ldr	r3, [r3, #4]
 8001524:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001526:	68fb      	ldr	r3, [r7, #12]
 8001528:	43da      	mvns	r2, r3
 800152a:	693b      	ldr	r3, [r7, #16]
 800152c:	4013      	ands	r3, r2
 800152e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001530:	683b      	ldr	r3, [r7, #0]
 8001532:	685a      	ldr	r2, [r3, #4]
 8001534:	2380      	movs	r3, #128	@ 0x80
 8001536:	039b      	lsls	r3, r3, #14
 8001538:	4013      	ands	r3, r2
 800153a:	d003      	beq.n	8001544 <HAL_GPIO_Init+0x238>
        {
          temp |= iocurrent;
 800153c:	693a      	ldr	r2, [r7, #16]
 800153e:	68fb      	ldr	r3, [r7, #12]
 8001540:	4313      	orrs	r3, r2
 8001542:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8001544:	4b1f      	ldr	r3, [pc, #124]	@ (80015c4 <HAL_GPIO_Init+0x2b8>)
 8001546:	693a      	ldr	r2, [r7, #16]
 8001548:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 800154a:	4a1e      	ldr	r2, [pc, #120]	@ (80015c4 <HAL_GPIO_Init+0x2b8>)
 800154c:	2384      	movs	r3, #132	@ 0x84
 800154e:	58d3      	ldr	r3, [r2, r3]
 8001550:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001552:	68fb      	ldr	r3, [r7, #12]
 8001554:	43da      	mvns	r2, r3
 8001556:	693b      	ldr	r3, [r7, #16]
 8001558:	4013      	ands	r3, r2
 800155a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 800155c:	683b      	ldr	r3, [r7, #0]
 800155e:	685a      	ldr	r2, [r3, #4]
 8001560:	2380      	movs	r3, #128	@ 0x80
 8001562:	029b      	lsls	r3, r3, #10
 8001564:	4013      	ands	r3, r2
 8001566:	d003      	beq.n	8001570 <HAL_GPIO_Init+0x264>
        {
          temp |= iocurrent;
 8001568:	693a      	ldr	r2, [r7, #16]
 800156a:	68fb      	ldr	r3, [r7, #12]
 800156c:	4313      	orrs	r3, r2
 800156e:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8001570:	4914      	ldr	r1, [pc, #80]	@ (80015c4 <HAL_GPIO_Init+0x2b8>)
 8001572:	2284      	movs	r2, #132	@ 0x84
 8001574:	693b      	ldr	r3, [r7, #16]
 8001576:	508b      	str	r3, [r1, r2]

        temp = EXTI->IMR1;
 8001578:	4a12      	ldr	r2, [pc, #72]	@ (80015c4 <HAL_GPIO_Init+0x2b8>)
 800157a:	2380      	movs	r3, #128	@ 0x80
 800157c:	58d3      	ldr	r3, [r2, r3]
 800157e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001580:	68fb      	ldr	r3, [r7, #12]
 8001582:	43da      	mvns	r2, r3
 8001584:	693b      	ldr	r3, [r7, #16]
 8001586:	4013      	ands	r3, r2
 8001588:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 800158a:	683b      	ldr	r3, [r7, #0]
 800158c:	685a      	ldr	r2, [r3, #4]
 800158e:	2380      	movs	r3, #128	@ 0x80
 8001590:	025b      	lsls	r3, r3, #9
 8001592:	4013      	ands	r3, r2
 8001594:	d003      	beq.n	800159e <HAL_GPIO_Init+0x292>
        {
          temp |= iocurrent;
 8001596:	693a      	ldr	r2, [r7, #16]
 8001598:	68fb      	ldr	r3, [r7, #12]
 800159a:	4313      	orrs	r3, r2
 800159c:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 800159e:	4909      	ldr	r1, [pc, #36]	@ (80015c4 <HAL_GPIO_Init+0x2b8>)
 80015a0:	2280      	movs	r2, #128	@ 0x80
 80015a2:	693b      	ldr	r3, [r7, #16]
 80015a4:	508b      	str	r3, [r1, r2]
      }
    }

    position++;
 80015a6:	697b      	ldr	r3, [r7, #20]
 80015a8:	3301      	adds	r3, #1
 80015aa:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80015ac:	683b      	ldr	r3, [r7, #0]
 80015ae:	681a      	ldr	r2, [r3, #0]
 80015b0:	697b      	ldr	r3, [r7, #20]
 80015b2:	40da      	lsrs	r2, r3
 80015b4:	1e13      	subs	r3, r2, #0
 80015b6:	d000      	beq.n	80015ba <HAL_GPIO_Init+0x2ae>
 80015b8:	e6b0      	b.n	800131c <HAL_GPIO_Init+0x10>
  }
}
 80015ba:	46c0      	nop			@ (mov r8, r8)
 80015bc:	46c0      	nop			@ (mov r8, r8)
 80015be:	46bd      	mov	sp, r7
 80015c0:	b006      	add	sp, #24
 80015c2:	bd80      	pop	{r7, pc}
 80015c4:	40021800 	.word	0x40021800
 80015c8:	50000400 	.word	0x50000400
 80015cc:	50000800 	.word	0x50000800
 80015d0:	50000c00 	.word	0x50000c00

080015d4 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80015d4:	b580      	push	{r7, lr}
 80015d6:	b084      	sub	sp, #16
 80015d8:	af00      	add	r7, sp, #0
 80015da:	6078      	str	r0, [r7, #4]
 80015dc:	000a      	movs	r2, r1
 80015de:	1cbb      	adds	r3, r7, #2
 80015e0:	801a      	strh	r2, [r3, #0]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 80015e2:	687b      	ldr	r3, [r7, #4]
 80015e4:	691b      	ldr	r3, [r3, #16]
 80015e6:	1cba      	adds	r2, r7, #2
 80015e8:	8812      	ldrh	r2, [r2, #0]
 80015ea:	4013      	ands	r3, r2
 80015ec:	d004      	beq.n	80015f8 <HAL_GPIO_ReadPin+0x24>
  {
    bitstatus = GPIO_PIN_SET;
 80015ee:	230f      	movs	r3, #15
 80015f0:	18fb      	adds	r3, r7, r3
 80015f2:	2201      	movs	r2, #1
 80015f4:	701a      	strb	r2, [r3, #0]
 80015f6:	e003      	b.n	8001600 <HAL_GPIO_ReadPin+0x2c>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80015f8:	230f      	movs	r3, #15
 80015fa:	18fb      	adds	r3, r7, r3
 80015fc:	2200      	movs	r2, #0
 80015fe:	701a      	strb	r2, [r3, #0]
  }
  return bitstatus;
 8001600:	230f      	movs	r3, #15
 8001602:	18fb      	adds	r3, r7, r3
 8001604:	781b      	ldrb	r3, [r3, #0]
}
 8001606:	0018      	movs	r0, r3
 8001608:	46bd      	mov	sp, r7
 800160a:	b004      	add	sp, #16
 800160c:	bd80      	pop	{r7, pc}

0800160e <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800160e:	b580      	push	{r7, lr}
 8001610:	b082      	sub	sp, #8
 8001612:	af00      	add	r7, sp, #0
 8001614:	6078      	str	r0, [r7, #4]
 8001616:	0008      	movs	r0, r1
 8001618:	0011      	movs	r1, r2
 800161a:	1cbb      	adds	r3, r7, #2
 800161c:	1c02      	adds	r2, r0, #0
 800161e:	801a      	strh	r2, [r3, #0]
 8001620:	1c7b      	adds	r3, r7, #1
 8001622:	1c0a      	adds	r2, r1, #0
 8001624:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001626:	1c7b      	adds	r3, r7, #1
 8001628:	781b      	ldrb	r3, [r3, #0]
 800162a:	2b00      	cmp	r3, #0
 800162c:	d004      	beq.n	8001638 <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800162e:	1cbb      	adds	r3, r7, #2
 8001630:	881a      	ldrh	r2, [r3, #0]
 8001632:	687b      	ldr	r3, [r7, #4]
 8001634:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001636:	e003      	b.n	8001640 <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001638:	1cbb      	adds	r3, r7, #2
 800163a:	881a      	ldrh	r2, [r3, #0]
 800163c:	687b      	ldr	r3, [r7, #4]
 800163e:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8001640:	46c0      	nop			@ (mov r8, r8)
 8001642:	46bd      	mov	sp, r7
 8001644:	b002      	add	sp, #8
 8001646:	bd80      	pop	{r7, pc}

08001648 <HAL_GPIO_TogglePin>:
  * @param  GPIO_Pin specifies the pin to be toggled.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001648:	b580      	push	{r7, lr}
 800164a:	b084      	sub	sp, #16
 800164c:	af00      	add	r7, sp, #0
 800164e:	6078      	str	r0, [r7, #4]
 8001650:	000a      	movs	r2, r1
 8001652:	1cbb      	adds	r3, r7, #2
 8001654:	801a      	strh	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8001656:	687b      	ldr	r3, [r7, #4]
 8001658:	695b      	ldr	r3, [r3, #20]
 800165a:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 800165c:	1cbb      	adds	r3, r7, #2
 800165e:	881b      	ldrh	r3, [r3, #0]
 8001660:	68fa      	ldr	r2, [r7, #12]
 8001662:	4013      	ands	r3, r2
 8001664:	041a      	lsls	r2, r3, #16
 8001666:	68fb      	ldr	r3, [r7, #12]
 8001668:	43db      	mvns	r3, r3
 800166a:	1cb9      	adds	r1, r7, #2
 800166c:	8809      	ldrh	r1, [r1, #0]
 800166e:	400b      	ands	r3, r1
 8001670:	431a      	orrs	r2, r3
 8001672:	687b      	ldr	r3, [r7, #4]
 8001674:	619a      	str	r2, [r3, #24]
}
 8001676:	46c0      	nop			@ (mov r8, r8)
 8001678:	46bd      	mov	sp, r7
 800167a:	b004      	add	sp, #16
 800167c:	bd80      	pop	{r7, pc}
	...

08001680 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001680:	b580      	push	{r7, lr}
 8001682:	b082      	sub	sp, #8
 8001684:	af00      	add	r7, sp, #0
 8001686:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001688:	687b      	ldr	r3, [r7, #4]
 800168a:	2b00      	cmp	r3, #0
 800168c:	d101      	bne.n	8001692 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800168e:	2301      	movs	r3, #1
 8001690:	e08f      	b.n	80017b2 <HAL_I2C_Init+0x132>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001692:	687b      	ldr	r3, [r7, #4]
 8001694:	2241      	movs	r2, #65	@ 0x41
 8001696:	5c9b      	ldrb	r3, [r3, r2]
 8001698:	b2db      	uxtb	r3, r3
 800169a:	2b00      	cmp	r3, #0
 800169c:	d107      	bne.n	80016ae <HAL_I2C_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800169e:	687b      	ldr	r3, [r7, #4]
 80016a0:	2240      	movs	r2, #64	@ 0x40
 80016a2:	2100      	movs	r1, #0
 80016a4:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 80016a6:	687b      	ldr	r3, [r7, #4]
 80016a8:	0018      	movs	r0, r3
 80016aa:	f7ff fbbb 	bl	8000e24 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80016ae:	687b      	ldr	r3, [r7, #4]
 80016b0:	2241      	movs	r2, #65	@ 0x41
 80016b2:	2124      	movs	r1, #36	@ 0x24
 80016b4:	5499      	strb	r1, [r3, r2]

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80016b6:	687b      	ldr	r3, [r7, #4]
 80016b8:	681b      	ldr	r3, [r3, #0]
 80016ba:	681a      	ldr	r2, [r3, #0]
 80016bc:	687b      	ldr	r3, [r7, #4]
 80016be:	681b      	ldr	r3, [r3, #0]
 80016c0:	2101      	movs	r1, #1
 80016c2:	438a      	bics	r2, r1
 80016c4:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 80016c6:	687b      	ldr	r3, [r7, #4]
 80016c8:	685a      	ldr	r2, [r3, #4]
 80016ca:	687b      	ldr	r3, [r7, #4]
 80016cc:	681b      	ldr	r3, [r3, #0]
 80016ce:	493b      	ldr	r1, [pc, #236]	@ (80017bc <HAL_I2C_Init+0x13c>)
 80016d0:	400a      	ands	r2, r1
 80016d2:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 80016d4:	687b      	ldr	r3, [r7, #4]
 80016d6:	681b      	ldr	r3, [r3, #0]
 80016d8:	689a      	ldr	r2, [r3, #8]
 80016da:	687b      	ldr	r3, [r7, #4]
 80016dc:	681b      	ldr	r3, [r3, #0]
 80016de:	4938      	ldr	r1, [pc, #224]	@ (80017c0 <HAL_I2C_Init+0x140>)
 80016e0:	400a      	ands	r2, r1
 80016e2:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80016e4:	687b      	ldr	r3, [r7, #4]
 80016e6:	68db      	ldr	r3, [r3, #12]
 80016e8:	2b01      	cmp	r3, #1
 80016ea:	d108      	bne.n	80016fe <HAL_I2C_Init+0x7e>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 80016ec:	687b      	ldr	r3, [r7, #4]
 80016ee:	689a      	ldr	r2, [r3, #8]
 80016f0:	687b      	ldr	r3, [r7, #4]
 80016f2:	681b      	ldr	r3, [r3, #0]
 80016f4:	2180      	movs	r1, #128	@ 0x80
 80016f6:	0209      	lsls	r1, r1, #8
 80016f8:	430a      	orrs	r2, r1
 80016fa:	609a      	str	r2, [r3, #8]
 80016fc:	e007      	b.n	800170e <HAL_I2C_Init+0x8e>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 80016fe:	687b      	ldr	r3, [r7, #4]
 8001700:	689a      	ldr	r2, [r3, #8]
 8001702:	687b      	ldr	r3, [r7, #4]
 8001704:	681b      	ldr	r3, [r3, #0]
 8001706:	2184      	movs	r1, #132	@ 0x84
 8001708:	0209      	lsls	r1, r1, #8
 800170a:	430a      	orrs	r2, r1
 800170c:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 800170e:	687b      	ldr	r3, [r7, #4]
 8001710:	68db      	ldr	r3, [r3, #12]
 8001712:	2b02      	cmp	r3, #2
 8001714:	d109      	bne.n	800172a <HAL_I2C_Init+0xaa>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8001716:	687b      	ldr	r3, [r7, #4]
 8001718:	681b      	ldr	r3, [r3, #0]
 800171a:	685a      	ldr	r2, [r3, #4]
 800171c:	687b      	ldr	r3, [r7, #4]
 800171e:	681b      	ldr	r3, [r3, #0]
 8001720:	2180      	movs	r1, #128	@ 0x80
 8001722:	0109      	lsls	r1, r1, #4
 8001724:	430a      	orrs	r2, r1
 8001726:	605a      	str	r2, [r3, #4]
 8001728:	e007      	b.n	800173a <HAL_I2C_Init+0xba>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 800172a:	687b      	ldr	r3, [r7, #4]
 800172c:	681b      	ldr	r3, [r3, #0]
 800172e:	685a      	ldr	r2, [r3, #4]
 8001730:	687b      	ldr	r3, [r7, #4]
 8001732:	681b      	ldr	r3, [r3, #0]
 8001734:	4923      	ldr	r1, [pc, #140]	@ (80017c4 <HAL_I2C_Init+0x144>)
 8001736:	400a      	ands	r2, r1
 8001738:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 800173a:	687b      	ldr	r3, [r7, #4]
 800173c:	681b      	ldr	r3, [r3, #0]
 800173e:	685a      	ldr	r2, [r3, #4]
 8001740:	687b      	ldr	r3, [r7, #4]
 8001742:	681b      	ldr	r3, [r3, #0]
 8001744:	4920      	ldr	r1, [pc, #128]	@ (80017c8 <HAL_I2C_Init+0x148>)
 8001746:	430a      	orrs	r2, r1
 8001748:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 800174a:	687b      	ldr	r3, [r7, #4]
 800174c:	681b      	ldr	r3, [r3, #0]
 800174e:	68da      	ldr	r2, [r3, #12]
 8001750:	687b      	ldr	r3, [r7, #4]
 8001752:	681b      	ldr	r3, [r3, #0]
 8001754:	491a      	ldr	r1, [pc, #104]	@ (80017c0 <HAL_I2C_Init+0x140>)
 8001756:	400a      	ands	r2, r1
 8001758:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800175a:	687b      	ldr	r3, [r7, #4]
 800175c:	691a      	ldr	r2, [r3, #16]
 800175e:	687b      	ldr	r3, [r7, #4]
 8001760:	695b      	ldr	r3, [r3, #20]
 8001762:	431a      	orrs	r2, r3
 8001764:	0011      	movs	r1, r2
                          (hi2c->Init.OwnAddress2Masks << 8));
 8001766:	687b      	ldr	r3, [r7, #4]
 8001768:	699b      	ldr	r3, [r3, #24]
 800176a:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800176c:	687b      	ldr	r3, [r7, #4]
 800176e:	681b      	ldr	r3, [r3, #0]
 8001770:	430a      	orrs	r2, r1
 8001772:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8001774:	687b      	ldr	r3, [r7, #4]
 8001776:	69d9      	ldr	r1, [r3, #28]
 8001778:	687b      	ldr	r3, [r7, #4]
 800177a:	6a1a      	ldr	r2, [r3, #32]
 800177c:	687b      	ldr	r3, [r7, #4]
 800177e:	681b      	ldr	r3, [r3, #0]
 8001780:	430a      	orrs	r2, r1
 8001782:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001784:	687b      	ldr	r3, [r7, #4]
 8001786:	681b      	ldr	r3, [r3, #0]
 8001788:	681a      	ldr	r2, [r3, #0]
 800178a:	687b      	ldr	r3, [r7, #4]
 800178c:	681b      	ldr	r3, [r3, #0]
 800178e:	2101      	movs	r1, #1
 8001790:	430a      	orrs	r2, r1
 8001792:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001794:	687b      	ldr	r3, [r7, #4]
 8001796:	2200      	movs	r2, #0
 8001798:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 800179a:	687b      	ldr	r3, [r7, #4]
 800179c:	2241      	movs	r2, #65	@ 0x41
 800179e:	2120      	movs	r1, #32
 80017a0:	5499      	strb	r1, [r3, r2]
  hi2c->PreviousState = I2C_STATE_NONE;
 80017a2:	687b      	ldr	r3, [r7, #4]
 80017a4:	2200      	movs	r2, #0
 80017a6:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80017a8:	687b      	ldr	r3, [r7, #4]
 80017aa:	2242      	movs	r2, #66	@ 0x42
 80017ac:	2100      	movs	r1, #0
 80017ae:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80017b0:	2300      	movs	r3, #0
}
 80017b2:	0018      	movs	r0, r3
 80017b4:	46bd      	mov	sp, r7
 80017b6:	b002      	add	sp, #8
 80017b8:	bd80      	pop	{r7, pc}
 80017ba:	46c0      	nop			@ (mov r8, r8)
 80017bc:	f0ffffff 	.word	0xf0ffffff
 80017c0:	ffff7fff 	.word	0xffff7fff
 80017c4:	fffff7ff 	.word	0xfffff7ff
 80017c8:	02008000 	.word	0x02008000

080017cc <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                          uint16_t Size, uint32_t Timeout)
{
 80017cc:	b590      	push	{r4, r7, lr}
 80017ce:	b089      	sub	sp, #36	@ 0x24
 80017d0:	af02      	add	r7, sp, #8
 80017d2:	60f8      	str	r0, [r7, #12]
 80017d4:	0008      	movs	r0, r1
 80017d6:	607a      	str	r2, [r7, #4]
 80017d8:	0019      	movs	r1, r3
 80017da:	230a      	movs	r3, #10
 80017dc:	18fb      	adds	r3, r7, r3
 80017de:	1c02      	adds	r2, r0, #0
 80017e0:	801a      	strh	r2, [r3, #0]
 80017e2:	2308      	movs	r3, #8
 80017e4:	18fb      	adds	r3, r7, r3
 80017e6:	1c0a      	adds	r2, r1, #0
 80017e8:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;
  uint32_t xfermode;

  if (hi2c->State == HAL_I2C_STATE_READY)
 80017ea:	68fb      	ldr	r3, [r7, #12]
 80017ec:	2241      	movs	r2, #65	@ 0x41
 80017ee:	5c9b      	ldrb	r3, [r3, r2]
 80017f0:	b2db      	uxtb	r3, r3
 80017f2:	2b20      	cmp	r3, #32
 80017f4:	d000      	beq.n	80017f8 <HAL_I2C_Master_Transmit+0x2c>
 80017f6:	e10a      	b.n	8001a0e <HAL_I2C_Master_Transmit+0x242>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80017f8:	68fb      	ldr	r3, [r7, #12]
 80017fa:	2240      	movs	r2, #64	@ 0x40
 80017fc:	5c9b      	ldrb	r3, [r3, r2]
 80017fe:	2b01      	cmp	r3, #1
 8001800:	d101      	bne.n	8001806 <HAL_I2C_Master_Transmit+0x3a>
 8001802:	2302      	movs	r3, #2
 8001804:	e104      	b.n	8001a10 <HAL_I2C_Master_Transmit+0x244>
 8001806:	68fb      	ldr	r3, [r7, #12]
 8001808:	2240      	movs	r2, #64	@ 0x40
 800180a:	2101      	movs	r1, #1
 800180c:	5499      	strb	r1, [r3, r2]

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 800180e:	f7ff fc9b 	bl	8001148 <HAL_GetTick>
 8001812:	0003      	movs	r3, r0
 8001814:	613b      	str	r3, [r7, #16]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8001816:	2380      	movs	r3, #128	@ 0x80
 8001818:	0219      	lsls	r1, r3, #8
 800181a:	68f8      	ldr	r0, [r7, #12]
 800181c:	693b      	ldr	r3, [r7, #16]
 800181e:	9300      	str	r3, [sp, #0]
 8001820:	2319      	movs	r3, #25
 8001822:	2201      	movs	r2, #1
 8001824:	f000 fb22 	bl	8001e6c <I2C_WaitOnFlagUntilTimeout>
 8001828:	1e03      	subs	r3, r0, #0
 800182a:	d001      	beq.n	8001830 <HAL_I2C_Master_Transmit+0x64>
    {
      return HAL_ERROR;
 800182c:	2301      	movs	r3, #1
 800182e:	e0ef      	b.n	8001a10 <HAL_I2C_Master_Transmit+0x244>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8001830:	68fb      	ldr	r3, [r7, #12]
 8001832:	2241      	movs	r2, #65	@ 0x41
 8001834:	2121      	movs	r1, #33	@ 0x21
 8001836:	5499      	strb	r1, [r3, r2]
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8001838:	68fb      	ldr	r3, [r7, #12]
 800183a:	2242      	movs	r2, #66	@ 0x42
 800183c:	2110      	movs	r1, #16
 800183e:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001840:	68fb      	ldr	r3, [r7, #12]
 8001842:	2200      	movs	r2, #0
 8001844:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8001846:	68fb      	ldr	r3, [r7, #12]
 8001848:	687a      	ldr	r2, [r7, #4]
 800184a:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 800184c:	68fb      	ldr	r3, [r7, #12]
 800184e:	2208      	movs	r2, #8
 8001850:	18ba      	adds	r2, r7, r2
 8001852:	8812      	ldrh	r2, [r2, #0]
 8001854:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 8001856:	68fb      	ldr	r3, [r7, #12]
 8001858:	2200      	movs	r2, #0
 800185a:	635a      	str	r2, [r3, #52]	@ 0x34

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800185c:	68fb      	ldr	r3, [r7, #12]
 800185e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001860:	b29b      	uxth	r3, r3
 8001862:	2bff      	cmp	r3, #255	@ 0xff
 8001864:	d906      	bls.n	8001874 <HAL_I2C_Master_Transmit+0xa8>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8001866:	68fb      	ldr	r3, [r7, #12]
 8001868:	22ff      	movs	r2, #255	@ 0xff
 800186a:	851a      	strh	r2, [r3, #40]	@ 0x28
      xfermode = I2C_RELOAD_MODE;
 800186c:	2380      	movs	r3, #128	@ 0x80
 800186e:	045b      	lsls	r3, r3, #17
 8001870:	617b      	str	r3, [r7, #20]
 8001872:	e007      	b.n	8001884 <HAL_I2C_Master_Transmit+0xb8>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8001874:	68fb      	ldr	r3, [r7, #12]
 8001876:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001878:	b29a      	uxth	r2, r3
 800187a:	68fb      	ldr	r3, [r7, #12]
 800187c:	851a      	strh	r2, [r3, #40]	@ 0x28
      xfermode = I2C_AUTOEND_MODE;
 800187e:	2380      	movs	r3, #128	@ 0x80
 8001880:	049b      	lsls	r3, r3, #18
 8001882:	617b      	str	r3, [r7, #20]
    }

    if (hi2c->XferSize > 0U)
 8001884:	68fb      	ldr	r3, [r7, #12]
 8001886:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001888:	2b00      	cmp	r3, #0
 800188a:	d027      	beq.n	80018dc <HAL_I2C_Master_Transmit+0x110>
    {
      /* Preload TX register */
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 800188c:	68fb      	ldr	r3, [r7, #12]
 800188e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001890:	781a      	ldrb	r2, [r3, #0]
 8001892:	68fb      	ldr	r3, [r7, #12]
 8001894:	681b      	ldr	r3, [r3, #0]
 8001896:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8001898:	68fb      	ldr	r3, [r7, #12]
 800189a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800189c:	1c5a      	adds	r2, r3, #1
 800189e:	68fb      	ldr	r3, [r7, #12]
 80018a0:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 80018a2:	68fb      	ldr	r3, [r7, #12]
 80018a4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80018a6:	b29b      	uxth	r3, r3
 80018a8:	3b01      	subs	r3, #1
 80018aa:	b29a      	uxth	r2, r3
 80018ac:	68fb      	ldr	r3, [r7, #12]
 80018ae:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 80018b0:	68fb      	ldr	r3, [r7, #12]
 80018b2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80018b4:	3b01      	subs	r3, #1
 80018b6:	b29a      	uxth	r2, r3
 80018b8:	68fb      	ldr	r3, [r7, #12]
 80018ba:	851a      	strh	r2, [r3, #40]	@ 0x28

      /* Send Slave Address */
      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)(hi2c->XferSize + 1U), xfermode,
 80018bc:	68fb      	ldr	r3, [r7, #12]
 80018be:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80018c0:	b2db      	uxtb	r3, r3
 80018c2:	3301      	adds	r3, #1
 80018c4:	b2da      	uxtb	r2, r3
 80018c6:	697c      	ldr	r4, [r7, #20]
 80018c8:	230a      	movs	r3, #10
 80018ca:	18fb      	adds	r3, r7, r3
 80018cc:	8819      	ldrh	r1, [r3, #0]
 80018ce:	68f8      	ldr	r0, [r7, #12]
 80018d0:	4b51      	ldr	r3, [pc, #324]	@ (8001a18 <HAL_I2C_Master_Transmit+0x24c>)
 80018d2:	9300      	str	r3, [sp, #0]
 80018d4:	0023      	movs	r3, r4
 80018d6:	f000 fd41 	bl	800235c <I2C_TransferConfig>
 80018da:	e06f      	b.n	80019bc <HAL_I2C_Master_Transmit+0x1f0>
    }
    else
    {
      /* Send Slave Address */
      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, xfermode,
 80018dc:	68fb      	ldr	r3, [r7, #12]
 80018de:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80018e0:	b2da      	uxtb	r2, r3
 80018e2:	697c      	ldr	r4, [r7, #20]
 80018e4:	230a      	movs	r3, #10
 80018e6:	18fb      	adds	r3, r7, r3
 80018e8:	8819      	ldrh	r1, [r3, #0]
 80018ea:	68f8      	ldr	r0, [r7, #12]
 80018ec:	4b4a      	ldr	r3, [pc, #296]	@ (8001a18 <HAL_I2C_Master_Transmit+0x24c>)
 80018ee:	9300      	str	r3, [sp, #0]
 80018f0:	0023      	movs	r3, r4
 80018f2:	f000 fd33 	bl	800235c <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
 80018f6:	e061      	b.n	80019bc <HAL_I2C_Master_Transmit+0x1f0>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80018f8:	693a      	ldr	r2, [r7, #16]
 80018fa:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80018fc:	68fb      	ldr	r3, [r7, #12]
 80018fe:	0018      	movs	r0, r3
 8001900:	f000 fb0c 	bl	8001f1c <I2C_WaitOnTXISFlagUntilTimeout>
 8001904:	1e03      	subs	r3, r0, #0
 8001906:	d001      	beq.n	800190c <HAL_I2C_Master_Transmit+0x140>
      {
        return HAL_ERROR;
 8001908:	2301      	movs	r3, #1
 800190a:	e081      	b.n	8001a10 <HAL_I2C_Master_Transmit+0x244>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 800190c:	68fb      	ldr	r3, [r7, #12]
 800190e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001910:	781a      	ldrb	r2, [r3, #0]
 8001912:	68fb      	ldr	r3, [r7, #12]
 8001914:	681b      	ldr	r3, [r3, #0]
 8001916:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8001918:	68fb      	ldr	r3, [r7, #12]
 800191a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800191c:	1c5a      	adds	r2, r3, #1
 800191e:	68fb      	ldr	r3, [r7, #12]
 8001920:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 8001922:	68fb      	ldr	r3, [r7, #12]
 8001924:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001926:	b29b      	uxth	r3, r3
 8001928:	3b01      	subs	r3, #1
 800192a:	b29a      	uxth	r2, r3
 800192c:	68fb      	ldr	r3, [r7, #12]
 800192e:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8001930:	68fb      	ldr	r3, [r7, #12]
 8001932:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001934:	3b01      	subs	r3, #1
 8001936:	b29a      	uxth	r2, r3
 8001938:	68fb      	ldr	r3, [r7, #12]
 800193a:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800193c:	68fb      	ldr	r3, [r7, #12]
 800193e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001940:	b29b      	uxth	r3, r3
 8001942:	2b00      	cmp	r3, #0
 8001944:	d03a      	beq.n	80019bc <HAL_I2C_Master_Transmit+0x1f0>
 8001946:	68fb      	ldr	r3, [r7, #12]
 8001948:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800194a:	2b00      	cmp	r3, #0
 800194c:	d136      	bne.n	80019bc <HAL_I2C_Master_Transmit+0x1f0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800194e:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8001950:	68f8      	ldr	r0, [r7, #12]
 8001952:	693b      	ldr	r3, [r7, #16]
 8001954:	9300      	str	r3, [sp, #0]
 8001956:	0013      	movs	r3, r2
 8001958:	2200      	movs	r2, #0
 800195a:	2180      	movs	r1, #128	@ 0x80
 800195c:	f000 fa86 	bl	8001e6c <I2C_WaitOnFlagUntilTimeout>
 8001960:	1e03      	subs	r3, r0, #0
 8001962:	d001      	beq.n	8001968 <HAL_I2C_Master_Transmit+0x19c>
        {
          return HAL_ERROR;
 8001964:	2301      	movs	r3, #1
 8001966:	e053      	b.n	8001a10 <HAL_I2C_Master_Transmit+0x244>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8001968:	68fb      	ldr	r3, [r7, #12]
 800196a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800196c:	b29b      	uxth	r3, r3
 800196e:	2bff      	cmp	r3, #255	@ 0xff
 8001970:	d911      	bls.n	8001996 <HAL_I2C_Master_Transmit+0x1ca>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8001972:	68fb      	ldr	r3, [r7, #12]
 8001974:	22ff      	movs	r2, #255	@ 0xff
 8001976:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8001978:	68fb      	ldr	r3, [r7, #12]
 800197a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800197c:	b2da      	uxtb	r2, r3
 800197e:	2380      	movs	r3, #128	@ 0x80
 8001980:	045c      	lsls	r4, r3, #17
 8001982:	230a      	movs	r3, #10
 8001984:	18fb      	adds	r3, r7, r3
 8001986:	8819      	ldrh	r1, [r3, #0]
 8001988:	68f8      	ldr	r0, [r7, #12]
 800198a:	2300      	movs	r3, #0
 800198c:	9300      	str	r3, [sp, #0]
 800198e:	0023      	movs	r3, r4
 8001990:	f000 fce4 	bl	800235c <I2C_TransferConfig>
 8001994:	e012      	b.n	80019bc <HAL_I2C_Master_Transmit+0x1f0>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8001996:	68fb      	ldr	r3, [r7, #12]
 8001998:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800199a:	b29a      	uxth	r2, r3
 800199c:	68fb      	ldr	r3, [r7, #12]
 800199e:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80019a0:	68fb      	ldr	r3, [r7, #12]
 80019a2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80019a4:	b2da      	uxtb	r2, r3
 80019a6:	2380      	movs	r3, #128	@ 0x80
 80019a8:	049c      	lsls	r4, r3, #18
 80019aa:	230a      	movs	r3, #10
 80019ac:	18fb      	adds	r3, r7, r3
 80019ae:	8819      	ldrh	r1, [r3, #0]
 80019b0:	68f8      	ldr	r0, [r7, #12]
 80019b2:	2300      	movs	r3, #0
 80019b4:	9300      	str	r3, [sp, #0]
 80019b6:	0023      	movs	r3, r4
 80019b8:	f000 fcd0 	bl	800235c <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 80019bc:	68fb      	ldr	r3, [r7, #12]
 80019be:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80019c0:	b29b      	uxth	r3, r3
 80019c2:	2b00      	cmp	r3, #0
 80019c4:	d198      	bne.n	80018f8 <HAL_I2C_Master_Transmit+0x12c>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80019c6:	693a      	ldr	r2, [r7, #16]
 80019c8:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80019ca:	68fb      	ldr	r3, [r7, #12]
 80019cc:	0018      	movs	r0, r3
 80019ce:	f000 faeb 	bl	8001fa8 <I2C_WaitOnSTOPFlagUntilTimeout>
 80019d2:	1e03      	subs	r3, r0, #0
 80019d4:	d001      	beq.n	80019da <HAL_I2C_Master_Transmit+0x20e>
    {
      return HAL_ERROR;
 80019d6:	2301      	movs	r3, #1
 80019d8:	e01a      	b.n	8001a10 <HAL_I2C_Master_Transmit+0x244>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80019da:	68fb      	ldr	r3, [r7, #12]
 80019dc:	681b      	ldr	r3, [r3, #0]
 80019de:	2220      	movs	r2, #32
 80019e0:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80019e2:	68fb      	ldr	r3, [r7, #12]
 80019e4:	681b      	ldr	r3, [r3, #0]
 80019e6:	685a      	ldr	r2, [r3, #4]
 80019e8:	68fb      	ldr	r3, [r7, #12]
 80019ea:	681b      	ldr	r3, [r3, #0]
 80019ec:	490b      	ldr	r1, [pc, #44]	@ (8001a1c <HAL_I2C_Master_Transmit+0x250>)
 80019ee:	400a      	ands	r2, r1
 80019f0:	605a      	str	r2, [r3, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80019f2:	68fb      	ldr	r3, [r7, #12]
 80019f4:	2241      	movs	r2, #65	@ 0x41
 80019f6:	2120      	movs	r1, #32
 80019f8:	5499      	strb	r1, [r3, r2]
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80019fa:	68fb      	ldr	r3, [r7, #12]
 80019fc:	2242      	movs	r2, #66	@ 0x42
 80019fe:	2100      	movs	r1, #0
 8001a00:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001a02:	68fb      	ldr	r3, [r7, #12]
 8001a04:	2240      	movs	r2, #64	@ 0x40
 8001a06:	2100      	movs	r1, #0
 8001a08:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8001a0a:	2300      	movs	r3, #0
 8001a0c:	e000      	b.n	8001a10 <HAL_I2C_Master_Transmit+0x244>
  }
  else
  {
    return HAL_BUSY;
 8001a0e:	2302      	movs	r3, #2
  }
}
 8001a10:	0018      	movs	r0, r3
 8001a12:	46bd      	mov	sp, r7
 8001a14:	b007      	add	sp, #28
 8001a16:	bd90      	pop	{r4, r7, pc}
 8001a18:	80002000 	.word	0x80002000
 8001a1c:	fe00e800 	.word	0xfe00e800

08001a20 <HAL_I2C_Master_Receive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                         uint16_t Size, uint32_t Timeout)
{
 8001a20:	b590      	push	{r4, r7, lr}
 8001a22:	b089      	sub	sp, #36	@ 0x24
 8001a24:	af02      	add	r7, sp, #8
 8001a26:	60f8      	str	r0, [r7, #12]
 8001a28:	0008      	movs	r0, r1
 8001a2a:	607a      	str	r2, [r7, #4]
 8001a2c:	0019      	movs	r1, r3
 8001a2e:	230a      	movs	r3, #10
 8001a30:	18fb      	adds	r3, r7, r3
 8001a32:	1c02      	adds	r2, r0, #0
 8001a34:	801a      	strh	r2, [r3, #0]
 8001a36:	2308      	movs	r3, #8
 8001a38:	18fb      	adds	r3, r7, r3
 8001a3a:	1c0a      	adds	r2, r1, #0
 8001a3c:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001a3e:	68fb      	ldr	r3, [r7, #12]
 8001a40:	2241      	movs	r2, #65	@ 0x41
 8001a42:	5c9b      	ldrb	r3, [r3, r2]
 8001a44:	b2db      	uxtb	r3, r3
 8001a46:	2b20      	cmp	r3, #32
 8001a48:	d000      	beq.n	8001a4c <HAL_I2C_Master_Receive+0x2c>
 8001a4a:	e0e8      	b.n	8001c1e <HAL_I2C_Master_Receive+0x1fe>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001a4c:	68fb      	ldr	r3, [r7, #12]
 8001a4e:	2240      	movs	r2, #64	@ 0x40
 8001a50:	5c9b      	ldrb	r3, [r3, r2]
 8001a52:	2b01      	cmp	r3, #1
 8001a54:	d101      	bne.n	8001a5a <HAL_I2C_Master_Receive+0x3a>
 8001a56:	2302      	movs	r3, #2
 8001a58:	e0e2      	b.n	8001c20 <HAL_I2C_Master_Receive+0x200>
 8001a5a:	68fb      	ldr	r3, [r7, #12]
 8001a5c:	2240      	movs	r2, #64	@ 0x40
 8001a5e:	2101      	movs	r1, #1
 8001a60:	5499      	strb	r1, [r3, r2]

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8001a62:	f7ff fb71 	bl	8001148 <HAL_GetTick>
 8001a66:	0003      	movs	r3, r0
 8001a68:	617b      	str	r3, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8001a6a:	2380      	movs	r3, #128	@ 0x80
 8001a6c:	0219      	lsls	r1, r3, #8
 8001a6e:	68f8      	ldr	r0, [r7, #12]
 8001a70:	697b      	ldr	r3, [r7, #20]
 8001a72:	9300      	str	r3, [sp, #0]
 8001a74:	2319      	movs	r3, #25
 8001a76:	2201      	movs	r2, #1
 8001a78:	f000 f9f8 	bl	8001e6c <I2C_WaitOnFlagUntilTimeout>
 8001a7c:	1e03      	subs	r3, r0, #0
 8001a7e:	d001      	beq.n	8001a84 <HAL_I2C_Master_Receive+0x64>
    {
      return HAL_ERROR;
 8001a80:	2301      	movs	r3, #1
 8001a82:	e0cd      	b.n	8001c20 <HAL_I2C_Master_Receive+0x200>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8001a84:	68fb      	ldr	r3, [r7, #12]
 8001a86:	2241      	movs	r2, #65	@ 0x41
 8001a88:	2122      	movs	r1, #34	@ 0x22
 8001a8a:	5499      	strb	r1, [r3, r2]
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8001a8c:	68fb      	ldr	r3, [r7, #12]
 8001a8e:	2242      	movs	r2, #66	@ 0x42
 8001a90:	2110      	movs	r1, #16
 8001a92:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001a94:	68fb      	ldr	r3, [r7, #12]
 8001a96:	2200      	movs	r2, #0
 8001a98:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8001a9a:	68fb      	ldr	r3, [r7, #12]
 8001a9c:	687a      	ldr	r2, [r7, #4]
 8001a9e:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 8001aa0:	68fb      	ldr	r3, [r7, #12]
 8001aa2:	2208      	movs	r2, #8
 8001aa4:	18ba      	adds	r2, r7, r2
 8001aa6:	8812      	ldrh	r2, [r2, #0]
 8001aa8:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 8001aaa:	68fb      	ldr	r3, [r7, #12]
 8001aac:	2200      	movs	r2, #0
 8001aae:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8001ab0:	68fb      	ldr	r3, [r7, #12]
 8001ab2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001ab4:	b29b      	uxth	r3, r3
 8001ab6:	2bff      	cmp	r3, #255	@ 0xff
 8001ab8:	d911      	bls.n	8001ade <HAL_I2C_Master_Receive+0xbe>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8001aba:	68fb      	ldr	r3, [r7, #12]
 8001abc:	22ff      	movs	r2, #255	@ 0xff
 8001abe:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8001ac0:	68fb      	ldr	r3, [r7, #12]
 8001ac2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001ac4:	b2da      	uxtb	r2, r3
 8001ac6:	2380      	movs	r3, #128	@ 0x80
 8001ac8:	045c      	lsls	r4, r3, #17
 8001aca:	230a      	movs	r3, #10
 8001acc:	18fb      	adds	r3, r7, r3
 8001ace:	8819      	ldrh	r1, [r3, #0]
 8001ad0:	68f8      	ldr	r0, [r7, #12]
 8001ad2:	4b55      	ldr	r3, [pc, #340]	@ (8001c28 <HAL_I2C_Master_Receive+0x208>)
 8001ad4:	9300      	str	r3, [sp, #0]
 8001ad6:	0023      	movs	r3, r4
 8001ad8:	f000 fc40 	bl	800235c <I2C_TransferConfig>
 8001adc:	e076      	b.n	8001bcc <HAL_I2C_Master_Receive+0x1ac>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8001ade:	68fb      	ldr	r3, [r7, #12]
 8001ae0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001ae2:	b29a      	uxth	r2, r3
 8001ae4:	68fb      	ldr	r3, [r7, #12]
 8001ae6:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8001ae8:	68fb      	ldr	r3, [r7, #12]
 8001aea:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001aec:	b2da      	uxtb	r2, r3
 8001aee:	2380      	movs	r3, #128	@ 0x80
 8001af0:	049c      	lsls	r4, r3, #18
 8001af2:	230a      	movs	r3, #10
 8001af4:	18fb      	adds	r3, r7, r3
 8001af6:	8819      	ldrh	r1, [r3, #0]
 8001af8:	68f8      	ldr	r0, [r7, #12]
 8001afa:	4b4b      	ldr	r3, [pc, #300]	@ (8001c28 <HAL_I2C_Master_Receive+0x208>)
 8001afc:	9300      	str	r3, [sp, #0]
 8001afe:	0023      	movs	r3, r4
 8001b00:	f000 fc2c 	bl	800235c <I2C_TransferConfig>
                         I2C_GENERATE_START_READ);
    }

    while (hi2c->XferCount > 0U)
 8001b04:	e062      	b.n	8001bcc <HAL_I2C_Master_Receive+0x1ac>
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001b06:	697a      	ldr	r2, [r7, #20]
 8001b08:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8001b0a:	68fb      	ldr	r3, [r7, #12]
 8001b0c:	0018      	movs	r0, r3
 8001b0e:	f000 fa8f 	bl	8002030 <I2C_WaitOnRXNEFlagUntilTimeout>
 8001b12:	1e03      	subs	r3, r0, #0
 8001b14:	d001      	beq.n	8001b1a <HAL_I2C_Master_Receive+0xfa>
      {
        return HAL_ERROR;
 8001b16:	2301      	movs	r3, #1
 8001b18:	e082      	b.n	8001c20 <HAL_I2C_Master_Receive+0x200>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8001b1a:	68fb      	ldr	r3, [r7, #12]
 8001b1c:	681b      	ldr	r3, [r3, #0]
 8001b1e:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8001b20:	68fb      	ldr	r3, [r7, #12]
 8001b22:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001b24:	b2d2      	uxtb	r2, r2
 8001b26:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8001b28:	68fb      	ldr	r3, [r7, #12]
 8001b2a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001b2c:	1c5a      	adds	r2, r3, #1
 8001b2e:	68fb      	ldr	r3, [r7, #12]
 8001b30:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
 8001b32:	68fb      	ldr	r3, [r7, #12]
 8001b34:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001b36:	3b01      	subs	r3, #1
 8001b38:	b29a      	uxth	r2, r3
 8001b3a:	68fb      	ldr	r3, [r7, #12]
 8001b3c:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8001b3e:	68fb      	ldr	r3, [r7, #12]
 8001b40:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001b42:	b29b      	uxth	r3, r3
 8001b44:	3b01      	subs	r3, #1
 8001b46:	b29a      	uxth	r2, r3
 8001b48:	68fb      	ldr	r3, [r7, #12]
 8001b4a:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8001b4c:	68fb      	ldr	r3, [r7, #12]
 8001b4e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001b50:	b29b      	uxth	r3, r3
 8001b52:	2b00      	cmp	r3, #0
 8001b54:	d03a      	beq.n	8001bcc <HAL_I2C_Master_Receive+0x1ac>
 8001b56:	68fb      	ldr	r3, [r7, #12]
 8001b58:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001b5a:	2b00      	cmp	r3, #0
 8001b5c:	d136      	bne.n	8001bcc <HAL_I2C_Master_Receive+0x1ac>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8001b5e:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8001b60:	68f8      	ldr	r0, [r7, #12]
 8001b62:	697b      	ldr	r3, [r7, #20]
 8001b64:	9300      	str	r3, [sp, #0]
 8001b66:	0013      	movs	r3, r2
 8001b68:	2200      	movs	r2, #0
 8001b6a:	2180      	movs	r1, #128	@ 0x80
 8001b6c:	f000 f97e 	bl	8001e6c <I2C_WaitOnFlagUntilTimeout>
 8001b70:	1e03      	subs	r3, r0, #0
 8001b72:	d001      	beq.n	8001b78 <HAL_I2C_Master_Receive+0x158>
        {
          return HAL_ERROR;
 8001b74:	2301      	movs	r3, #1
 8001b76:	e053      	b.n	8001c20 <HAL_I2C_Master_Receive+0x200>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8001b78:	68fb      	ldr	r3, [r7, #12]
 8001b7a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001b7c:	b29b      	uxth	r3, r3
 8001b7e:	2bff      	cmp	r3, #255	@ 0xff
 8001b80:	d911      	bls.n	8001ba6 <HAL_I2C_Master_Receive+0x186>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8001b82:	68fb      	ldr	r3, [r7, #12]
 8001b84:	22ff      	movs	r2, #255	@ 0xff
 8001b86:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8001b88:	68fb      	ldr	r3, [r7, #12]
 8001b8a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001b8c:	b2da      	uxtb	r2, r3
 8001b8e:	2380      	movs	r3, #128	@ 0x80
 8001b90:	045c      	lsls	r4, r3, #17
 8001b92:	230a      	movs	r3, #10
 8001b94:	18fb      	adds	r3, r7, r3
 8001b96:	8819      	ldrh	r1, [r3, #0]
 8001b98:	68f8      	ldr	r0, [r7, #12]
 8001b9a:	2300      	movs	r3, #0
 8001b9c:	9300      	str	r3, [sp, #0]
 8001b9e:	0023      	movs	r3, r4
 8001ba0:	f000 fbdc 	bl	800235c <I2C_TransferConfig>
 8001ba4:	e012      	b.n	8001bcc <HAL_I2C_Master_Receive+0x1ac>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8001ba6:	68fb      	ldr	r3, [r7, #12]
 8001ba8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001baa:	b29a      	uxth	r2, r3
 8001bac:	68fb      	ldr	r3, [r7, #12]
 8001bae:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8001bb0:	68fb      	ldr	r3, [r7, #12]
 8001bb2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001bb4:	b2da      	uxtb	r2, r3
 8001bb6:	2380      	movs	r3, #128	@ 0x80
 8001bb8:	049c      	lsls	r4, r3, #18
 8001bba:	230a      	movs	r3, #10
 8001bbc:	18fb      	adds	r3, r7, r3
 8001bbe:	8819      	ldrh	r1, [r3, #0]
 8001bc0:	68f8      	ldr	r0, [r7, #12]
 8001bc2:	2300      	movs	r3, #0
 8001bc4:	9300      	str	r3, [sp, #0]
 8001bc6:	0023      	movs	r3, r4
 8001bc8:	f000 fbc8 	bl	800235c <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8001bcc:	68fb      	ldr	r3, [r7, #12]
 8001bce:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001bd0:	b29b      	uxth	r3, r3
 8001bd2:	2b00      	cmp	r3, #0
 8001bd4:	d197      	bne.n	8001b06 <HAL_I2C_Master_Receive+0xe6>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001bd6:	697a      	ldr	r2, [r7, #20]
 8001bd8:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8001bda:	68fb      	ldr	r3, [r7, #12]
 8001bdc:	0018      	movs	r0, r3
 8001bde:	f000 f9e3 	bl	8001fa8 <I2C_WaitOnSTOPFlagUntilTimeout>
 8001be2:	1e03      	subs	r3, r0, #0
 8001be4:	d001      	beq.n	8001bea <HAL_I2C_Master_Receive+0x1ca>
    {
      return HAL_ERROR;
 8001be6:	2301      	movs	r3, #1
 8001be8:	e01a      	b.n	8001c20 <HAL_I2C_Master_Receive+0x200>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8001bea:	68fb      	ldr	r3, [r7, #12]
 8001bec:	681b      	ldr	r3, [r3, #0]
 8001bee:	2220      	movs	r2, #32
 8001bf0:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8001bf2:	68fb      	ldr	r3, [r7, #12]
 8001bf4:	681b      	ldr	r3, [r3, #0]
 8001bf6:	685a      	ldr	r2, [r3, #4]
 8001bf8:	68fb      	ldr	r3, [r7, #12]
 8001bfa:	681b      	ldr	r3, [r3, #0]
 8001bfc:	490b      	ldr	r1, [pc, #44]	@ (8001c2c <HAL_I2C_Master_Receive+0x20c>)
 8001bfe:	400a      	ands	r2, r1
 8001c00:	605a      	str	r2, [r3, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8001c02:	68fb      	ldr	r3, [r7, #12]
 8001c04:	2241      	movs	r2, #65	@ 0x41
 8001c06:	2120      	movs	r1, #32
 8001c08:	5499      	strb	r1, [r3, r2]
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8001c0a:	68fb      	ldr	r3, [r7, #12]
 8001c0c:	2242      	movs	r2, #66	@ 0x42
 8001c0e:	2100      	movs	r1, #0
 8001c10:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001c12:	68fb      	ldr	r3, [r7, #12]
 8001c14:	2240      	movs	r2, #64	@ 0x40
 8001c16:	2100      	movs	r1, #0
 8001c18:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8001c1a:	2300      	movs	r3, #0
 8001c1c:	e000      	b.n	8001c20 <HAL_I2C_Master_Receive+0x200>
  }
  else
  {
    return HAL_BUSY;
 8001c1e:	2302      	movs	r3, #2
  }
}
 8001c20:	0018      	movs	r0, r3
 8001c22:	46bd      	mov	sp, r7
 8001c24:	b007      	add	sp, #28
 8001c26:	bd90      	pop	{r4, r7, pc}
 8001c28:	80002400 	.word	0x80002400
 8001c2c:	fe00e800 	.word	0xfe00e800

08001c30 <HAL_I2C_IsDeviceReady>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials,
                                        uint32_t Timeout)
{
 8001c30:	b580      	push	{r7, lr}
 8001c32:	b08a      	sub	sp, #40	@ 0x28
 8001c34:	af02      	add	r7, sp, #8
 8001c36:	60f8      	str	r0, [r7, #12]
 8001c38:	607a      	str	r2, [r7, #4]
 8001c3a:	603b      	str	r3, [r7, #0]
 8001c3c:	230a      	movs	r3, #10
 8001c3e:	18fb      	adds	r3, r7, r3
 8001c40:	1c0a      	adds	r2, r1, #0
 8001c42:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;

  __IO uint32_t I2C_Trials = 0UL;
 8001c44:	2300      	movs	r3, #0
 8001c46:	617b      	str	r3, [r7, #20]

  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001c48:	68fb      	ldr	r3, [r7, #12]
 8001c4a:	2241      	movs	r2, #65	@ 0x41
 8001c4c:	5c9b      	ldrb	r3, [r3, r2]
 8001c4e:	b2db      	uxtb	r3, r3
 8001c50:	2b20      	cmp	r3, #32
 8001c52:	d000      	beq.n	8001c56 <HAL_I2C_IsDeviceReady+0x26>
 8001c54:	e0df      	b.n	8001e16 <HAL_I2C_IsDeviceReady+0x1e6>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) == SET)
 8001c56:	68fb      	ldr	r3, [r7, #12]
 8001c58:	681b      	ldr	r3, [r3, #0]
 8001c5a:	699a      	ldr	r2, [r3, #24]
 8001c5c:	2380      	movs	r3, #128	@ 0x80
 8001c5e:	021b      	lsls	r3, r3, #8
 8001c60:	401a      	ands	r2, r3
 8001c62:	2380      	movs	r3, #128	@ 0x80
 8001c64:	021b      	lsls	r3, r3, #8
 8001c66:	429a      	cmp	r2, r3
 8001c68:	d101      	bne.n	8001c6e <HAL_I2C_IsDeviceReady+0x3e>
    {
      return HAL_BUSY;
 8001c6a:	2302      	movs	r3, #2
 8001c6c:	e0d4      	b.n	8001e18 <HAL_I2C_IsDeviceReady+0x1e8>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001c6e:	68fb      	ldr	r3, [r7, #12]
 8001c70:	2240      	movs	r2, #64	@ 0x40
 8001c72:	5c9b      	ldrb	r3, [r3, r2]
 8001c74:	2b01      	cmp	r3, #1
 8001c76:	d101      	bne.n	8001c7c <HAL_I2C_IsDeviceReady+0x4c>
 8001c78:	2302      	movs	r3, #2
 8001c7a:	e0cd      	b.n	8001e18 <HAL_I2C_IsDeviceReady+0x1e8>
 8001c7c:	68fb      	ldr	r3, [r7, #12]
 8001c7e:	2240      	movs	r2, #64	@ 0x40
 8001c80:	2101      	movs	r1, #1
 8001c82:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8001c84:	68fb      	ldr	r3, [r7, #12]
 8001c86:	2241      	movs	r2, #65	@ 0x41
 8001c88:	2124      	movs	r1, #36	@ 0x24
 8001c8a:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001c8c:	68fb      	ldr	r3, [r7, #12]
 8001c8e:	2200      	movs	r2, #0
 8001c90:	645a      	str	r2, [r3, #68]	@ 0x44

    do
    {
      /* Generate Start */
      hi2c->Instance->CR2 = I2C_GENERATE_START(hi2c->Init.AddressingMode, DevAddress);
 8001c92:	68fb      	ldr	r3, [r7, #12]
 8001c94:	68db      	ldr	r3, [r3, #12]
 8001c96:	2b01      	cmp	r3, #1
 8001c98:	d107      	bne.n	8001caa <HAL_I2C_IsDeviceReady+0x7a>
 8001c9a:	230a      	movs	r3, #10
 8001c9c:	18fb      	adds	r3, r7, r3
 8001c9e:	881b      	ldrh	r3, [r3, #0]
 8001ca0:	059b      	lsls	r3, r3, #22
 8001ca2:	0d9b      	lsrs	r3, r3, #22
 8001ca4:	4a5e      	ldr	r2, [pc, #376]	@ (8001e20 <HAL_I2C_IsDeviceReady+0x1f0>)
 8001ca6:	431a      	orrs	r2, r3
 8001ca8:	e006      	b.n	8001cb8 <HAL_I2C_IsDeviceReady+0x88>
 8001caa:	230a      	movs	r3, #10
 8001cac:	18fb      	adds	r3, r7, r3
 8001cae:	881b      	ldrh	r3, [r3, #0]
 8001cb0:	059b      	lsls	r3, r3, #22
 8001cb2:	0d9b      	lsrs	r3, r3, #22
 8001cb4:	4a5b      	ldr	r2, [pc, #364]	@ (8001e24 <HAL_I2C_IsDeviceReady+0x1f4>)
 8001cb6:	431a      	orrs	r2, r3
 8001cb8:	68fb      	ldr	r3, [r7, #12]
 8001cba:	681b      	ldr	r3, [r3, #0]
 8001cbc:	605a      	str	r2, [r3, #4]

      /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
      /* Wait until STOPF flag is set or a NACK flag is set*/
      tickstart = HAL_GetTick();
 8001cbe:	f7ff fa43 	bl	8001148 <HAL_GetTick>
 8001cc2:	0003      	movs	r3, r0
 8001cc4:	61bb      	str	r3, [r7, #24]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF);
 8001cc6:	68fb      	ldr	r3, [r7, #12]
 8001cc8:	681b      	ldr	r3, [r3, #0]
 8001cca:	699b      	ldr	r3, [r3, #24]
 8001ccc:	2220      	movs	r2, #32
 8001cce:	4013      	ands	r3, r2
 8001cd0:	3b20      	subs	r3, #32
 8001cd2:	425a      	negs	r2, r3
 8001cd4:	4153      	adcs	r3, r2
 8001cd6:	b2da      	uxtb	r2, r3
 8001cd8:	231f      	movs	r3, #31
 8001cda:	18fb      	adds	r3, r7, r3
 8001cdc:	701a      	strb	r2, [r3, #0]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8001cde:	68fb      	ldr	r3, [r7, #12]
 8001ce0:	681b      	ldr	r3, [r3, #0]
 8001ce2:	699b      	ldr	r3, [r3, #24]
 8001ce4:	2210      	movs	r2, #16
 8001ce6:	4013      	ands	r3, r2
 8001ce8:	3b10      	subs	r3, #16
 8001cea:	425a      	negs	r2, r3
 8001cec:	4153      	adcs	r3, r2
 8001cee:	b2da      	uxtb	r2, r3
 8001cf0:	231e      	movs	r3, #30
 8001cf2:	18fb      	adds	r3, r7, r3
 8001cf4:	701a      	strb	r2, [r3, #0]

      while ((tmp1 == RESET) && (tmp2 == RESET))
 8001cf6:	e035      	b.n	8001d64 <HAL_I2C_IsDeviceReady+0x134>
      {
        if (Timeout != HAL_MAX_DELAY)
 8001cf8:	683b      	ldr	r3, [r7, #0]
 8001cfa:	3301      	adds	r3, #1
 8001cfc:	d01a      	beq.n	8001d34 <HAL_I2C_IsDeviceReady+0x104>
        {
          if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8001cfe:	f7ff fa23 	bl	8001148 <HAL_GetTick>
 8001d02:	0002      	movs	r2, r0
 8001d04:	69bb      	ldr	r3, [r7, #24]
 8001d06:	1ad3      	subs	r3, r2, r3
 8001d08:	683a      	ldr	r2, [r7, #0]
 8001d0a:	429a      	cmp	r2, r3
 8001d0c:	d302      	bcc.n	8001d14 <HAL_I2C_IsDeviceReady+0xe4>
 8001d0e:	683b      	ldr	r3, [r7, #0]
 8001d10:	2b00      	cmp	r3, #0
 8001d12:	d10f      	bne.n	8001d34 <HAL_I2C_IsDeviceReady+0x104>
          {
            /* Update I2C state */
            hi2c->State = HAL_I2C_STATE_READY;
 8001d14:	68fb      	ldr	r3, [r7, #12]
 8001d16:	2241      	movs	r2, #65	@ 0x41
 8001d18:	2120      	movs	r1, #32
 8001d1a:	5499      	strb	r1, [r3, r2]

            /* Update I2C error code */
            hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001d1c:	68fb      	ldr	r3, [r7, #12]
 8001d1e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001d20:	2220      	movs	r2, #32
 8001d22:	431a      	orrs	r2, r3
 8001d24:	68fb      	ldr	r3, [r7, #12]
 8001d26:	645a      	str	r2, [r3, #68]	@ 0x44

            /* Process Unlocked */
            __HAL_UNLOCK(hi2c);
 8001d28:	68fb      	ldr	r3, [r7, #12]
 8001d2a:	2240      	movs	r2, #64	@ 0x40
 8001d2c:	2100      	movs	r1, #0
 8001d2e:	5499      	strb	r1, [r3, r2]

            return HAL_ERROR;
 8001d30:	2301      	movs	r3, #1
 8001d32:	e071      	b.n	8001e18 <HAL_I2C_IsDeviceReady+0x1e8>
          }
        }

        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF);
 8001d34:	68fb      	ldr	r3, [r7, #12]
 8001d36:	681b      	ldr	r3, [r3, #0]
 8001d38:	699b      	ldr	r3, [r3, #24]
 8001d3a:	2220      	movs	r2, #32
 8001d3c:	4013      	ands	r3, r2
 8001d3e:	3b20      	subs	r3, #32
 8001d40:	425a      	negs	r2, r3
 8001d42:	4153      	adcs	r3, r2
 8001d44:	b2da      	uxtb	r2, r3
 8001d46:	231f      	movs	r3, #31
 8001d48:	18fb      	adds	r3, r7, r3
 8001d4a:	701a      	strb	r2, [r3, #0]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8001d4c:	68fb      	ldr	r3, [r7, #12]
 8001d4e:	681b      	ldr	r3, [r3, #0]
 8001d50:	699b      	ldr	r3, [r3, #24]
 8001d52:	2210      	movs	r2, #16
 8001d54:	4013      	ands	r3, r2
 8001d56:	3b10      	subs	r3, #16
 8001d58:	425a      	negs	r2, r3
 8001d5a:	4153      	adcs	r3, r2
 8001d5c:	b2da      	uxtb	r2, r3
 8001d5e:	231e      	movs	r3, #30
 8001d60:	18fb      	adds	r3, r7, r3
 8001d62:	701a      	strb	r2, [r3, #0]
      while ((tmp1 == RESET) && (tmp2 == RESET))
 8001d64:	231f      	movs	r3, #31
 8001d66:	18fb      	adds	r3, r7, r3
 8001d68:	781b      	ldrb	r3, [r3, #0]
 8001d6a:	2b00      	cmp	r3, #0
 8001d6c:	d104      	bne.n	8001d78 <HAL_I2C_IsDeviceReady+0x148>
 8001d6e:	231e      	movs	r3, #30
 8001d70:	18fb      	adds	r3, r7, r3
 8001d72:	781b      	ldrb	r3, [r3, #0]
 8001d74:	2b00      	cmp	r3, #0
 8001d76:	d0bf      	beq.n	8001cf8 <HAL_I2C_IsDeviceReady+0xc8>
      }

      /* Check if the NACKF flag has not been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == RESET)
 8001d78:	68fb      	ldr	r3, [r7, #12]
 8001d7a:	681b      	ldr	r3, [r3, #0]
 8001d7c:	699b      	ldr	r3, [r3, #24]
 8001d7e:	2210      	movs	r2, #16
 8001d80:	4013      	ands	r3, r2
 8001d82:	2b10      	cmp	r3, #16
 8001d84:	d01a      	beq.n	8001dbc <HAL_I2C_IsDeviceReady+0x18c>
      {
        /* Wait until STOPF flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 8001d86:	683a      	ldr	r2, [r7, #0]
 8001d88:	68f8      	ldr	r0, [r7, #12]
 8001d8a:	69bb      	ldr	r3, [r7, #24]
 8001d8c:	9300      	str	r3, [sp, #0]
 8001d8e:	0013      	movs	r3, r2
 8001d90:	2200      	movs	r2, #0
 8001d92:	2120      	movs	r1, #32
 8001d94:	f000 f86a 	bl	8001e6c <I2C_WaitOnFlagUntilTimeout>
 8001d98:	1e03      	subs	r3, r0, #0
 8001d9a:	d001      	beq.n	8001da0 <HAL_I2C_IsDeviceReady+0x170>
        {
          return HAL_ERROR;
 8001d9c:	2301      	movs	r3, #1
 8001d9e:	e03b      	b.n	8001e18 <HAL_I2C_IsDeviceReady+0x1e8>
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8001da0:	68fb      	ldr	r3, [r7, #12]
 8001da2:	681b      	ldr	r3, [r3, #0]
 8001da4:	2220      	movs	r2, #32
 8001da6:	61da      	str	r2, [r3, #28]

        /* Device is ready */
        hi2c->State = HAL_I2C_STATE_READY;
 8001da8:	68fb      	ldr	r3, [r7, #12]
 8001daa:	2241      	movs	r2, #65	@ 0x41
 8001dac:	2120      	movs	r1, #32
 8001dae:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8001db0:	68fb      	ldr	r3, [r7, #12]
 8001db2:	2240      	movs	r2, #64	@ 0x40
 8001db4:	2100      	movs	r1, #0
 8001db6:	5499      	strb	r1, [r3, r2]

        return HAL_OK;
 8001db8:	2300      	movs	r3, #0
 8001dba:	e02d      	b.n	8001e18 <HAL_I2C_IsDeviceReady+0x1e8>
      }
      else
      {
        /* Wait until STOPF flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 8001dbc:	683a      	ldr	r2, [r7, #0]
 8001dbe:	68f8      	ldr	r0, [r7, #12]
 8001dc0:	69bb      	ldr	r3, [r7, #24]
 8001dc2:	9300      	str	r3, [sp, #0]
 8001dc4:	0013      	movs	r3, r2
 8001dc6:	2200      	movs	r2, #0
 8001dc8:	2120      	movs	r1, #32
 8001dca:	f000 f84f 	bl	8001e6c <I2C_WaitOnFlagUntilTimeout>
 8001dce:	1e03      	subs	r3, r0, #0
 8001dd0:	d001      	beq.n	8001dd6 <HAL_I2C_IsDeviceReady+0x1a6>
        {
          return HAL_ERROR;
 8001dd2:	2301      	movs	r3, #1
 8001dd4:	e020      	b.n	8001e18 <HAL_I2C_IsDeviceReady+0x1e8>
        }

        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001dd6:	68fb      	ldr	r3, [r7, #12]
 8001dd8:	681b      	ldr	r3, [r3, #0]
 8001dda:	2210      	movs	r2, #16
 8001ddc:	61da      	str	r2, [r3, #28]

        /* Clear STOP Flag, auto generated with autoend*/
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8001dde:	68fb      	ldr	r3, [r7, #12]
 8001de0:	681b      	ldr	r3, [r3, #0]
 8001de2:	2220      	movs	r2, #32
 8001de4:	61da      	str	r2, [r3, #28]
      }

      /* Increment Trials */
      I2C_Trials++;
 8001de6:	697b      	ldr	r3, [r7, #20]
 8001de8:	3301      	adds	r3, #1
 8001dea:	617b      	str	r3, [r7, #20]
    } while (I2C_Trials < Trials);
 8001dec:	697b      	ldr	r3, [r7, #20]
 8001dee:	687a      	ldr	r2, [r7, #4]
 8001df0:	429a      	cmp	r2, r3
 8001df2:	d900      	bls.n	8001df6 <HAL_I2C_IsDeviceReady+0x1c6>
 8001df4:	e74d      	b.n	8001c92 <HAL_I2C_IsDeviceReady+0x62>

    /* Update I2C state */
    hi2c->State = HAL_I2C_STATE_READY;
 8001df6:	68fb      	ldr	r3, [r7, #12]
 8001df8:	2241      	movs	r2, #65	@ 0x41
 8001dfa:	2120      	movs	r1, #32
 8001dfc:	5499      	strb	r1, [r3, r2]

    /* Update I2C error code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001dfe:	68fb      	ldr	r3, [r7, #12]
 8001e00:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001e02:	2220      	movs	r2, #32
 8001e04:	431a      	orrs	r2, r3
 8001e06:	68fb      	ldr	r3, [r7, #12]
 8001e08:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001e0a:	68fb      	ldr	r3, [r7, #12]
 8001e0c:	2240      	movs	r2, #64	@ 0x40
 8001e0e:	2100      	movs	r1, #0
 8001e10:	5499      	strb	r1, [r3, r2]

    return HAL_ERROR;
 8001e12:	2301      	movs	r3, #1
 8001e14:	e000      	b.n	8001e18 <HAL_I2C_IsDeviceReady+0x1e8>
  }
  else
  {
    return HAL_BUSY;
 8001e16:	2302      	movs	r3, #2
  }
}
 8001e18:	0018      	movs	r0, r3
 8001e1a:	46bd      	mov	sp, r7
 8001e1c:	b008      	add	sp, #32
 8001e1e:	bd80      	pop	{r7, pc}
 8001e20:	02002000 	.word	0x02002000
 8001e24:	02002800 	.word	0x02002800

08001e28 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8001e28:	b580      	push	{r7, lr}
 8001e2a:	b082      	sub	sp, #8
 8001e2c:	af00      	add	r7, sp, #0
 8001e2e:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8001e30:	687b      	ldr	r3, [r7, #4]
 8001e32:	681b      	ldr	r3, [r3, #0]
 8001e34:	699b      	ldr	r3, [r3, #24]
 8001e36:	2202      	movs	r2, #2
 8001e38:	4013      	ands	r3, r2
 8001e3a:	2b02      	cmp	r3, #2
 8001e3c:	d103      	bne.n	8001e46 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8001e3e:	687b      	ldr	r3, [r7, #4]
 8001e40:	681b      	ldr	r3, [r3, #0]
 8001e42:	2200      	movs	r2, #0
 8001e44:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8001e46:	687b      	ldr	r3, [r7, #4]
 8001e48:	681b      	ldr	r3, [r3, #0]
 8001e4a:	699b      	ldr	r3, [r3, #24]
 8001e4c:	2201      	movs	r2, #1
 8001e4e:	4013      	ands	r3, r2
 8001e50:	2b01      	cmp	r3, #1
 8001e52:	d007      	beq.n	8001e64 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8001e54:	687b      	ldr	r3, [r7, #4]
 8001e56:	681b      	ldr	r3, [r3, #0]
 8001e58:	699a      	ldr	r2, [r3, #24]
 8001e5a:	687b      	ldr	r3, [r7, #4]
 8001e5c:	681b      	ldr	r3, [r3, #0]
 8001e5e:	2101      	movs	r1, #1
 8001e60:	430a      	orrs	r2, r1
 8001e62:	619a      	str	r2, [r3, #24]
  }
}
 8001e64:	46c0      	nop			@ (mov r8, r8)
 8001e66:	46bd      	mov	sp, r7
 8001e68:	b002      	add	sp, #8
 8001e6a:	bd80      	pop	{r7, pc}

08001e6c <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8001e6c:	b580      	push	{r7, lr}
 8001e6e:	b084      	sub	sp, #16
 8001e70:	af00      	add	r7, sp, #0
 8001e72:	60f8      	str	r0, [r7, #12]
 8001e74:	60b9      	str	r1, [r7, #8]
 8001e76:	603b      	str	r3, [r7, #0]
 8001e78:	1dfb      	adds	r3, r7, #7
 8001e7a:	701a      	strb	r2, [r3, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8001e7c:	e03a      	b.n	8001ef4 <I2C_WaitOnFlagUntilTimeout+0x88>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8001e7e:	69ba      	ldr	r2, [r7, #24]
 8001e80:	6839      	ldr	r1, [r7, #0]
 8001e82:	68fb      	ldr	r3, [r7, #12]
 8001e84:	0018      	movs	r0, r3
 8001e86:	f000 f971 	bl	800216c <I2C_IsErrorOccurred>
 8001e8a:	1e03      	subs	r3, r0, #0
 8001e8c:	d001      	beq.n	8001e92 <I2C_WaitOnFlagUntilTimeout+0x26>
    {
      return HAL_ERROR;
 8001e8e:	2301      	movs	r3, #1
 8001e90:	e040      	b.n	8001f14 <I2C_WaitOnFlagUntilTimeout+0xa8>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001e92:	683b      	ldr	r3, [r7, #0]
 8001e94:	3301      	adds	r3, #1
 8001e96:	d02d      	beq.n	8001ef4 <I2C_WaitOnFlagUntilTimeout+0x88>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001e98:	f7ff f956 	bl	8001148 <HAL_GetTick>
 8001e9c:	0002      	movs	r2, r0
 8001e9e:	69bb      	ldr	r3, [r7, #24]
 8001ea0:	1ad3      	subs	r3, r2, r3
 8001ea2:	683a      	ldr	r2, [r7, #0]
 8001ea4:	429a      	cmp	r2, r3
 8001ea6:	d302      	bcc.n	8001eae <I2C_WaitOnFlagUntilTimeout+0x42>
 8001ea8:	683b      	ldr	r3, [r7, #0]
 8001eaa:	2b00      	cmp	r3, #0
 8001eac:	d122      	bne.n	8001ef4 <I2C_WaitOnFlagUntilTimeout+0x88>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8001eae:	68fb      	ldr	r3, [r7, #12]
 8001eb0:	681b      	ldr	r3, [r3, #0]
 8001eb2:	699b      	ldr	r3, [r3, #24]
 8001eb4:	68ba      	ldr	r2, [r7, #8]
 8001eb6:	4013      	ands	r3, r2
 8001eb8:	68ba      	ldr	r2, [r7, #8]
 8001eba:	1ad3      	subs	r3, r2, r3
 8001ebc:	425a      	negs	r2, r3
 8001ebe:	4153      	adcs	r3, r2
 8001ec0:	b2db      	uxtb	r3, r3
 8001ec2:	001a      	movs	r2, r3
 8001ec4:	1dfb      	adds	r3, r7, #7
 8001ec6:	781b      	ldrb	r3, [r3, #0]
 8001ec8:	429a      	cmp	r2, r3
 8001eca:	d113      	bne.n	8001ef4 <I2C_WaitOnFlagUntilTimeout+0x88>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001ecc:	68fb      	ldr	r3, [r7, #12]
 8001ece:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001ed0:	2220      	movs	r2, #32
 8001ed2:	431a      	orrs	r2, r3
 8001ed4:	68fb      	ldr	r3, [r7, #12]
 8001ed6:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8001ed8:	68fb      	ldr	r3, [r7, #12]
 8001eda:	2241      	movs	r2, #65	@ 0x41
 8001edc:	2120      	movs	r1, #32
 8001ede:	5499      	strb	r1, [r3, r2]
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8001ee0:	68fb      	ldr	r3, [r7, #12]
 8001ee2:	2242      	movs	r2, #66	@ 0x42
 8001ee4:	2100      	movs	r1, #0
 8001ee6:	5499      	strb	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8001ee8:	68fb      	ldr	r3, [r7, #12]
 8001eea:	2240      	movs	r2, #64	@ 0x40
 8001eec:	2100      	movs	r1, #0
 8001eee:	5499      	strb	r1, [r3, r2]
          return HAL_ERROR;
 8001ef0:	2301      	movs	r3, #1
 8001ef2:	e00f      	b.n	8001f14 <I2C_WaitOnFlagUntilTimeout+0xa8>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8001ef4:	68fb      	ldr	r3, [r7, #12]
 8001ef6:	681b      	ldr	r3, [r3, #0]
 8001ef8:	699b      	ldr	r3, [r3, #24]
 8001efa:	68ba      	ldr	r2, [r7, #8]
 8001efc:	4013      	ands	r3, r2
 8001efe:	68ba      	ldr	r2, [r7, #8]
 8001f00:	1ad3      	subs	r3, r2, r3
 8001f02:	425a      	negs	r2, r3
 8001f04:	4153      	adcs	r3, r2
 8001f06:	b2db      	uxtb	r3, r3
 8001f08:	001a      	movs	r2, r3
 8001f0a:	1dfb      	adds	r3, r7, #7
 8001f0c:	781b      	ldrb	r3, [r3, #0]
 8001f0e:	429a      	cmp	r2, r3
 8001f10:	d0b5      	beq.n	8001e7e <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8001f12:	2300      	movs	r3, #0
}
 8001f14:	0018      	movs	r0, r3
 8001f16:	46bd      	mov	sp, r7
 8001f18:	b004      	add	sp, #16
 8001f1a:	bd80      	pop	{r7, pc}

08001f1c <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8001f1c:	b580      	push	{r7, lr}
 8001f1e:	b084      	sub	sp, #16
 8001f20:	af00      	add	r7, sp, #0
 8001f22:	60f8      	str	r0, [r7, #12]
 8001f24:	60b9      	str	r1, [r7, #8]
 8001f26:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8001f28:	e032      	b.n	8001f90 <I2C_WaitOnTXISFlagUntilTimeout+0x74>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8001f2a:	687a      	ldr	r2, [r7, #4]
 8001f2c:	68b9      	ldr	r1, [r7, #8]
 8001f2e:	68fb      	ldr	r3, [r7, #12]
 8001f30:	0018      	movs	r0, r3
 8001f32:	f000 f91b 	bl	800216c <I2C_IsErrorOccurred>
 8001f36:	1e03      	subs	r3, r0, #0
 8001f38:	d001      	beq.n	8001f3e <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8001f3a:	2301      	movs	r3, #1
 8001f3c:	e030      	b.n	8001fa0 <I2C_WaitOnTXISFlagUntilTimeout+0x84>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001f3e:	68bb      	ldr	r3, [r7, #8]
 8001f40:	3301      	adds	r3, #1
 8001f42:	d025      	beq.n	8001f90 <I2C_WaitOnTXISFlagUntilTimeout+0x74>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001f44:	f7ff f900 	bl	8001148 <HAL_GetTick>
 8001f48:	0002      	movs	r2, r0
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	1ad3      	subs	r3, r2, r3
 8001f4e:	68ba      	ldr	r2, [r7, #8]
 8001f50:	429a      	cmp	r2, r3
 8001f52:	d302      	bcc.n	8001f5a <I2C_WaitOnTXISFlagUntilTimeout+0x3e>
 8001f54:	68bb      	ldr	r3, [r7, #8]
 8001f56:	2b00      	cmp	r3, #0
 8001f58:	d11a      	bne.n	8001f90 <I2C_WaitOnTXISFlagUntilTimeout+0x74>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 8001f5a:	68fb      	ldr	r3, [r7, #12]
 8001f5c:	681b      	ldr	r3, [r3, #0]
 8001f5e:	699b      	ldr	r3, [r3, #24]
 8001f60:	2202      	movs	r2, #2
 8001f62:	4013      	ands	r3, r2
 8001f64:	2b02      	cmp	r3, #2
 8001f66:	d013      	beq.n	8001f90 <I2C_WaitOnTXISFlagUntilTimeout+0x74>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001f68:	68fb      	ldr	r3, [r7, #12]
 8001f6a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001f6c:	2220      	movs	r2, #32
 8001f6e:	431a      	orrs	r2, r3
 8001f70:	68fb      	ldr	r3, [r7, #12]
 8001f72:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8001f74:	68fb      	ldr	r3, [r7, #12]
 8001f76:	2241      	movs	r2, #65	@ 0x41
 8001f78:	2120      	movs	r1, #32
 8001f7a:	5499      	strb	r1, [r3, r2]
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8001f7c:	68fb      	ldr	r3, [r7, #12]
 8001f7e:	2242      	movs	r2, #66	@ 0x42
 8001f80:	2100      	movs	r1, #0
 8001f82:	5499      	strb	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8001f84:	68fb      	ldr	r3, [r7, #12]
 8001f86:	2240      	movs	r2, #64	@ 0x40
 8001f88:	2100      	movs	r1, #0
 8001f8a:	5499      	strb	r1, [r3, r2]

          return HAL_ERROR;
 8001f8c:	2301      	movs	r3, #1
 8001f8e:	e007      	b.n	8001fa0 <I2C_WaitOnTXISFlagUntilTimeout+0x84>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8001f90:	68fb      	ldr	r3, [r7, #12]
 8001f92:	681b      	ldr	r3, [r3, #0]
 8001f94:	699b      	ldr	r3, [r3, #24]
 8001f96:	2202      	movs	r2, #2
 8001f98:	4013      	ands	r3, r2
 8001f9a:	2b02      	cmp	r3, #2
 8001f9c:	d1c5      	bne.n	8001f2a <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8001f9e:	2300      	movs	r3, #0
}
 8001fa0:	0018      	movs	r0, r3
 8001fa2:	46bd      	mov	sp, r7
 8001fa4:	b004      	add	sp, #16
 8001fa6:	bd80      	pop	{r7, pc}

08001fa8 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8001fa8:	b580      	push	{r7, lr}
 8001faa:	b084      	sub	sp, #16
 8001fac:	af00      	add	r7, sp, #0
 8001fae:	60f8      	str	r0, [r7, #12]
 8001fb0:	60b9      	str	r1, [r7, #8]
 8001fb2:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8001fb4:	e02f      	b.n	8002016 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8001fb6:	687a      	ldr	r2, [r7, #4]
 8001fb8:	68b9      	ldr	r1, [r7, #8]
 8001fba:	68fb      	ldr	r3, [r7, #12]
 8001fbc:	0018      	movs	r0, r3
 8001fbe:	f000 f8d5 	bl	800216c <I2C_IsErrorOccurred>
 8001fc2:	1e03      	subs	r3, r0, #0
 8001fc4:	d001      	beq.n	8001fca <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8001fc6:	2301      	movs	r3, #1
 8001fc8:	e02d      	b.n	8002026 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001fca:	f7ff f8bd 	bl	8001148 <HAL_GetTick>
 8001fce:	0002      	movs	r2, r0
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	1ad3      	subs	r3, r2, r3
 8001fd4:	68ba      	ldr	r2, [r7, #8]
 8001fd6:	429a      	cmp	r2, r3
 8001fd8:	d302      	bcc.n	8001fe0 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8001fda:	68bb      	ldr	r3, [r7, #8]
 8001fdc:	2b00      	cmp	r3, #0
 8001fde:	d11a      	bne.n	8002016 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 8001fe0:	68fb      	ldr	r3, [r7, #12]
 8001fe2:	681b      	ldr	r3, [r3, #0]
 8001fe4:	699b      	ldr	r3, [r3, #24]
 8001fe6:	2220      	movs	r2, #32
 8001fe8:	4013      	ands	r3, r2
 8001fea:	2b20      	cmp	r3, #32
 8001fec:	d013      	beq.n	8002016 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001fee:	68fb      	ldr	r3, [r7, #12]
 8001ff0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001ff2:	2220      	movs	r2, #32
 8001ff4:	431a      	orrs	r2, r3
 8001ff6:	68fb      	ldr	r3, [r7, #12]
 8001ff8:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8001ffa:	68fb      	ldr	r3, [r7, #12]
 8001ffc:	2241      	movs	r2, #65	@ 0x41
 8001ffe:	2120      	movs	r1, #32
 8002000:	5499      	strb	r1, [r3, r2]
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8002002:	68fb      	ldr	r3, [r7, #12]
 8002004:	2242      	movs	r2, #66	@ 0x42
 8002006:	2100      	movs	r1, #0
 8002008:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800200a:	68fb      	ldr	r3, [r7, #12]
 800200c:	2240      	movs	r2, #64	@ 0x40
 800200e:	2100      	movs	r1, #0
 8002010:	5499      	strb	r1, [r3, r2]

        return HAL_ERROR;
 8002012:	2301      	movs	r3, #1
 8002014:	e007      	b.n	8002026 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002016:	68fb      	ldr	r3, [r7, #12]
 8002018:	681b      	ldr	r3, [r3, #0]
 800201a:	699b      	ldr	r3, [r3, #24]
 800201c:	2220      	movs	r2, #32
 800201e:	4013      	ands	r3, r2
 8002020:	2b20      	cmp	r3, #32
 8002022:	d1c8      	bne.n	8001fb6 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8002024:	2300      	movs	r3, #0
}
 8002026:	0018      	movs	r0, r3
 8002028:	46bd      	mov	sp, r7
 800202a:	b004      	add	sp, #16
 800202c:	bd80      	pop	{r7, pc}
	...

08002030 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8002030:	b580      	push	{r7, lr}
 8002032:	b086      	sub	sp, #24
 8002034:	af00      	add	r7, sp, #0
 8002036:	60f8      	str	r0, [r7, #12]
 8002038:	60b9      	str	r1, [r7, #8]
 800203a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800203c:	2317      	movs	r3, #23
 800203e:	18fb      	adds	r3, r7, r3
 8002040:	2200      	movs	r2, #0
 8002042:	701a      	strb	r2, [r3, #0]

  while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET) && (status == HAL_OK))
 8002044:	e07b      	b.n	800213e <I2C_WaitOnRXNEFlagUntilTimeout+0x10e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8002046:	687a      	ldr	r2, [r7, #4]
 8002048:	68b9      	ldr	r1, [r7, #8]
 800204a:	68fb      	ldr	r3, [r7, #12]
 800204c:	0018      	movs	r0, r3
 800204e:	f000 f88d 	bl	800216c <I2C_IsErrorOccurred>
 8002052:	1e03      	subs	r3, r0, #0
 8002054:	d003      	beq.n	800205e <I2C_WaitOnRXNEFlagUntilTimeout+0x2e>
    {
      status = HAL_ERROR;
 8002056:	2317      	movs	r3, #23
 8002058:	18fb      	adds	r3, r7, r3
 800205a:	2201      	movs	r2, #1
 800205c:	701a      	strb	r2, [r3, #0]
    }

    /* Check if a STOPF is detected */
    if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET) && (status == HAL_OK))
 800205e:	68fb      	ldr	r3, [r7, #12]
 8002060:	681b      	ldr	r3, [r3, #0]
 8002062:	699b      	ldr	r3, [r3, #24]
 8002064:	2220      	movs	r2, #32
 8002066:	4013      	ands	r3, r2
 8002068:	2b20      	cmp	r3, #32
 800206a:	d140      	bne.n	80020ee <I2C_WaitOnRXNEFlagUntilTimeout+0xbe>
 800206c:	2117      	movs	r1, #23
 800206e:	187b      	adds	r3, r7, r1
 8002070:	781b      	ldrb	r3, [r3, #0]
 8002072:	2b00      	cmp	r3, #0
 8002074:	d13b      	bne.n	80020ee <I2C_WaitOnRXNEFlagUntilTimeout+0xbe>
    {
      /* Check if an RXNE is pending */
      /* Store Last receive data if any */
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET) && (hi2c->XferSize > 0U))
 8002076:	68fb      	ldr	r3, [r7, #12]
 8002078:	681b      	ldr	r3, [r3, #0]
 800207a:	699b      	ldr	r3, [r3, #24]
 800207c:	2204      	movs	r2, #4
 800207e:	4013      	ands	r3, r2
 8002080:	2b04      	cmp	r3, #4
 8002082:	d106      	bne.n	8002092 <I2C_WaitOnRXNEFlagUntilTimeout+0x62>
 8002084:	68fb      	ldr	r3, [r7, #12]
 8002086:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002088:	2b00      	cmp	r3, #0
 800208a:	d002      	beq.n	8002092 <I2C_WaitOnRXNEFlagUntilTimeout+0x62>
      {
        /* Return HAL_OK */
        /* The Reading of data from RXDR will be done in caller function */
        status = HAL_OK;
 800208c:	187b      	adds	r3, r7, r1
 800208e:	2200      	movs	r2, #0
 8002090:	701a      	strb	r2, [r3, #0]
      }

      /* Check a no-acknowledge have been detected */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002092:	68fb      	ldr	r3, [r7, #12]
 8002094:	681b      	ldr	r3, [r3, #0]
 8002096:	699b      	ldr	r3, [r3, #24]
 8002098:	2210      	movs	r2, #16
 800209a:	4013      	ands	r3, r2
 800209c:	2b10      	cmp	r3, #16
 800209e:	d123      	bne.n	80020e8 <I2C_WaitOnRXNEFlagUntilTimeout+0xb8>
      {
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80020a0:	68fb      	ldr	r3, [r7, #12]
 80020a2:	681b      	ldr	r3, [r3, #0]
 80020a4:	2210      	movs	r2, #16
 80020a6:	61da      	str	r2, [r3, #28]
        hi2c->ErrorCode = HAL_I2C_ERROR_AF;
 80020a8:	68fb      	ldr	r3, [r7, #12]
 80020aa:	2204      	movs	r2, #4
 80020ac:	645a      	str	r2, [r3, #68]	@ 0x44

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80020ae:	68fb      	ldr	r3, [r7, #12]
 80020b0:	681b      	ldr	r3, [r3, #0]
 80020b2:	2220      	movs	r2, #32
 80020b4:	61da      	str	r2, [r3, #28]

        /* Clear Configuration Register 2 */
        I2C_RESET_CR2(hi2c);
 80020b6:	68fb      	ldr	r3, [r7, #12]
 80020b8:	681b      	ldr	r3, [r3, #0]
 80020ba:	685a      	ldr	r2, [r3, #4]
 80020bc:	68fb      	ldr	r3, [r7, #12]
 80020be:	681b      	ldr	r3, [r3, #0]
 80020c0:	4929      	ldr	r1, [pc, #164]	@ (8002168 <I2C_WaitOnRXNEFlagUntilTimeout+0x138>)
 80020c2:	400a      	ands	r2, r1
 80020c4:	605a      	str	r2, [r3, #4]

        hi2c->State = HAL_I2C_STATE_READY;
 80020c6:	68fb      	ldr	r3, [r7, #12]
 80020c8:	2241      	movs	r2, #65	@ 0x41
 80020ca:	2120      	movs	r1, #32
 80020cc:	5499      	strb	r1, [r3, r2]
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80020ce:	68fb      	ldr	r3, [r7, #12]
 80020d0:	2242      	movs	r2, #66	@ 0x42
 80020d2:	2100      	movs	r1, #0
 80020d4:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80020d6:	68fb      	ldr	r3, [r7, #12]
 80020d8:	2240      	movs	r2, #64	@ 0x40
 80020da:	2100      	movs	r1, #0
 80020dc:	5499      	strb	r1, [r3, r2]

        status = HAL_ERROR;
 80020de:	2317      	movs	r3, #23
 80020e0:	18fb      	adds	r3, r7, r3
 80020e2:	2201      	movs	r2, #1
 80020e4:	701a      	strb	r2, [r3, #0]
 80020e6:	e002      	b.n	80020ee <I2C_WaitOnRXNEFlagUntilTimeout+0xbe>
      }
      else
      {
        hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80020e8:	68fb      	ldr	r3, [r7, #12]
 80020ea:	2200      	movs	r2, #0
 80020ec:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }

    /* Check for the Timeout */
    if ((((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U)) && (status == HAL_OK))
 80020ee:	f7ff f82b 	bl	8001148 <HAL_GetTick>
 80020f2:	0002      	movs	r2, r0
 80020f4:	687b      	ldr	r3, [r7, #4]
 80020f6:	1ad3      	subs	r3, r2, r3
 80020f8:	68ba      	ldr	r2, [r7, #8]
 80020fa:	429a      	cmp	r2, r3
 80020fc:	d302      	bcc.n	8002104 <I2C_WaitOnRXNEFlagUntilTimeout+0xd4>
 80020fe:	68bb      	ldr	r3, [r7, #8]
 8002100:	2b00      	cmp	r3, #0
 8002102:	d11c      	bne.n	800213e <I2C_WaitOnRXNEFlagUntilTimeout+0x10e>
 8002104:	2017      	movs	r0, #23
 8002106:	183b      	adds	r3, r7, r0
 8002108:	781b      	ldrb	r3, [r3, #0]
 800210a:	2b00      	cmp	r3, #0
 800210c:	d117      	bne.n	800213e <I2C_WaitOnRXNEFlagUntilTimeout+0x10e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 800210e:	68fb      	ldr	r3, [r7, #12]
 8002110:	681b      	ldr	r3, [r3, #0]
 8002112:	699b      	ldr	r3, [r3, #24]
 8002114:	2204      	movs	r2, #4
 8002116:	4013      	ands	r3, r2
 8002118:	2b04      	cmp	r3, #4
 800211a:	d010      	beq.n	800213e <I2C_WaitOnRXNEFlagUntilTimeout+0x10e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800211c:	68fb      	ldr	r3, [r7, #12]
 800211e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002120:	2220      	movs	r2, #32
 8002122:	431a      	orrs	r2, r3
 8002124:	68fb      	ldr	r3, [r7, #12]
 8002126:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8002128:	68fb      	ldr	r3, [r7, #12]
 800212a:	2241      	movs	r2, #65	@ 0x41
 800212c:	2120      	movs	r1, #32
 800212e:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002130:	68fb      	ldr	r3, [r7, #12]
 8002132:	2240      	movs	r2, #64	@ 0x40
 8002134:	2100      	movs	r1, #0
 8002136:	5499      	strb	r1, [r3, r2]

        status = HAL_ERROR;
 8002138:	183b      	adds	r3, r7, r0
 800213a:	2201      	movs	r2, #1
 800213c:	701a      	strb	r2, [r3, #0]
  while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET) && (status == HAL_OK))
 800213e:	68fb      	ldr	r3, [r7, #12]
 8002140:	681b      	ldr	r3, [r3, #0]
 8002142:	699b      	ldr	r3, [r3, #24]
 8002144:	2204      	movs	r2, #4
 8002146:	4013      	ands	r3, r2
 8002148:	2b04      	cmp	r3, #4
 800214a:	d005      	beq.n	8002158 <I2C_WaitOnRXNEFlagUntilTimeout+0x128>
 800214c:	2317      	movs	r3, #23
 800214e:	18fb      	adds	r3, r7, r3
 8002150:	781b      	ldrb	r3, [r3, #0]
 8002152:	2b00      	cmp	r3, #0
 8002154:	d100      	bne.n	8002158 <I2C_WaitOnRXNEFlagUntilTimeout+0x128>
 8002156:	e776      	b.n	8002046 <I2C_WaitOnRXNEFlagUntilTimeout+0x16>
      }
    }
  }
  return status;
 8002158:	2317      	movs	r3, #23
 800215a:	18fb      	adds	r3, r7, r3
 800215c:	781b      	ldrb	r3, [r3, #0]
}
 800215e:	0018      	movs	r0, r3
 8002160:	46bd      	mov	sp, r7
 8002162:	b006      	add	sp, #24
 8002164:	bd80      	pop	{r7, pc}
 8002166:	46c0      	nop			@ (mov r8, r8)
 8002168:	fe00e800 	.word	0xfe00e800

0800216c <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800216c:	b580      	push	{r7, lr}
 800216e:	b08a      	sub	sp, #40	@ 0x28
 8002170:	af00      	add	r7, sp, #0
 8002172:	60f8      	str	r0, [r7, #12]
 8002174:	60b9      	str	r1, [r7, #8]
 8002176:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002178:	2327      	movs	r3, #39	@ 0x27
 800217a:	18fb      	adds	r3, r7, r3
 800217c:	2200      	movs	r2, #0
 800217e:	701a      	strb	r2, [r3, #0]
  uint32_t itflag   = hi2c->Instance->ISR;
 8002180:	68fb      	ldr	r3, [r7, #12]
 8002182:	681b      	ldr	r3, [r3, #0]
 8002184:	699b      	ldr	r3, [r3, #24]
 8002186:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8002188:	2300      	movs	r3, #0
 800218a:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8002190:	69bb      	ldr	r3, [r7, #24]
 8002192:	2210      	movs	r2, #16
 8002194:	4013      	ands	r3, r2
 8002196:	d100      	bne.n	800219a <I2C_IsErrorOccurred+0x2e>
 8002198:	e079      	b.n	800228e <I2C_IsErrorOccurred+0x122>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800219a:	68fb      	ldr	r3, [r7, #12]
 800219c:	681b      	ldr	r3, [r3, #0]
 800219e:	2210      	movs	r2, #16
 80021a0:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 80021a2:	e057      	b.n	8002254 <I2C_IsErrorOccurred+0xe8>
 80021a4:	2227      	movs	r2, #39	@ 0x27
 80021a6:	18bb      	adds	r3, r7, r2
 80021a8:	18ba      	adds	r2, r7, r2
 80021aa:	7812      	ldrb	r2, [r2, #0]
 80021ac:	701a      	strb	r2, [r3, #0]
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 80021ae:	68bb      	ldr	r3, [r7, #8]
 80021b0:	3301      	adds	r3, #1
 80021b2:	d04f      	beq.n	8002254 <I2C_IsErrorOccurred+0xe8>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 80021b4:	f7fe ffc8 	bl	8001148 <HAL_GetTick>
 80021b8:	0002      	movs	r2, r0
 80021ba:	69fb      	ldr	r3, [r7, #28]
 80021bc:	1ad3      	subs	r3, r2, r3
 80021be:	68ba      	ldr	r2, [r7, #8]
 80021c0:	429a      	cmp	r2, r3
 80021c2:	d302      	bcc.n	80021ca <I2C_IsErrorOccurred+0x5e>
 80021c4:	68bb      	ldr	r3, [r7, #8]
 80021c6:	2b00      	cmp	r3, #0
 80021c8:	d144      	bne.n	8002254 <I2C_IsErrorOccurred+0xe8>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 80021ca:	68fb      	ldr	r3, [r7, #12]
 80021cc:	681b      	ldr	r3, [r3, #0]
 80021ce:	685a      	ldr	r2, [r3, #4]
 80021d0:	2380      	movs	r3, #128	@ 0x80
 80021d2:	01db      	lsls	r3, r3, #7
 80021d4:	4013      	ands	r3, r2
 80021d6:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 80021d8:	2013      	movs	r0, #19
 80021da:	183b      	adds	r3, r7, r0
 80021dc:	68fa      	ldr	r2, [r7, #12]
 80021de:	2142      	movs	r1, #66	@ 0x42
 80021e0:	5c52      	ldrb	r2, [r2, r1]
 80021e2:	701a      	strb	r2, [r3, #0]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 80021e4:	68fb      	ldr	r3, [r7, #12]
 80021e6:	681b      	ldr	r3, [r3, #0]
 80021e8:	699a      	ldr	r2, [r3, #24]
 80021ea:	2380      	movs	r3, #128	@ 0x80
 80021ec:	021b      	lsls	r3, r3, #8
 80021ee:	401a      	ands	r2, r3
 80021f0:	2380      	movs	r3, #128	@ 0x80
 80021f2:	021b      	lsls	r3, r3, #8
 80021f4:	429a      	cmp	r2, r3
 80021f6:	d126      	bne.n	8002246 <I2C_IsErrorOccurred+0xda>
 80021f8:	697a      	ldr	r2, [r7, #20]
 80021fa:	2380      	movs	r3, #128	@ 0x80
 80021fc:	01db      	lsls	r3, r3, #7
 80021fe:	429a      	cmp	r2, r3
 8002200:	d021      	beq.n	8002246 <I2C_IsErrorOccurred+0xda>
              (tmp1 != I2C_CR2_STOP) && \
 8002202:	183b      	adds	r3, r7, r0
 8002204:	781b      	ldrb	r3, [r3, #0]
 8002206:	2b20      	cmp	r3, #32
 8002208:	d01d      	beq.n	8002246 <I2C_IsErrorOccurred+0xda>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 800220a:	68fb      	ldr	r3, [r7, #12]
 800220c:	681b      	ldr	r3, [r3, #0]
 800220e:	685a      	ldr	r2, [r3, #4]
 8002210:	68fb      	ldr	r3, [r7, #12]
 8002212:	681b      	ldr	r3, [r3, #0]
 8002214:	2180      	movs	r1, #128	@ 0x80
 8002216:	01c9      	lsls	r1, r1, #7
 8002218:	430a      	orrs	r2, r1
 800221a:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 800221c:	f7fe ff94 	bl	8001148 <HAL_GetTick>
 8002220:	0003      	movs	r3, r0
 8002222:	61fb      	str	r3, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002224:	e00f      	b.n	8002246 <I2C_IsErrorOccurred+0xda>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8002226:	f7fe ff8f 	bl	8001148 <HAL_GetTick>
 800222a:	0002      	movs	r2, r0
 800222c:	69fb      	ldr	r3, [r7, #28]
 800222e:	1ad3      	subs	r3, r2, r3
 8002230:	2b19      	cmp	r3, #25
 8002232:	d908      	bls.n	8002246 <I2C_IsErrorOccurred+0xda>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 8002234:	6a3b      	ldr	r3, [r7, #32]
 8002236:	2220      	movs	r2, #32
 8002238:	4313      	orrs	r3, r2
 800223a:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 800223c:	2327      	movs	r3, #39	@ 0x27
 800223e:	18fb      	adds	r3, r7, r3
 8002240:	2201      	movs	r2, #1
 8002242:	701a      	strb	r2, [r3, #0]

              break;
 8002244:	e006      	b.n	8002254 <I2C_IsErrorOccurred+0xe8>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002246:	68fb      	ldr	r3, [r7, #12]
 8002248:	681b      	ldr	r3, [r3, #0]
 800224a:	699b      	ldr	r3, [r3, #24]
 800224c:	2220      	movs	r2, #32
 800224e:	4013      	ands	r3, r2
 8002250:	2b20      	cmp	r3, #32
 8002252:	d1e8      	bne.n	8002226 <I2C_IsErrorOccurred+0xba>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8002254:	68fb      	ldr	r3, [r7, #12]
 8002256:	681b      	ldr	r3, [r3, #0]
 8002258:	699b      	ldr	r3, [r3, #24]
 800225a:	2220      	movs	r2, #32
 800225c:	4013      	ands	r3, r2
 800225e:	2b20      	cmp	r3, #32
 8002260:	d004      	beq.n	800226c <I2C_IsErrorOccurred+0x100>
 8002262:	2327      	movs	r3, #39	@ 0x27
 8002264:	18fb      	adds	r3, r7, r3
 8002266:	781b      	ldrb	r3, [r3, #0]
 8002268:	2b00      	cmp	r3, #0
 800226a:	d09b      	beq.n	80021a4 <I2C_IsErrorOccurred+0x38>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 800226c:	2327      	movs	r3, #39	@ 0x27
 800226e:	18fb      	adds	r3, r7, r3
 8002270:	781b      	ldrb	r3, [r3, #0]
 8002272:	2b00      	cmp	r3, #0
 8002274:	d103      	bne.n	800227e <I2C_IsErrorOccurred+0x112>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002276:	68fb      	ldr	r3, [r7, #12]
 8002278:	681b      	ldr	r3, [r3, #0]
 800227a:	2220      	movs	r2, #32
 800227c:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 800227e:	6a3b      	ldr	r3, [r7, #32]
 8002280:	2204      	movs	r2, #4
 8002282:	4313      	orrs	r3, r2
 8002284:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8002286:	2327      	movs	r3, #39	@ 0x27
 8002288:	18fb      	adds	r3, r7, r3
 800228a:	2201      	movs	r2, #1
 800228c:	701a      	strb	r2, [r3, #0]
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 800228e:	68fb      	ldr	r3, [r7, #12]
 8002290:	681b      	ldr	r3, [r3, #0]
 8002292:	699b      	ldr	r3, [r3, #24]
 8002294:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8002296:	69ba      	ldr	r2, [r7, #24]
 8002298:	2380      	movs	r3, #128	@ 0x80
 800229a:	005b      	lsls	r3, r3, #1
 800229c:	4013      	ands	r3, r2
 800229e:	d00c      	beq.n	80022ba <I2C_IsErrorOccurred+0x14e>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 80022a0:	6a3b      	ldr	r3, [r7, #32]
 80022a2:	2201      	movs	r2, #1
 80022a4:	4313      	orrs	r3, r2
 80022a6:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 80022a8:	68fb      	ldr	r3, [r7, #12]
 80022aa:	681b      	ldr	r3, [r3, #0]
 80022ac:	2280      	movs	r2, #128	@ 0x80
 80022ae:	0052      	lsls	r2, r2, #1
 80022b0:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80022b2:	2327      	movs	r3, #39	@ 0x27
 80022b4:	18fb      	adds	r3, r7, r3
 80022b6:	2201      	movs	r2, #1
 80022b8:	701a      	strb	r2, [r3, #0]
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 80022ba:	69ba      	ldr	r2, [r7, #24]
 80022bc:	2380      	movs	r3, #128	@ 0x80
 80022be:	00db      	lsls	r3, r3, #3
 80022c0:	4013      	ands	r3, r2
 80022c2:	d00c      	beq.n	80022de <I2C_IsErrorOccurred+0x172>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 80022c4:	6a3b      	ldr	r3, [r7, #32]
 80022c6:	2208      	movs	r2, #8
 80022c8:	4313      	orrs	r3, r2
 80022ca:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 80022cc:	68fb      	ldr	r3, [r7, #12]
 80022ce:	681b      	ldr	r3, [r3, #0]
 80022d0:	2280      	movs	r2, #128	@ 0x80
 80022d2:	00d2      	lsls	r2, r2, #3
 80022d4:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80022d6:	2327      	movs	r3, #39	@ 0x27
 80022d8:	18fb      	adds	r3, r7, r3
 80022da:	2201      	movs	r2, #1
 80022dc:	701a      	strb	r2, [r3, #0]
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 80022de:	69ba      	ldr	r2, [r7, #24]
 80022e0:	2380      	movs	r3, #128	@ 0x80
 80022e2:	009b      	lsls	r3, r3, #2
 80022e4:	4013      	ands	r3, r2
 80022e6:	d00c      	beq.n	8002302 <I2C_IsErrorOccurred+0x196>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 80022e8:	6a3b      	ldr	r3, [r7, #32]
 80022ea:	2202      	movs	r2, #2
 80022ec:	4313      	orrs	r3, r2
 80022ee:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 80022f0:	68fb      	ldr	r3, [r7, #12]
 80022f2:	681b      	ldr	r3, [r3, #0]
 80022f4:	2280      	movs	r2, #128	@ 0x80
 80022f6:	0092      	lsls	r2, r2, #2
 80022f8:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80022fa:	2327      	movs	r3, #39	@ 0x27
 80022fc:	18fb      	adds	r3, r7, r3
 80022fe:	2201      	movs	r2, #1
 8002300:	701a      	strb	r2, [r3, #0]
  }

  if (status != HAL_OK)
 8002302:	2327      	movs	r3, #39	@ 0x27
 8002304:	18fb      	adds	r3, r7, r3
 8002306:	781b      	ldrb	r3, [r3, #0]
 8002308:	2b00      	cmp	r3, #0
 800230a:	d01d      	beq.n	8002348 <I2C_IsErrorOccurred+0x1dc>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 800230c:	68fb      	ldr	r3, [r7, #12]
 800230e:	0018      	movs	r0, r3
 8002310:	f7ff fd8a 	bl	8001e28 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8002314:	68fb      	ldr	r3, [r7, #12]
 8002316:	681b      	ldr	r3, [r3, #0]
 8002318:	685a      	ldr	r2, [r3, #4]
 800231a:	68fb      	ldr	r3, [r7, #12]
 800231c:	681b      	ldr	r3, [r3, #0]
 800231e:	490e      	ldr	r1, [pc, #56]	@ (8002358 <I2C_IsErrorOccurred+0x1ec>)
 8002320:	400a      	ands	r2, r1
 8002322:	605a      	str	r2, [r3, #4]

    hi2c->ErrorCode |= error_code;
 8002324:	68fb      	ldr	r3, [r7, #12]
 8002326:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8002328:	6a3b      	ldr	r3, [r7, #32]
 800232a:	431a      	orrs	r2, r3
 800232c:	68fb      	ldr	r3, [r7, #12]
 800232e:	645a      	str	r2, [r3, #68]	@ 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8002330:	68fb      	ldr	r3, [r7, #12]
 8002332:	2241      	movs	r2, #65	@ 0x41
 8002334:	2120      	movs	r1, #32
 8002336:	5499      	strb	r1, [r3, r2]
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002338:	68fb      	ldr	r3, [r7, #12]
 800233a:	2242      	movs	r2, #66	@ 0x42
 800233c:	2100      	movs	r1, #0
 800233e:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002340:	68fb      	ldr	r3, [r7, #12]
 8002342:	2240      	movs	r2, #64	@ 0x40
 8002344:	2100      	movs	r1, #0
 8002346:	5499      	strb	r1, [r3, r2]
  }

  return status;
 8002348:	2327      	movs	r3, #39	@ 0x27
 800234a:	18fb      	adds	r3, r7, r3
 800234c:	781b      	ldrb	r3, [r3, #0]
}
 800234e:	0018      	movs	r0, r3
 8002350:	46bd      	mov	sp, r7
 8002352:	b00a      	add	sp, #40	@ 0x28
 8002354:	bd80      	pop	{r7, pc}
 8002356:	46c0      	nop			@ (mov r8, r8)
 8002358:	fe00e800 	.word	0xfe00e800

0800235c <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 800235c:	b590      	push	{r4, r7, lr}
 800235e:	b087      	sub	sp, #28
 8002360:	af00      	add	r7, sp, #0
 8002362:	60f8      	str	r0, [r7, #12]
 8002364:	0008      	movs	r0, r1
 8002366:	0011      	movs	r1, r2
 8002368:	607b      	str	r3, [r7, #4]
 800236a:	240a      	movs	r4, #10
 800236c:	193b      	adds	r3, r7, r4
 800236e:	1c02      	adds	r2, r0, #0
 8002370:	801a      	strh	r2, [r3, #0]
 8002372:	2009      	movs	r0, #9
 8002374:	183b      	adds	r3, r7, r0
 8002376:	1c0a      	adds	r2, r1, #0
 8002378:	701a      	strb	r2, [r3, #0]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800237a:	193b      	adds	r3, r7, r4
 800237c:	881b      	ldrh	r3, [r3, #0]
 800237e:	059b      	lsls	r3, r3, #22
 8002380:	0d9a      	lsrs	r2, r3, #22
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8002382:	183b      	adds	r3, r7, r0
 8002384:	781b      	ldrb	r3, [r3, #0]
 8002386:	0419      	lsls	r1, r3, #16
 8002388:	23ff      	movs	r3, #255	@ 0xff
 800238a:	041b      	lsls	r3, r3, #16
 800238c:	400b      	ands	r3, r1
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800238e:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8002394:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002396:	4313      	orrs	r3, r2
 8002398:	005b      	lsls	r3, r3, #1
 800239a:	085b      	lsrs	r3, r3, #1
 800239c:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 800239e:	68fb      	ldr	r3, [r7, #12]
 80023a0:	681b      	ldr	r3, [r3, #0]
 80023a2:	685b      	ldr	r3, [r3, #4]
 80023a4:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80023a6:	0d51      	lsrs	r1, r2, #21
 80023a8:	2280      	movs	r2, #128	@ 0x80
 80023aa:	00d2      	lsls	r2, r2, #3
 80023ac:	400a      	ands	r2, r1
 80023ae:	4907      	ldr	r1, [pc, #28]	@ (80023cc <I2C_TransferConfig+0x70>)
 80023b0:	430a      	orrs	r2, r1
 80023b2:	43d2      	mvns	r2, r2
 80023b4:	401a      	ands	r2, r3
 80023b6:	0011      	movs	r1, r2
 80023b8:	68fb      	ldr	r3, [r7, #12]
 80023ba:	681b      	ldr	r3, [r3, #0]
 80023bc:	697a      	ldr	r2, [r7, #20]
 80023be:	430a      	orrs	r2, r1
 80023c0:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 80023c2:	46c0      	nop			@ (mov r8, r8)
 80023c4:	46bd      	mov	sp, r7
 80023c6:	b007      	add	sp, #28
 80023c8:	bd90      	pop	{r4, r7, pc}
 80023ca:	46c0      	nop			@ (mov r8, r8)
 80023cc:	03ff63ff 	.word	0x03ff63ff

080023d0 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 80023d0:	b580      	push	{r7, lr}
 80023d2:	b082      	sub	sp, #8
 80023d4:	af00      	add	r7, sp, #0
 80023d6:	6078      	str	r0, [r7, #4]
 80023d8:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80023da:	687b      	ldr	r3, [r7, #4]
 80023dc:	2241      	movs	r2, #65	@ 0x41
 80023de:	5c9b      	ldrb	r3, [r3, r2]
 80023e0:	b2db      	uxtb	r3, r3
 80023e2:	2b20      	cmp	r3, #32
 80023e4:	d138      	bne.n	8002458 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	2240      	movs	r2, #64	@ 0x40
 80023ea:	5c9b      	ldrb	r3, [r3, r2]
 80023ec:	2b01      	cmp	r3, #1
 80023ee:	d101      	bne.n	80023f4 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 80023f0:	2302      	movs	r3, #2
 80023f2:	e032      	b.n	800245a <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	2240      	movs	r2, #64	@ 0x40
 80023f8:	2101      	movs	r1, #1
 80023fa:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	2241      	movs	r2, #65	@ 0x41
 8002400:	2124      	movs	r1, #36	@ 0x24
 8002402:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	681b      	ldr	r3, [r3, #0]
 8002408:	681a      	ldr	r2, [r3, #0]
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	681b      	ldr	r3, [r3, #0]
 800240e:	2101      	movs	r1, #1
 8002410:	438a      	bics	r2, r1
 8002412:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	681b      	ldr	r3, [r3, #0]
 8002418:	681a      	ldr	r2, [r3, #0]
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	681b      	ldr	r3, [r3, #0]
 800241e:	4911      	ldr	r1, [pc, #68]	@ (8002464 <HAL_I2CEx_ConfigAnalogFilter+0x94>)
 8002420:	400a      	ands	r2, r1
 8002422:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	681b      	ldr	r3, [r3, #0]
 8002428:	6819      	ldr	r1, [r3, #0]
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	681b      	ldr	r3, [r3, #0]
 800242e:	683a      	ldr	r2, [r7, #0]
 8002430:	430a      	orrs	r2, r1
 8002432:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8002434:	687b      	ldr	r3, [r7, #4]
 8002436:	681b      	ldr	r3, [r3, #0]
 8002438:	681a      	ldr	r2, [r3, #0]
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	681b      	ldr	r3, [r3, #0]
 800243e:	2101      	movs	r1, #1
 8002440:	430a      	orrs	r2, r1
 8002442:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	2241      	movs	r2, #65	@ 0x41
 8002448:	2120      	movs	r1, #32
 800244a:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	2240      	movs	r2, #64	@ 0x40
 8002450:	2100      	movs	r1, #0
 8002452:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8002454:	2300      	movs	r3, #0
 8002456:	e000      	b.n	800245a <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8002458:	2302      	movs	r3, #2
  }
}
 800245a:	0018      	movs	r0, r3
 800245c:	46bd      	mov	sp, r7
 800245e:	b002      	add	sp, #8
 8002460:	bd80      	pop	{r7, pc}
 8002462:	46c0      	nop			@ (mov r8, r8)
 8002464:	ffffefff 	.word	0xffffefff

08002468 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8002468:	b580      	push	{r7, lr}
 800246a:	b084      	sub	sp, #16
 800246c:	af00      	add	r7, sp, #0
 800246e:	6078      	str	r0, [r7, #4]
 8002470:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002472:	687b      	ldr	r3, [r7, #4]
 8002474:	2241      	movs	r2, #65	@ 0x41
 8002476:	5c9b      	ldrb	r3, [r3, r2]
 8002478:	b2db      	uxtb	r3, r3
 800247a:	2b20      	cmp	r3, #32
 800247c:	d139      	bne.n	80024f2 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800247e:	687b      	ldr	r3, [r7, #4]
 8002480:	2240      	movs	r2, #64	@ 0x40
 8002482:	5c9b      	ldrb	r3, [r3, r2]
 8002484:	2b01      	cmp	r3, #1
 8002486:	d101      	bne.n	800248c <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8002488:	2302      	movs	r3, #2
 800248a:	e033      	b.n	80024f4 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	2240      	movs	r2, #64	@ 0x40
 8002490:	2101      	movs	r1, #1
 8002492:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	2241      	movs	r2, #65	@ 0x41
 8002498:	2124      	movs	r1, #36	@ 0x24
 800249a:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	681b      	ldr	r3, [r3, #0]
 80024a0:	681a      	ldr	r2, [r3, #0]
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	681b      	ldr	r3, [r3, #0]
 80024a6:	2101      	movs	r1, #1
 80024a8:	438a      	bics	r2, r1
 80024aa:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	681b      	ldr	r3, [r3, #0]
 80024b0:	681b      	ldr	r3, [r3, #0]
 80024b2:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 80024b4:	68fb      	ldr	r3, [r7, #12]
 80024b6:	4a11      	ldr	r2, [pc, #68]	@ (80024fc <HAL_I2CEx_ConfigDigitalFilter+0x94>)
 80024b8:	4013      	ands	r3, r2
 80024ba:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 80024bc:	683b      	ldr	r3, [r7, #0]
 80024be:	021b      	lsls	r3, r3, #8
 80024c0:	68fa      	ldr	r2, [r7, #12]
 80024c2:	4313      	orrs	r3, r2
 80024c4:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	681b      	ldr	r3, [r3, #0]
 80024ca:	68fa      	ldr	r2, [r7, #12]
 80024cc:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80024ce:	687b      	ldr	r3, [r7, #4]
 80024d0:	681b      	ldr	r3, [r3, #0]
 80024d2:	681a      	ldr	r2, [r3, #0]
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	681b      	ldr	r3, [r3, #0]
 80024d8:	2101      	movs	r1, #1
 80024da:	430a      	orrs	r2, r1
 80024dc:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	2241      	movs	r2, #65	@ 0x41
 80024e2:	2120      	movs	r1, #32
 80024e4:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80024e6:	687b      	ldr	r3, [r7, #4]
 80024e8:	2240      	movs	r2, #64	@ 0x40
 80024ea:	2100      	movs	r1, #0
 80024ec:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 80024ee:	2300      	movs	r3, #0
 80024f0:	e000      	b.n	80024f4 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 80024f2:	2302      	movs	r3, #2
  }
}
 80024f4:	0018      	movs	r0, r3
 80024f6:	46bd      	mov	sp, r7
 80024f8:	b004      	add	sp, #16
 80024fa:	bd80      	pop	{r7, pc}
 80024fc:	fffff0ff 	.word	0xfffff0ff

08002500 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        6 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8002500:	b580      	push	{r7, lr}
 8002502:	b084      	sub	sp, #16
 8002504:	af00      	add	r7, sp, #0
 8002506:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  /* Modify voltage scaling range */
  MODIFY_REG(PWR->CR1, PWR_CR1_VOS, VoltageScaling);
 8002508:	4b19      	ldr	r3, [pc, #100]	@ (8002570 <HAL_PWREx_ControlVoltageScaling+0x70>)
 800250a:	681b      	ldr	r3, [r3, #0]
 800250c:	4a19      	ldr	r2, [pc, #100]	@ (8002574 <HAL_PWREx_ControlVoltageScaling+0x74>)
 800250e:	4013      	ands	r3, r2
 8002510:	0019      	movs	r1, r3
 8002512:	4b17      	ldr	r3, [pc, #92]	@ (8002570 <HAL_PWREx_ControlVoltageScaling+0x70>)
 8002514:	687a      	ldr	r2, [r7, #4]
 8002516:	430a      	orrs	r2, r1
 8002518:	601a      	str	r2, [r3, #0]

  /* In case of Range 1 selected, we need to ensure that main regulator reaches new value */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 800251a:	687a      	ldr	r2, [r7, #4]
 800251c:	2380      	movs	r3, #128	@ 0x80
 800251e:	009b      	lsls	r3, r3, #2
 8002520:	429a      	cmp	r2, r3
 8002522:	d11f      	bne.n	8002564 <HAL_PWREx_ControlVoltageScaling+0x64>
  {
    /* Set timeout value */
    wait_loop_index = ((PWR_VOSF_SETTING_DELAY_6_US * SystemCoreClock) / 1000000U) + 1U;
 8002524:	4b14      	ldr	r3, [pc, #80]	@ (8002578 <HAL_PWREx_ControlVoltageScaling+0x78>)
 8002526:	681a      	ldr	r2, [r3, #0]
 8002528:	0013      	movs	r3, r2
 800252a:	005b      	lsls	r3, r3, #1
 800252c:	189b      	adds	r3, r3, r2
 800252e:	005b      	lsls	r3, r3, #1
 8002530:	4912      	ldr	r1, [pc, #72]	@ (800257c <HAL_PWREx_ControlVoltageScaling+0x7c>)
 8002532:	0018      	movs	r0, r3
 8002534:	f7fd fdf0 	bl	8000118 <__udivsi3>
 8002538:	0003      	movs	r3, r0
 800253a:	3301      	adds	r3, #1
 800253c:	60fb      	str	r3, [r7, #12]

    /* Wait until VOSF is reset */
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800253e:	e008      	b.n	8002552 <HAL_PWREx_ControlVoltageScaling+0x52>
    {
      if (wait_loop_index != 0U)
 8002540:	68fb      	ldr	r3, [r7, #12]
 8002542:	2b00      	cmp	r3, #0
 8002544:	d003      	beq.n	800254e <HAL_PWREx_ControlVoltageScaling+0x4e>
      {
        wait_loop_index--;
 8002546:	68fb      	ldr	r3, [r7, #12]
 8002548:	3b01      	subs	r3, #1
 800254a:	60fb      	str	r3, [r7, #12]
 800254c:	e001      	b.n	8002552 <HAL_PWREx_ControlVoltageScaling+0x52>
      }
      else
      {
        return HAL_TIMEOUT;
 800254e:	2303      	movs	r3, #3
 8002550:	e009      	b.n	8002566 <HAL_PWREx_ControlVoltageScaling+0x66>
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8002552:	4b07      	ldr	r3, [pc, #28]	@ (8002570 <HAL_PWREx_ControlVoltageScaling+0x70>)
 8002554:	695a      	ldr	r2, [r3, #20]
 8002556:	2380      	movs	r3, #128	@ 0x80
 8002558:	00db      	lsls	r3, r3, #3
 800255a:	401a      	ands	r2, r3
 800255c:	2380      	movs	r3, #128	@ 0x80
 800255e:	00db      	lsls	r3, r3, #3
 8002560:	429a      	cmp	r2, r3
 8002562:	d0ed      	beq.n	8002540 <HAL_PWREx_ControlVoltageScaling+0x40>
      }
    }
  }

  return HAL_OK;
 8002564:	2300      	movs	r3, #0
}
 8002566:	0018      	movs	r0, r3
 8002568:	46bd      	mov	sp, r7
 800256a:	b004      	add	sp, #16
 800256c:	bd80      	pop	{r7, pc}
 800256e:	46c0      	nop			@ (mov r8, r8)
 8002570:	40007000 	.word	0x40007000
 8002574:	fffff9ff 	.word	0xfffff9ff
 8002578:	20000000 	.word	0x20000000
 800257c:	000f4240 	.word	0x000f4240

08002580 <LL_RCC_GetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_4
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB1Prescaler(void)
{
 8002580:	b580      	push	{r7, lr}
 8002582:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE));
 8002584:	4b03      	ldr	r3, [pc, #12]	@ (8002594 <LL_RCC_GetAPB1Prescaler+0x14>)
 8002586:	689a      	ldr	r2, [r3, #8]
 8002588:	23e0      	movs	r3, #224	@ 0xe0
 800258a:	01db      	lsls	r3, r3, #7
 800258c:	4013      	ands	r3, r2
}
 800258e:	0018      	movs	r0, r3
 8002590:	46bd      	mov	sp, r7
 8002592:	bd80      	pop	{r7, pc}
 8002594:	40021000 	.word	0x40021000

08002598 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to LSE Off
  *         first and then to LSE On or LSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002598:	b580      	push	{r7, lr}
 800259a:	b088      	sub	sp, #32
 800259c:	af00      	add	r7, sp, #0
 800259e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	2b00      	cmp	r3, #0
 80025a4:	d101      	bne.n	80025aa <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80025a6:	2301      	movs	r3, #1
 80025a8:	e2fe      	b.n	8002ba8 <HAL_RCC_OscConfig+0x610>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	681b      	ldr	r3, [r3, #0]
 80025ae:	2201      	movs	r2, #1
 80025b0:	4013      	ands	r3, r2
 80025b2:	d100      	bne.n	80025b6 <HAL_RCC_OscConfig+0x1e>
 80025b4:	e07c      	b.n	80026b0 <HAL_RCC_OscConfig+0x118>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80025b6:	4bc3      	ldr	r3, [pc, #780]	@ (80028c4 <HAL_RCC_OscConfig+0x32c>)
 80025b8:	689b      	ldr	r3, [r3, #8]
 80025ba:	2238      	movs	r2, #56	@ 0x38
 80025bc:	4013      	ands	r3, r2
 80025be:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 80025c0:	4bc0      	ldr	r3, [pc, #768]	@ (80028c4 <HAL_RCC_OscConfig+0x32c>)
 80025c2:	68db      	ldr	r3, [r3, #12]
 80025c4:	2203      	movs	r2, #3
 80025c6:	4013      	ands	r3, r2
 80025c8:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSE))
 80025ca:	69bb      	ldr	r3, [r7, #24]
 80025cc:	2b10      	cmp	r3, #16
 80025ce:	d102      	bne.n	80025d6 <HAL_RCC_OscConfig+0x3e>
 80025d0:	697b      	ldr	r3, [r7, #20]
 80025d2:	2b03      	cmp	r3, #3
 80025d4:	d002      	beq.n	80025dc <HAL_RCC_OscConfig+0x44>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE))
 80025d6:	69bb      	ldr	r3, [r7, #24]
 80025d8:	2b08      	cmp	r3, #8
 80025da:	d10b      	bne.n	80025f4 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80025dc:	4bb9      	ldr	r3, [pc, #740]	@ (80028c4 <HAL_RCC_OscConfig+0x32c>)
 80025de:	681a      	ldr	r2, [r3, #0]
 80025e0:	2380      	movs	r3, #128	@ 0x80
 80025e2:	029b      	lsls	r3, r3, #10
 80025e4:	4013      	ands	r3, r2
 80025e6:	d062      	beq.n	80026ae <HAL_RCC_OscConfig+0x116>
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	685b      	ldr	r3, [r3, #4]
 80025ec:	2b00      	cmp	r3, #0
 80025ee:	d15e      	bne.n	80026ae <HAL_RCC_OscConfig+0x116>
      {
        return HAL_ERROR;
 80025f0:	2301      	movs	r3, #1
 80025f2:	e2d9      	b.n	8002ba8 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	685a      	ldr	r2, [r3, #4]
 80025f8:	2380      	movs	r3, #128	@ 0x80
 80025fa:	025b      	lsls	r3, r3, #9
 80025fc:	429a      	cmp	r2, r3
 80025fe:	d107      	bne.n	8002610 <HAL_RCC_OscConfig+0x78>
 8002600:	4bb0      	ldr	r3, [pc, #704]	@ (80028c4 <HAL_RCC_OscConfig+0x32c>)
 8002602:	681a      	ldr	r2, [r3, #0]
 8002604:	4baf      	ldr	r3, [pc, #700]	@ (80028c4 <HAL_RCC_OscConfig+0x32c>)
 8002606:	2180      	movs	r1, #128	@ 0x80
 8002608:	0249      	lsls	r1, r1, #9
 800260a:	430a      	orrs	r2, r1
 800260c:	601a      	str	r2, [r3, #0]
 800260e:	e020      	b.n	8002652 <HAL_RCC_OscConfig+0xba>
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	685a      	ldr	r2, [r3, #4]
 8002614:	23a0      	movs	r3, #160	@ 0xa0
 8002616:	02db      	lsls	r3, r3, #11
 8002618:	429a      	cmp	r2, r3
 800261a:	d10e      	bne.n	800263a <HAL_RCC_OscConfig+0xa2>
 800261c:	4ba9      	ldr	r3, [pc, #676]	@ (80028c4 <HAL_RCC_OscConfig+0x32c>)
 800261e:	681a      	ldr	r2, [r3, #0]
 8002620:	4ba8      	ldr	r3, [pc, #672]	@ (80028c4 <HAL_RCC_OscConfig+0x32c>)
 8002622:	2180      	movs	r1, #128	@ 0x80
 8002624:	02c9      	lsls	r1, r1, #11
 8002626:	430a      	orrs	r2, r1
 8002628:	601a      	str	r2, [r3, #0]
 800262a:	4ba6      	ldr	r3, [pc, #664]	@ (80028c4 <HAL_RCC_OscConfig+0x32c>)
 800262c:	681a      	ldr	r2, [r3, #0]
 800262e:	4ba5      	ldr	r3, [pc, #660]	@ (80028c4 <HAL_RCC_OscConfig+0x32c>)
 8002630:	2180      	movs	r1, #128	@ 0x80
 8002632:	0249      	lsls	r1, r1, #9
 8002634:	430a      	orrs	r2, r1
 8002636:	601a      	str	r2, [r3, #0]
 8002638:	e00b      	b.n	8002652 <HAL_RCC_OscConfig+0xba>
 800263a:	4ba2      	ldr	r3, [pc, #648]	@ (80028c4 <HAL_RCC_OscConfig+0x32c>)
 800263c:	681a      	ldr	r2, [r3, #0]
 800263e:	4ba1      	ldr	r3, [pc, #644]	@ (80028c4 <HAL_RCC_OscConfig+0x32c>)
 8002640:	49a1      	ldr	r1, [pc, #644]	@ (80028c8 <HAL_RCC_OscConfig+0x330>)
 8002642:	400a      	ands	r2, r1
 8002644:	601a      	str	r2, [r3, #0]
 8002646:	4b9f      	ldr	r3, [pc, #636]	@ (80028c4 <HAL_RCC_OscConfig+0x32c>)
 8002648:	681a      	ldr	r2, [r3, #0]
 800264a:	4b9e      	ldr	r3, [pc, #632]	@ (80028c4 <HAL_RCC_OscConfig+0x32c>)
 800264c:	499f      	ldr	r1, [pc, #636]	@ (80028cc <HAL_RCC_OscConfig+0x334>)
 800264e:	400a      	ands	r2, r1
 8002650:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	685b      	ldr	r3, [r3, #4]
 8002656:	2b00      	cmp	r3, #0
 8002658:	d014      	beq.n	8002684 <HAL_RCC_OscConfig+0xec>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800265a:	f7fe fd75 	bl	8001148 <HAL_GetTick>
 800265e:	0003      	movs	r3, r0
 8002660:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002662:	e008      	b.n	8002676 <HAL_RCC_OscConfig+0xde>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002664:	f7fe fd70 	bl	8001148 <HAL_GetTick>
 8002668:	0002      	movs	r2, r0
 800266a:	693b      	ldr	r3, [r7, #16]
 800266c:	1ad3      	subs	r3, r2, r3
 800266e:	2b64      	cmp	r3, #100	@ 0x64
 8002670:	d901      	bls.n	8002676 <HAL_RCC_OscConfig+0xde>
          {
            return HAL_TIMEOUT;
 8002672:	2303      	movs	r3, #3
 8002674:	e298      	b.n	8002ba8 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002676:	4b93      	ldr	r3, [pc, #588]	@ (80028c4 <HAL_RCC_OscConfig+0x32c>)
 8002678:	681a      	ldr	r2, [r3, #0]
 800267a:	2380      	movs	r3, #128	@ 0x80
 800267c:	029b      	lsls	r3, r3, #10
 800267e:	4013      	ands	r3, r2
 8002680:	d0f0      	beq.n	8002664 <HAL_RCC_OscConfig+0xcc>
 8002682:	e015      	b.n	80026b0 <HAL_RCC_OscConfig+0x118>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002684:	f7fe fd60 	bl	8001148 <HAL_GetTick>
 8002688:	0003      	movs	r3, r0
 800268a:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800268c:	e008      	b.n	80026a0 <HAL_RCC_OscConfig+0x108>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800268e:	f7fe fd5b 	bl	8001148 <HAL_GetTick>
 8002692:	0002      	movs	r2, r0
 8002694:	693b      	ldr	r3, [r7, #16]
 8002696:	1ad3      	subs	r3, r2, r3
 8002698:	2b64      	cmp	r3, #100	@ 0x64
 800269a:	d901      	bls.n	80026a0 <HAL_RCC_OscConfig+0x108>
          {
            return HAL_TIMEOUT;
 800269c:	2303      	movs	r3, #3
 800269e:	e283      	b.n	8002ba8 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80026a0:	4b88      	ldr	r3, [pc, #544]	@ (80028c4 <HAL_RCC_OscConfig+0x32c>)
 80026a2:	681a      	ldr	r2, [r3, #0]
 80026a4:	2380      	movs	r3, #128	@ 0x80
 80026a6:	029b      	lsls	r3, r3, #10
 80026a8:	4013      	ands	r3, r2
 80026aa:	d1f0      	bne.n	800268e <HAL_RCC_OscConfig+0xf6>
 80026ac:	e000      	b.n	80026b0 <HAL_RCC_OscConfig+0x118>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80026ae:	46c0      	nop			@ (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	681b      	ldr	r3, [r3, #0]
 80026b4:	2202      	movs	r2, #2
 80026b6:	4013      	ands	r3, r2
 80026b8:	d100      	bne.n	80026bc <HAL_RCC_OscConfig+0x124>
 80026ba:	e099      	b.n	80027f0 <HAL_RCC_OscConfig+0x258>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    assert_param(IS_RCC_HSIDIV(RCC_OscInitStruct->HSIDiv));

    /* Check if HSI16 is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80026bc:	4b81      	ldr	r3, [pc, #516]	@ (80028c4 <HAL_RCC_OscConfig+0x32c>)
 80026be:	689b      	ldr	r3, [r3, #8]
 80026c0:	2238      	movs	r2, #56	@ 0x38
 80026c2:	4013      	ands	r3, r2
 80026c4:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 80026c6:	4b7f      	ldr	r3, [pc, #508]	@ (80028c4 <HAL_RCC_OscConfig+0x32c>)
 80026c8:	68db      	ldr	r3, [r3, #12]
 80026ca:	2203      	movs	r2, #3
 80026cc:	4013      	ands	r3, r2
 80026ce:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSI))
 80026d0:	69bb      	ldr	r3, [r7, #24]
 80026d2:	2b10      	cmp	r3, #16
 80026d4:	d102      	bne.n	80026dc <HAL_RCC_OscConfig+0x144>
 80026d6:	697b      	ldr	r3, [r7, #20]
 80026d8:	2b02      	cmp	r3, #2
 80026da:	d002      	beq.n	80026e2 <HAL_RCC_OscConfig+0x14a>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI))
 80026dc:	69bb      	ldr	r3, [r7, #24]
 80026de:	2b00      	cmp	r3, #0
 80026e0:	d135      	bne.n	800274e <HAL_RCC_OscConfig+0x1b6>
    {
      /* When HSI is used as system clock or as PLL input clock it can not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80026e2:	4b78      	ldr	r3, [pc, #480]	@ (80028c4 <HAL_RCC_OscConfig+0x32c>)
 80026e4:	681a      	ldr	r2, [r3, #0]
 80026e6:	2380      	movs	r3, #128	@ 0x80
 80026e8:	00db      	lsls	r3, r3, #3
 80026ea:	4013      	ands	r3, r2
 80026ec:	d005      	beq.n	80026fa <HAL_RCC_OscConfig+0x162>
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	68db      	ldr	r3, [r3, #12]
 80026f2:	2b00      	cmp	r3, #0
 80026f4:	d101      	bne.n	80026fa <HAL_RCC_OscConfig+0x162>
      {
        return HAL_ERROR;
 80026f6:	2301      	movs	r3, #1
 80026f8:	e256      	b.n	8002ba8 <HAL_RCC_OscConfig+0x610>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80026fa:	4b72      	ldr	r3, [pc, #456]	@ (80028c4 <HAL_RCC_OscConfig+0x32c>)
 80026fc:	685b      	ldr	r3, [r3, #4]
 80026fe:	4a74      	ldr	r2, [pc, #464]	@ (80028d0 <HAL_RCC_OscConfig+0x338>)
 8002700:	4013      	ands	r3, r2
 8002702:	0019      	movs	r1, r3
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	695b      	ldr	r3, [r3, #20]
 8002708:	021a      	lsls	r2, r3, #8
 800270a:	4b6e      	ldr	r3, [pc, #440]	@ (80028c4 <HAL_RCC_OscConfig+0x32c>)
 800270c:	430a      	orrs	r2, r1
 800270e:	605a      	str	r2, [r3, #4]

        if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002710:	69bb      	ldr	r3, [r7, #24]
 8002712:	2b00      	cmp	r3, #0
 8002714:	d112      	bne.n	800273c <HAL_RCC_OscConfig+0x1a4>
        {
          /* Adjust the HSI16 division factor */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 8002716:	4b6b      	ldr	r3, [pc, #428]	@ (80028c4 <HAL_RCC_OscConfig+0x32c>)
 8002718:	681b      	ldr	r3, [r3, #0]
 800271a:	4a6e      	ldr	r2, [pc, #440]	@ (80028d4 <HAL_RCC_OscConfig+0x33c>)
 800271c:	4013      	ands	r3, r2
 800271e:	0019      	movs	r1, r3
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	691a      	ldr	r2, [r3, #16]
 8002724:	4b67      	ldr	r3, [pc, #412]	@ (80028c4 <HAL_RCC_OscConfig+0x32c>)
 8002726:	430a      	orrs	r2, r1
 8002728:	601a      	str	r2, [r3, #0]

          /* Update the SystemCoreClock global variable with HSISYS value  */
          SystemCoreClock = (HSI_VALUE / (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos)));
 800272a:	4b66      	ldr	r3, [pc, #408]	@ (80028c4 <HAL_RCC_OscConfig+0x32c>)
 800272c:	681b      	ldr	r3, [r3, #0]
 800272e:	0adb      	lsrs	r3, r3, #11
 8002730:	2207      	movs	r2, #7
 8002732:	4013      	ands	r3, r2
 8002734:	4a68      	ldr	r2, [pc, #416]	@ (80028d8 <HAL_RCC_OscConfig+0x340>)
 8002736:	40da      	lsrs	r2, r3
 8002738:	4b68      	ldr	r3, [pc, #416]	@ (80028dc <HAL_RCC_OscConfig+0x344>)
 800273a:	601a      	str	r2, [r3, #0]
        }

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 800273c:	4b68      	ldr	r3, [pc, #416]	@ (80028e0 <HAL_RCC_OscConfig+0x348>)
 800273e:	681b      	ldr	r3, [r3, #0]
 8002740:	0018      	movs	r0, r3
 8002742:	f7fe fca5 	bl	8001090 <HAL_InitTick>
 8002746:	1e03      	subs	r3, r0, #0
 8002748:	d051      	beq.n	80027ee <HAL_RCC_OscConfig+0x256>
        {
          return HAL_ERROR;
 800274a:	2301      	movs	r3, #1
 800274c:	e22c      	b.n	8002ba8 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	68db      	ldr	r3, [r3, #12]
 8002752:	2b00      	cmp	r3, #0
 8002754:	d030      	beq.n	80027b8 <HAL_RCC_OscConfig+0x220>
      {
        /* Configure the HSI16 division factor */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 8002756:	4b5b      	ldr	r3, [pc, #364]	@ (80028c4 <HAL_RCC_OscConfig+0x32c>)
 8002758:	681b      	ldr	r3, [r3, #0]
 800275a:	4a5e      	ldr	r2, [pc, #376]	@ (80028d4 <HAL_RCC_OscConfig+0x33c>)
 800275c:	4013      	ands	r3, r2
 800275e:	0019      	movs	r1, r3
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	691a      	ldr	r2, [r3, #16]
 8002764:	4b57      	ldr	r3, [pc, #348]	@ (80028c4 <HAL_RCC_OscConfig+0x32c>)
 8002766:	430a      	orrs	r2, r1
 8002768:	601a      	str	r2, [r3, #0]

        /* Enable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_ENABLE();
 800276a:	4b56      	ldr	r3, [pc, #344]	@ (80028c4 <HAL_RCC_OscConfig+0x32c>)
 800276c:	681a      	ldr	r2, [r3, #0]
 800276e:	4b55      	ldr	r3, [pc, #340]	@ (80028c4 <HAL_RCC_OscConfig+0x32c>)
 8002770:	2180      	movs	r1, #128	@ 0x80
 8002772:	0049      	lsls	r1, r1, #1
 8002774:	430a      	orrs	r2, r1
 8002776:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002778:	f7fe fce6 	bl	8001148 <HAL_GetTick>
 800277c:	0003      	movs	r3, r0
 800277e:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002780:	e008      	b.n	8002794 <HAL_RCC_OscConfig+0x1fc>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002782:	f7fe fce1 	bl	8001148 <HAL_GetTick>
 8002786:	0002      	movs	r2, r0
 8002788:	693b      	ldr	r3, [r7, #16]
 800278a:	1ad3      	subs	r3, r2, r3
 800278c:	2b02      	cmp	r3, #2
 800278e:	d901      	bls.n	8002794 <HAL_RCC_OscConfig+0x1fc>
          {
            return HAL_TIMEOUT;
 8002790:	2303      	movs	r3, #3
 8002792:	e209      	b.n	8002ba8 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002794:	4b4b      	ldr	r3, [pc, #300]	@ (80028c4 <HAL_RCC_OscConfig+0x32c>)
 8002796:	681a      	ldr	r2, [r3, #0]
 8002798:	2380      	movs	r3, #128	@ 0x80
 800279a:	00db      	lsls	r3, r3, #3
 800279c:	4013      	ands	r3, r2
 800279e:	d0f0      	beq.n	8002782 <HAL_RCC_OscConfig+0x1ea>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80027a0:	4b48      	ldr	r3, [pc, #288]	@ (80028c4 <HAL_RCC_OscConfig+0x32c>)
 80027a2:	685b      	ldr	r3, [r3, #4]
 80027a4:	4a4a      	ldr	r2, [pc, #296]	@ (80028d0 <HAL_RCC_OscConfig+0x338>)
 80027a6:	4013      	ands	r3, r2
 80027a8:	0019      	movs	r1, r3
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	695b      	ldr	r3, [r3, #20]
 80027ae:	021a      	lsls	r2, r3, #8
 80027b0:	4b44      	ldr	r3, [pc, #272]	@ (80028c4 <HAL_RCC_OscConfig+0x32c>)
 80027b2:	430a      	orrs	r2, r1
 80027b4:	605a      	str	r2, [r3, #4]
 80027b6:	e01b      	b.n	80027f0 <HAL_RCC_OscConfig+0x258>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_DISABLE();
 80027b8:	4b42      	ldr	r3, [pc, #264]	@ (80028c4 <HAL_RCC_OscConfig+0x32c>)
 80027ba:	681a      	ldr	r2, [r3, #0]
 80027bc:	4b41      	ldr	r3, [pc, #260]	@ (80028c4 <HAL_RCC_OscConfig+0x32c>)
 80027be:	4949      	ldr	r1, [pc, #292]	@ (80028e4 <HAL_RCC_OscConfig+0x34c>)
 80027c0:	400a      	ands	r2, r1
 80027c2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80027c4:	f7fe fcc0 	bl	8001148 <HAL_GetTick>
 80027c8:	0003      	movs	r3, r0
 80027ca:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80027cc:	e008      	b.n	80027e0 <HAL_RCC_OscConfig+0x248>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80027ce:	f7fe fcbb 	bl	8001148 <HAL_GetTick>
 80027d2:	0002      	movs	r2, r0
 80027d4:	693b      	ldr	r3, [r7, #16]
 80027d6:	1ad3      	subs	r3, r2, r3
 80027d8:	2b02      	cmp	r3, #2
 80027da:	d901      	bls.n	80027e0 <HAL_RCC_OscConfig+0x248>
          {
            return HAL_TIMEOUT;
 80027dc:	2303      	movs	r3, #3
 80027de:	e1e3      	b.n	8002ba8 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80027e0:	4b38      	ldr	r3, [pc, #224]	@ (80028c4 <HAL_RCC_OscConfig+0x32c>)
 80027e2:	681a      	ldr	r2, [r3, #0]
 80027e4:	2380      	movs	r3, #128	@ 0x80
 80027e6:	00db      	lsls	r3, r3, #3
 80027e8:	4013      	ands	r3, r2
 80027ea:	d1f0      	bne.n	80027ce <HAL_RCC_OscConfig+0x236>
 80027ec:	e000      	b.n	80027f0 <HAL_RCC_OscConfig+0x258>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80027ee:	46c0      	nop			@ (mov r8, r8)
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	681b      	ldr	r3, [r3, #0]
 80027f4:	2208      	movs	r2, #8
 80027f6:	4013      	ands	r3, r2
 80027f8:	d047      	beq.n	800288a <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check if LSI is used as system clock */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 80027fa:	4b32      	ldr	r3, [pc, #200]	@ (80028c4 <HAL_RCC_OscConfig+0x32c>)
 80027fc:	689b      	ldr	r3, [r3, #8]
 80027fe:	2238      	movs	r2, #56	@ 0x38
 8002800:	4013      	ands	r3, r2
 8002802:	2b18      	cmp	r3, #24
 8002804:	d10a      	bne.n	800281c <HAL_RCC_OscConfig+0x284>
    {
      /* When LSI is used as system clock it will not be disabled */
      if ((((RCC->CSR) & RCC_CSR_LSIRDY) != 0U) && (RCC_OscInitStruct->LSIState == RCC_LSI_OFF))
 8002806:	4b2f      	ldr	r3, [pc, #188]	@ (80028c4 <HAL_RCC_OscConfig+0x32c>)
 8002808:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800280a:	2202      	movs	r2, #2
 800280c:	4013      	ands	r3, r2
 800280e:	d03c      	beq.n	800288a <HAL_RCC_OscConfig+0x2f2>
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	699b      	ldr	r3, [r3, #24]
 8002814:	2b00      	cmp	r3, #0
 8002816:	d138      	bne.n	800288a <HAL_RCC_OscConfig+0x2f2>
      {
        return HAL_ERROR;
 8002818:	2301      	movs	r3, #1
 800281a:	e1c5      	b.n	8002ba8 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the LSI State */
      if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	699b      	ldr	r3, [r3, #24]
 8002820:	2b00      	cmp	r3, #0
 8002822:	d019      	beq.n	8002858 <HAL_RCC_OscConfig+0x2c0>
      {
        /* Enable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_ENABLE();
 8002824:	4b27      	ldr	r3, [pc, #156]	@ (80028c4 <HAL_RCC_OscConfig+0x32c>)
 8002826:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8002828:	4b26      	ldr	r3, [pc, #152]	@ (80028c4 <HAL_RCC_OscConfig+0x32c>)
 800282a:	2101      	movs	r1, #1
 800282c:	430a      	orrs	r2, r1
 800282e:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002830:	f7fe fc8a 	bl	8001148 <HAL_GetTick>
 8002834:	0003      	movs	r3, r0
 8002836:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is ready */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002838:	e008      	b.n	800284c <HAL_RCC_OscConfig+0x2b4>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800283a:	f7fe fc85 	bl	8001148 <HAL_GetTick>
 800283e:	0002      	movs	r2, r0
 8002840:	693b      	ldr	r3, [r7, #16]
 8002842:	1ad3      	subs	r3, r2, r3
 8002844:	2b02      	cmp	r3, #2
 8002846:	d901      	bls.n	800284c <HAL_RCC_OscConfig+0x2b4>
          {
            return HAL_TIMEOUT;
 8002848:	2303      	movs	r3, #3
 800284a:	e1ad      	b.n	8002ba8 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800284c:	4b1d      	ldr	r3, [pc, #116]	@ (80028c4 <HAL_RCC_OscConfig+0x32c>)
 800284e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002850:	2202      	movs	r2, #2
 8002852:	4013      	ands	r3, r2
 8002854:	d0f1      	beq.n	800283a <HAL_RCC_OscConfig+0x2a2>
 8002856:	e018      	b.n	800288a <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Disable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_DISABLE();
 8002858:	4b1a      	ldr	r3, [pc, #104]	@ (80028c4 <HAL_RCC_OscConfig+0x32c>)
 800285a:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 800285c:	4b19      	ldr	r3, [pc, #100]	@ (80028c4 <HAL_RCC_OscConfig+0x32c>)
 800285e:	2101      	movs	r1, #1
 8002860:	438a      	bics	r2, r1
 8002862:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002864:	f7fe fc70 	bl	8001148 <HAL_GetTick>
 8002868:	0003      	movs	r3, r0
 800286a:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is disabled */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800286c:	e008      	b.n	8002880 <HAL_RCC_OscConfig+0x2e8>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800286e:	f7fe fc6b 	bl	8001148 <HAL_GetTick>
 8002872:	0002      	movs	r2, r0
 8002874:	693b      	ldr	r3, [r7, #16]
 8002876:	1ad3      	subs	r3, r2, r3
 8002878:	2b02      	cmp	r3, #2
 800287a:	d901      	bls.n	8002880 <HAL_RCC_OscConfig+0x2e8>
          {
            return HAL_TIMEOUT;
 800287c:	2303      	movs	r3, #3
 800287e:	e193      	b.n	8002ba8 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002880:	4b10      	ldr	r3, [pc, #64]	@ (80028c4 <HAL_RCC_OscConfig+0x32c>)
 8002882:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002884:	2202      	movs	r2, #2
 8002886:	4013      	ands	r3, r2
 8002888:	d1f1      	bne.n	800286e <HAL_RCC_OscConfig+0x2d6>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	681b      	ldr	r3, [r3, #0]
 800288e:	2204      	movs	r2, #4
 8002890:	4013      	ands	r3, r2
 8002892:	d100      	bne.n	8002896 <HAL_RCC_OscConfig+0x2fe>
 8002894:	e0c6      	b.n	8002a24 <HAL_RCC_OscConfig+0x48c>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002896:	231f      	movs	r3, #31
 8002898:	18fb      	adds	r3, r7, r3
 800289a:	2200      	movs	r2, #0
 800289c:	701a      	strb	r2, [r3, #0]

    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* When the LSE is used as system clock, it is not allowed disable it */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 800289e:	4b09      	ldr	r3, [pc, #36]	@ (80028c4 <HAL_RCC_OscConfig+0x32c>)
 80028a0:	689b      	ldr	r3, [r3, #8]
 80028a2:	2238      	movs	r2, #56	@ 0x38
 80028a4:	4013      	ands	r3, r2
 80028a6:	2b20      	cmp	r3, #32
 80028a8:	d11e      	bne.n	80028e8 <HAL_RCC_OscConfig+0x350>
    {
      if ((((RCC->BDCR) & RCC_BDCR_LSERDY) != 0U) && (RCC_OscInitStruct->LSEState == RCC_LSE_OFF))
 80028aa:	4b06      	ldr	r3, [pc, #24]	@ (80028c4 <HAL_RCC_OscConfig+0x32c>)
 80028ac:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80028ae:	2202      	movs	r2, #2
 80028b0:	4013      	ands	r3, r2
 80028b2:	d100      	bne.n	80028b6 <HAL_RCC_OscConfig+0x31e>
 80028b4:	e0b6      	b.n	8002a24 <HAL_RCC_OscConfig+0x48c>
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	689b      	ldr	r3, [r3, #8]
 80028ba:	2b00      	cmp	r3, #0
 80028bc:	d000      	beq.n	80028c0 <HAL_RCC_OscConfig+0x328>
 80028be:	e0b1      	b.n	8002a24 <HAL_RCC_OscConfig+0x48c>
      {
        return HAL_ERROR;
 80028c0:	2301      	movs	r3, #1
 80028c2:	e171      	b.n	8002ba8 <HAL_RCC_OscConfig+0x610>
 80028c4:	40021000 	.word	0x40021000
 80028c8:	fffeffff 	.word	0xfffeffff
 80028cc:	fffbffff 	.word	0xfffbffff
 80028d0:	ffff80ff 	.word	0xffff80ff
 80028d4:	ffffc7ff 	.word	0xffffc7ff
 80028d8:	00f42400 	.word	0x00f42400
 80028dc:	20000000 	.word	0x20000000
 80028e0:	20000004 	.word	0x20000004
 80028e4:	fffffeff 	.word	0xfffffeff
    }
    else
    {
      /* Update LSE configuration in Backup Domain control register    */
      /* Requires to enable write access to Backup Domain of necessary */
      if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80028e8:	4bb1      	ldr	r3, [pc, #708]	@ (8002bb0 <HAL_RCC_OscConfig+0x618>)
 80028ea:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80028ec:	2380      	movs	r3, #128	@ 0x80
 80028ee:	055b      	lsls	r3, r3, #21
 80028f0:	4013      	ands	r3, r2
 80028f2:	d101      	bne.n	80028f8 <HAL_RCC_OscConfig+0x360>
 80028f4:	2301      	movs	r3, #1
 80028f6:	e000      	b.n	80028fa <HAL_RCC_OscConfig+0x362>
 80028f8:	2300      	movs	r3, #0
 80028fa:	2b00      	cmp	r3, #0
 80028fc:	d011      	beq.n	8002922 <HAL_RCC_OscConfig+0x38a>
      {
        __HAL_RCC_PWR_CLK_ENABLE();
 80028fe:	4bac      	ldr	r3, [pc, #688]	@ (8002bb0 <HAL_RCC_OscConfig+0x618>)
 8002900:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8002902:	4bab      	ldr	r3, [pc, #684]	@ (8002bb0 <HAL_RCC_OscConfig+0x618>)
 8002904:	2180      	movs	r1, #128	@ 0x80
 8002906:	0549      	lsls	r1, r1, #21
 8002908:	430a      	orrs	r2, r1
 800290a:	63da      	str	r2, [r3, #60]	@ 0x3c
 800290c:	4ba8      	ldr	r3, [pc, #672]	@ (8002bb0 <HAL_RCC_OscConfig+0x618>)
 800290e:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8002910:	2380      	movs	r3, #128	@ 0x80
 8002912:	055b      	lsls	r3, r3, #21
 8002914:	4013      	ands	r3, r2
 8002916:	60fb      	str	r3, [r7, #12]
 8002918:	68fb      	ldr	r3, [r7, #12]
        pwrclkchanged = SET;
 800291a:	231f      	movs	r3, #31
 800291c:	18fb      	adds	r3, r7, r3
 800291e:	2201      	movs	r2, #1
 8002920:	701a      	strb	r2, [r3, #0]
      }

      if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002922:	4ba4      	ldr	r3, [pc, #656]	@ (8002bb4 <HAL_RCC_OscConfig+0x61c>)
 8002924:	681a      	ldr	r2, [r3, #0]
 8002926:	2380      	movs	r3, #128	@ 0x80
 8002928:	005b      	lsls	r3, r3, #1
 800292a:	4013      	ands	r3, r2
 800292c:	d11a      	bne.n	8002964 <HAL_RCC_OscConfig+0x3cc>
      {
        /* Enable write access to Backup domain */
        SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800292e:	4ba1      	ldr	r3, [pc, #644]	@ (8002bb4 <HAL_RCC_OscConfig+0x61c>)
 8002930:	681a      	ldr	r2, [r3, #0]
 8002932:	4ba0      	ldr	r3, [pc, #640]	@ (8002bb4 <HAL_RCC_OscConfig+0x61c>)
 8002934:	2180      	movs	r1, #128	@ 0x80
 8002936:	0049      	lsls	r1, r1, #1
 8002938:	430a      	orrs	r2, r1
 800293a:	601a      	str	r2, [r3, #0]

        /* Wait for Backup domain Write protection disable */
        tickstart = HAL_GetTick();
 800293c:	f7fe fc04 	bl	8001148 <HAL_GetTick>
 8002940:	0003      	movs	r3, r0
 8002942:	613b      	str	r3, [r7, #16]

        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002944:	e008      	b.n	8002958 <HAL_RCC_OscConfig+0x3c0>
        {
          if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002946:	f7fe fbff 	bl	8001148 <HAL_GetTick>
 800294a:	0002      	movs	r2, r0
 800294c:	693b      	ldr	r3, [r7, #16]
 800294e:	1ad3      	subs	r3, r2, r3
 8002950:	2b02      	cmp	r3, #2
 8002952:	d901      	bls.n	8002958 <HAL_RCC_OscConfig+0x3c0>
          {
            return HAL_TIMEOUT;
 8002954:	2303      	movs	r3, #3
 8002956:	e127      	b.n	8002ba8 <HAL_RCC_OscConfig+0x610>
        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002958:	4b96      	ldr	r3, [pc, #600]	@ (8002bb4 <HAL_RCC_OscConfig+0x61c>)
 800295a:	681a      	ldr	r2, [r3, #0]
 800295c:	2380      	movs	r3, #128	@ 0x80
 800295e:	005b      	lsls	r3, r3, #1
 8002960:	4013      	ands	r3, r2
 8002962:	d0f0      	beq.n	8002946 <HAL_RCC_OscConfig+0x3ae>
          }
        }
      }

      /* Set the new LSE configuration -----------------------------------------*/
      __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	689b      	ldr	r3, [r3, #8]
 8002968:	2b01      	cmp	r3, #1
 800296a:	d106      	bne.n	800297a <HAL_RCC_OscConfig+0x3e2>
 800296c:	4b90      	ldr	r3, [pc, #576]	@ (8002bb0 <HAL_RCC_OscConfig+0x618>)
 800296e:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8002970:	4b8f      	ldr	r3, [pc, #572]	@ (8002bb0 <HAL_RCC_OscConfig+0x618>)
 8002972:	2101      	movs	r1, #1
 8002974:	430a      	orrs	r2, r1
 8002976:	65da      	str	r2, [r3, #92]	@ 0x5c
 8002978:	e01c      	b.n	80029b4 <HAL_RCC_OscConfig+0x41c>
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	689b      	ldr	r3, [r3, #8]
 800297e:	2b05      	cmp	r3, #5
 8002980:	d10c      	bne.n	800299c <HAL_RCC_OscConfig+0x404>
 8002982:	4b8b      	ldr	r3, [pc, #556]	@ (8002bb0 <HAL_RCC_OscConfig+0x618>)
 8002984:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8002986:	4b8a      	ldr	r3, [pc, #552]	@ (8002bb0 <HAL_RCC_OscConfig+0x618>)
 8002988:	2104      	movs	r1, #4
 800298a:	430a      	orrs	r2, r1
 800298c:	65da      	str	r2, [r3, #92]	@ 0x5c
 800298e:	4b88      	ldr	r3, [pc, #544]	@ (8002bb0 <HAL_RCC_OscConfig+0x618>)
 8002990:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8002992:	4b87      	ldr	r3, [pc, #540]	@ (8002bb0 <HAL_RCC_OscConfig+0x618>)
 8002994:	2101      	movs	r1, #1
 8002996:	430a      	orrs	r2, r1
 8002998:	65da      	str	r2, [r3, #92]	@ 0x5c
 800299a:	e00b      	b.n	80029b4 <HAL_RCC_OscConfig+0x41c>
 800299c:	4b84      	ldr	r3, [pc, #528]	@ (8002bb0 <HAL_RCC_OscConfig+0x618>)
 800299e:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 80029a0:	4b83      	ldr	r3, [pc, #524]	@ (8002bb0 <HAL_RCC_OscConfig+0x618>)
 80029a2:	2101      	movs	r1, #1
 80029a4:	438a      	bics	r2, r1
 80029a6:	65da      	str	r2, [r3, #92]	@ 0x5c
 80029a8:	4b81      	ldr	r3, [pc, #516]	@ (8002bb0 <HAL_RCC_OscConfig+0x618>)
 80029aa:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 80029ac:	4b80      	ldr	r3, [pc, #512]	@ (8002bb0 <HAL_RCC_OscConfig+0x618>)
 80029ae:	2104      	movs	r1, #4
 80029b0:	438a      	bics	r2, r1
 80029b2:	65da      	str	r2, [r3, #92]	@ 0x5c

      /* Check the LSE State */
      if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	689b      	ldr	r3, [r3, #8]
 80029b8:	2b00      	cmp	r3, #0
 80029ba:	d014      	beq.n	80029e6 <HAL_RCC_OscConfig+0x44e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80029bc:	f7fe fbc4 	bl	8001148 <HAL_GetTick>
 80029c0:	0003      	movs	r3, r0
 80029c2:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80029c4:	e009      	b.n	80029da <HAL_RCC_OscConfig+0x442>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80029c6:	f7fe fbbf 	bl	8001148 <HAL_GetTick>
 80029ca:	0002      	movs	r2, r0
 80029cc:	693b      	ldr	r3, [r7, #16]
 80029ce:	1ad3      	subs	r3, r2, r3
 80029d0:	4a79      	ldr	r2, [pc, #484]	@ (8002bb8 <HAL_RCC_OscConfig+0x620>)
 80029d2:	4293      	cmp	r3, r2
 80029d4:	d901      	bls.n	80029da <HAL_RCC_OscConfig+0x442>
          {
            return HAL_TIMEOUT;
 80029d6:	2303      	movs	r3, #3
 80029d8:	e0e6      	b.n	8002ba8 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80029da:	4b75      	ldr	r3, [pc, #468]	@ (8002bb0 <HAL_RCC_OscConfig+0x618>)
 80029dc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80029de:	2202      	movs	r2, #2
 80029e0:	4013      	ands	r3, r2
 80029e2:	d0f0      	beq.n	80029c6 <HAL_RCC_OscConfig+0x42e>
 80029e4:	e013      	b.n	8002a0e <HAL_RCC_OscConfig+0x476>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80029e6:	f7fe fbaf 	bl	8001148 <HAL_GetTick>
 80029ea:	0003      	movs	r3, r0
 80029ec:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is disabled */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80029ee:	e009      	b.n	8002a04 <HAL_RCC_OscConfig+0x46c>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80029f0:	f7fe fbaa 	bl	8001148 <HAL_GetTick>
 80029f4:	0002      	movs	r2, r0
 80029f6:	693b      	ldr	r3, [r7, #16]
 80029f8:	1ad3      	subs	r3, r2, r3
 80029fa:	4a6f      	ldr	r2, [pc, #444]	@ (8002bb8 <HAL_RCC_OscConfig+0x620>)
 80029fc:	4293      	cmp	r3, r2
 80029fe:	d901      	bls.n	8002a04 <HAL_RCC_OscConfig+0x46c>
          {
            return HAL_TIMEOUT;
 8002a00:	2303      	movs	r3, #3
 8002a02:	e0d1      	b.n	8002ba8 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002a04:	4b6a      	ldr	r3, [pc, #424]	@ (8002bb0 <HAL_RCC_OscConfig+0x618>)
 8002a06:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002a08:	2202      	movs	r2, #2
 8002a0a:	4013      	ands	r3, r2
 8002a0c:	d1f0      	bne.n	80029f0 <HAL_RCC_OscConfig+0x458>
          }
        }
      }

      /* Restore clock configuration if changed */
      if (pwrclkchanged == SET)
 8002a0e:	231f      	movs	r3, #31
 8002a10:	18fb      	adds	r3, r7, r3
 8002a12:	781b      	ldrb	r3, [r3, #0]
 8002a14:	2b01      	cmp	r3, #1
 8002a16:	d105      	bne.n	8002a24 <HAL_RCC_OscConfig+0x48c>
      {
        __HAL_RCC_PWR_CLK_DISABLE();
 8002a18:	4b65      	ldr	r3, [pc, #404]	@ (8002bb0 <HAL_RCC_OscConfig+0x618>)
 8002a1a:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8002a1c:	4b64      	ldr	r3, [pc, #400]	@ (8002bb0 <HAL_RCC_OscConfig+0x618>)
 8002a1e:	4967      	ldr	r1, [pc, #412]	@ (8002bbc <HAL_RCC_OscConfig+0x624>)
 8002a20:	400a      	ands	r2, r1
 8002a22:	63da      	str	r2, [r3, #60]	@ 0x3c
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	69db      	ldr	r3, [r3, #28]
 8002a28:	2b00      	cmp	r3, #0
 8002a2a:	d100      	bne.n	8002a2e <HAL_RCC_OscConfig+0x496>
 8002a2c:	e0bb      	b.n	8002ba6 <HAL_RCC_OscConfig+0x60e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002a2e:	4b60      	ldr	r3, [pc, #384]	@ (8002bb0 <HAL_RCC_OscConfig+0x618>)
 8002a30:	689b      	ldr	r3, [r3, #8]
 8002a32:	2238      	movs	r2, #56	@ 0x38
 8002a34:	4013      	ands	r3, r2
 8002a36:	2b10      	cmp	r3, #16
 8002a38:	d100      	bne.n	8002a3c <HAL_RCC_OscConfig+0x4a4>
 8002a3a:	e07b      	b.n	8002b34 <HAL_RCC_OscConfig+0x59c>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	69db      	ldr	r3, [r3, #28]
 8002a40:	2b02      	cmp	r3, #2
 8002a42:	d156      	bne.n	8002af2 <HAL_RCC_OscConfig+0x55a>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
#endif /* RCC_PLLQ_SUPPORT */
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002a44:	4b5a      	ldr	r3, [pc, #360]	@ (8002bb0 <HAL_RCC_OscConfig+0x618>)
 8002a46:	681a      	ldr	r2, [r3, #0]
 8002a48:	4b59      	ldr	r3, [pc, #356]	@ (8002bb0 <HAL_RCC_OscConfig+0x618>)
 8002a4a:	495d      	ldr	r1, [pc, #372]	@ (8002bc0 <HAL_RCC_OscConfig+0x628>)
 8002a4c:	400a      	ands	r2, r1
 8002a4e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002a50:	f7fe fb7a 	bl	8001148 <HAL_GetTick>
 8002a54:	0003      	movs	r3, r0
 8002a56:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002a58:	e008      	b.n	8002a6c <HAL_RCC_OscConfig+0x4d4>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002a5a:	f7fe fb75 	bl	8001148 <HAL_GetTick>
 8002a5e:	0002      	movs	r2, r0
 8002a60:	693b      	ldr	r3, [r7, #16]
 8002a62:	1ad3      	subs	r3, r2, r3
 8002a64:	2b02      	cmp	r3, #2
 8002a66:	d901      	bls.n	8002a6c <HAL_RCC_OscConfig+0x4d4>
          {
            return HAL_TIMEOUT;
 8002a68:	2303      	movs	r3, #3
 8002a6a:	e09d      	b.n	8002ba8 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002a6c:	4b50      	ldr	r3, [pc, #320]	@ (8002bb0 <HAL_RCC_OscConfig+0x618>)
 8002a6e:	681a      	ldr	r2, [r3, #0]
 8002a70:	2380      	movs	r3, #128	@ 0x80
 8002a72:	049b      	lsls	r3, r3, #18
 8002a74:	4013      	ands	r3, r2
 8002a76:	d1f0      	bne.n	8002a5a <HAL_RCC_OscConfig+0x4c2>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLQ_SUPPORT)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002a78:	4b4d      	ldr	r3, [pc, #308]	@ (8002bb0 <HAL_RCC_OscConfig+0x618>)
 8002a7a:	68db      	ldr	r3, [r3, #12]
 8002a7c:	4a51      	ldr	r2, [pc, #324]	@ (8002bc4 <HAL_RCC_OscConfig+0x62c>)
 8002a7e:	4013      	ands	r3, r2
 8002a80:	0019      	movs	r1, r3
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	6a1a      	ldr	r2, [r3, #32]
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002a8a:	431a      	orrs	r2, r3
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002a90:	021b      	lsls	r3, r3, #8
 8002a92:	431a      	orrs	r2, r3
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002a98:	431a      	orrs	r2, r3
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002a9e:	431a      	orrs	r2, r3
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002aa4:	431a      	orrs	r2, r3
 8002aa6:	4b42      	ldr	r3, [pc, #264]	@ (8002bb0 <HAL_RCC_OscConfig+0x618>)
 8002aa8:	430a      	orrs	r2, r1
 8002aaa:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLR);
#endif /* RCC_PLLQ_SUPPORT */

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002aac:	4b40      	ldr	r3, [pc, #256]	@ (8002bb0 <HAL_RCC_OscConfig+0x618>)
 8002aae:	681a      	ldr	r2, [r3, #0]
 8002ab0:	4b3f      	ldr	r3, [pc, #252]	@ (8002bb0 <HAL_RCC_OscConfig+0x618>)
 8002ab2:	2180      	movs	r1, #128	@ 0x80
 8002ab4:	0449      	lsls	r1, r1, #17
 8002ab6:	430a      	orrs	r2, r1
 8002ab8:	601a      	str	r2, [r3, #0]

        /* Enable PLLR Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLRCLK);
 8002aba:	4b3d      	ldr	r3, [pc, #244]	@ (8002bb0 <HAL_RCC_OscConfig+0x618>)
 8002abc:	68da      	ldr	r2, [r3, #12]
 8002abe:	4b3c      	ldr	r3, [pc, #240]	@ (8002bb0 <HAL_RCC_OscConfig+0x618>)
 8002ac0:	2180      	movs	r1, #128	@ 0x80
 8002ac2:	0549      	lsls	r1, r1, #21
 8002ac4:	430a      	orrs	r2, r1
 8002ac6:	60da      	str	r2, [r3, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002ac8:	f7fe fb3e 	bl	8001148 <HAL_GetTick>
 8002acc:	0003      	movs	r3, r0
 8002ace:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002ad0:	e008      	b.n	8002ae4 <HAL_RCC_OscConfig+0x54c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002ad2:	f7fe fb39 	bl	8001148 <HAL_GetTick>
 8002ad6:	0002      	movs	r2, r0
 8002ad8:	693b      	ldr	r3, [r7, #16]
 8002ada:	1ad3      	subs	r3, r2, r3
 8002adc:	2b02      	cmp	r3, #2
 8002ade:	d901      	bls.n	8002ae4 <HAL_RCC_OscConfig+0x54c>
          {
            return HAL_TIMEOUT;
 8002ae0:	2303      	movs	r3, #3
 8002ae2:	e061      	b.n	8002ba8 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002ae4:	4b32      	ldr	r3, [pc, #200]	@ (8002bb0 <HAL_RCC_OscConfig+0x618>)
 8002ae6:	681a      	ldr	r2, [r3, #0]
 8002ae8:	2380      	movs	r3, #128	@ 0x80
 8002aea:	049b      	lsls	r3, r3, #18
 8002aec:	4013      	ands	r3, r2
 8002aee:	d0f0      	beq.n	8002ad2 <HAL_RCC_OscConfig+0x53a>
 8002af0:	e059      	b.n	8002ba6 <HAL_RCC_OscConfig+0x60e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002af2:	4b2f      	ldr	r3, [pc, #188]	@ (8002bb0 <HAL_RCC_OscConfig+0x618>)
 8002af4:	681a      	ldr	r2, [r3, #0]
 8002af6:	4b2e      	ldr	r3, [pc, #184]	@ (8002bb0 <HAL_RCC_OscConfig+0x618>)
 8002af8:	4931      	ldr	r1, [pc, #196]	@ (8002bc0 <HAL_RCC_OscConfig+0x628>)
 8002afa:	400a      	ands	r2, r1
 8002afc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002afe:	f7fe fb23 	bl	8001148 <HAL_GetTick>
 8002b02:	0003      	movs	r3, r0
 8002b04:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002b06:	e008      	b.n	8002b1a <HAL_RCC_OscConfig+0x582>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002b08:	f7fe fb1e 	bl	8001148 <HAL_GetTick>
 8002b0c:	0002      	movs	r2, r0
 8002b0e:	693b      	ldr	r3, [r7, #16]
 8002b10:	1ad3      	subs	r3, r2, r3
 8002b12:	2b02      	cmp	r3, #2
 8002b14:	d901      	bls.n	8002b1a <HAL_RCC_OscConfig+0x582>
          {
            return HAL_TIMEOUT;
 8002b16:	2303      	movs	r3, #3
 8002b18:	e046      	b.n	8002ba8 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002b1a:	4b25      	ldr	r3, [pc, #148]	@ (8002bb0 <HAL_RCC_OscConfig+0x618>)
 8002b1c:	681a      	ldr	r2, [r3, #0]
 8002b1e:	2380      	movs	r3, #128	@ 0x80
 8002b20:	049b      	lsls	r3, r3, #18
 8002b22:	4013      	ands	r3, r2
 8002b24:	d1f0      	bne.n	8002b08 <HAL_RCC_OscConfig+0x570>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLQ_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLQEN | RCC_PLLCFGR_PLLREN);
 8002b26:	4b22      	ldr	r3, [pc, #136]	@ (8002bb0 <HAL_RCC_OscConfig+0x618>)
 8002b28:	68da      	ldr	r2, [r3, #12]
 8002b2a:	4b21      	ldr	r3, [pc, #132]	@ (8002bb0 <HAL_RCC_OscConfig+0x618>)
 8002b2c:	4926      	ldr	r1, [pc, #152]	@ (8002bc8 <HAL_RCC_OscConfig+0x630>)
 8002b2e:	400a      	ands	r2, r1
 8002b30:	60da      	str	r2, [r3, #12]
 8002b32:	e038      	b.n	8002ba6 <HAL_RCC_OscConfig+0x60e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	69db      	ldr	r3, [r3, #28]
 8002b38:	2b01      	cmp	r3, #1
 8002b3a:	d101      	bne.n	8002b40 <HAL_RCC_OscConfig+0x5a8>
      {
        return HAL_ERROR;
 8002b3c:	2301      	movs	r3, #1
 8002b3e:	e033      	b.n	8002ba8 <HAL_RCC_OscConfig+0x610>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        temp_pllckcfg = RCC->PLLCFGR;
 8002b40:	4b1b      	ldr	r3, [pc, #108]	@ (8002bb0 <HAL_RCC_OscConfig+0x618>)
 8002b42:	68db      	ldr	r3, [r3, #12]
 8002b44:	617b      	str	r3, [r7, #20]
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002b46:	697b      	ldr	r3, [r7, #20]
 8002b48:	2203      	movs	r2, #3
 8002b4a:	401a      	ands	r2, r3
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	6a1b      	ldr	r3, [r3, #32]
 8002b50:	429a      	cmp	r2, r3
 8002b52:	d126      	bne.n	8002ba2 <HAL_RCC_OscConfig+0x60a>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8002b54:	697b      	ldr	r3, [r7, #20]
 8002b56:	2270      	movs	r2, #112	@ 0x70
 8002b58:	401a      	ands	r2, r3
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002b5e:	429a      	cmp	r2, r3
 8002b60:	d11f      	bne.n	8002ba2 <HAL_RCC_OscConfig+0x60a>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002b62:	697a      	ldr	r2, [r7, #20]
 8002b64:	23fe      	movs	r3, #254	@ 0xfe
 8002b66:	01db      	lsls	r3, r3, #7
 8002b68:	401a      	ands	r2, r3
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002b6e:	021b      	lsls	r3, r3, #8
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8002b70:	429a      	cmp	r2, r3
 8002b72:	d116      	bne.n	8002ba2 <HAL_RCC_OscConfig+0x60a>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8002b74:	697a      	ldr	r2, [r7, #20]
 8002b76:	23f8      	movs	r3, #248	@ 0xf8
 8002b78:	039b      	lsls	r3, r3, #14
 8002b7a:	401a      	ands	r2, r3
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002b80:	429a      	cmp	r2, r3
 8002b82:	d10e      	bne.n	8002ba2 <HAL_RCC_OscConfig+0x60a>
#if defined (RCC_PLLQ_SUPPORT)
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 8002b84:	697a      	ldr	r2, [r7, #20]
 8002b86:	23e0      	movs	r3, #224	@ 0xe0
 8002b88:	051b      	lsls	r3, r3, #20
 8002b8a:	401a      	ands	r2, r3
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8002b90:	429a      	cmp	r2, r3
 8002b92:	d106      	bne.n	8002ba2 <HAL_RCC_OscConfig+0x60a>
#endif /* RCC_PLLQ_SUPPORT */
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != RCC_OscInitStruct->PLL.PLLR))
 8002b94:	697b      	ldr	r3, [r7, #20]
 8002b96:	0f5b      	lsrs	r3, r3, #29
 8002b98:	075a      	lsls	r2, r3, #29
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 8002b9e:	429a      	cmp	r2, r3
 8002ba0:	d001      	beq.n	8002ba6 <HAL_RCC_OscConfig+0x60e>
        {
          return HAL_ERROR;
 8002ba2:	2301      	movs	r3, #1
 8002ba4:	e000      	b.n	8002ba8 <HAL_RCC_OscConfig+0x610>
        }
      }
    }
  }
  return HAL_OK;
 8002ba6:	2300      	movs	r3, #0
}
 8002ba8:	0018      	movs	r0, r3
 8002baa:	46bd      	mov	sp, r7
 8002bac:	b008      	add	sp, #32
 8002bae:	bd80      	pop	{r7, pc}
 8002bb0:	40021000 	.word	0x40021000
 8002bb4:	40007000 	.word	0x40007000
 8002bb8:	00001388 	.word	0x00001388
 8002bbc:	efffffff 	.word	0xefffffff
 8002bc0:	feffffff 	.word	0xfeffffff
 8002bc4:	11c1808c 	.word	0x11c1808c
 8002bc8:	eefefffc 	.word	0xeefefffc

08002bcc <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002bcc:	b580      	push	{r7, lr}
 8002bce:	b084      	sub	sp, #16
 8002bd0:	af00      	add	r7, sp, #0
 8002bd2:	6078      	str	r0, [r7, #4]
 8002bd4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	2b00      	cmp	r3, #0
 8002bda:	d101      	bne.n	8002be0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002bdc:	2301      	movs	r3, #1
 8002bde:	e0e9      	b.n	8002db4 <HAL_RCC_ClockConfig+0x1e8>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002be0:	4b76      	ldr	r3, [pc, #472]	@ (8002dbc <HAL_RCC_ClockConfig+0x1f0>)
 8002be2:	681b      	ldr	r3, [r3, #0]
 8002be4:	2207      	movs	r2, #7
 8002be6:	4013      	ands	r3, r2
 8002be8:	683a      	ldr	r2, [r7, #0]
 8002bea:	429a      	cmp	r2, r3
 8002bec:	d91e      	bls.n	8002c2c <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002bee:	4b73      	ldr	r3, [pc, #460]	@ (8002dbc <HAL_RCC_ClockConfig+0x1f0>)
 8002bf0:	681b      	ldr	r3, [r3, #0]
 8002bf2:	2207      	movs	r2, #7
 8002bf4:	4393      	bics	r3, r2
 8002bf6:	0019      	movs	r1, r3
 8002bf8:	4b70      	ldr	r3, [pc, #448]	@ (8002dbc <HAL_RCC_ClockConfig+0x1f0>)
 8002bfa:	683a      	ldr	r2, [r7, #0]
 8002bfc:	430a      	orrs	r2, r1
 8002bfe:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8002c00:	f7fe faa2 	bl	8001148 <HAL_GetTick>
 8002c04:	0003      	movs	r3, r0
 8002c06:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8002c08:	e009      	b.n	8002c1e <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002c0a:	f7fe fa9d 	bl	8001148 <HAL_GetTick>
 8002c0e:	0002      	movs	r2, r0
 8002c10:	68fb      	ldr	r3, [r7, #12]
 8002c12:	1ad3      	subs	r3, r2, r3
 8002c14:	4a6a      	ldr	r2, [pc, #424]	@ (8002dc0 <HAL_RCC_ClockConfig+0x1f4>)
 8002c16:	4293      	cmp	r3, r2
 8002c18:	d901      	bls.n	8002c1e <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 8002c1a:	2303      	movs	r3, #3
 8002c1c:	e0ca      	b.n	8002db4 <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8002c1e:	4b67      	ldr	r3, [pc, #412]	@ (8002dbc <HAL_RCC_ClockConfig+0x1f0>)
 8002c20:	681b      	ldr	r3, [r3, #0]
 8002c22:	2207      	movs	r2, #7
 8002c24:	4013      	ands	r3, r2
 8002c26:	683a      	ldr	r2, [r7, #0]
 8002c28:	429a      	cmp	r2, r3
 8002c2a:	d1ee      	bne.n	8002c0a <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	681b      	ldr	r3, [r3, #0]
 8002c30:	2202      	movs	r2, #2
 8002c32:	4013      	ands	r3, r2
 8002c34:	d015      	beq.n	8002c62 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002c36:	687b      	ldr	r3, [r7, #4]
 8002c38:	681b      	ldr	r3, [r3, #0]
 8002c3a:	2204      	movs	r2, #4
 8002c3c:	4013      	ands	r3, r2
 8002c3e:	d006      	beq.n	8002c4e <HAL_RCC_ClockConfig+0x82>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 8002c40:	4b60      	ldr	r3, [pc, #384]	@ (8002dc4 <HAL_RCC_ClockConfig+0x1f8>)
 8002c42:	689a      	ldr	r2, [r3, #8]
 8002c44:	4b5f      	ldr	r3, [pc, #380]	@ (8002dc4 <HAL_RCC_ClockConfig+0x1f8>)
 8002c46:	21e0      	movs	r1, #224	@ 0xe0
 8002c48:	01c9      	lsls	r1, r1, #7
 8002c4a:	430a      	orrs	r2, r1
 8002c4c:	609a      	str	r2, [r3, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002c4e:	4b5d      	ldr	r3, [pc, #372]	@ (8002dc4 <HAL_RCC_ClockConfig+0x1f8>)
 8002c50:	689b      	ldr	r3, [r3, #8]
 8002c52:	4a5d      	ldr	r2, [pc, #372]	@ (8002dc8 <HAL_RCC_ClockConfig+0x1fc>)
 8002c54:	4013      	ands	r3, r2
 8002c56:	0019      	movs	r1, r3
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	689a      	ldr	r2, [r3, #8]
 8002c5c:	4b59      	ldr	r3, [pc, #356]	@ (8002dc4 <HAL_RCC_ClockConfig+0x1f8>)
 8002c5e:	430a      	orrs	r2, r1
 8002c60:	609a      	str	r2, [r3, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	681b      	ldr	r3, [r3, #0]
 8002c66:	2201      	movs	r2, #1
 8002c68:	4013      	ands	r3, r2
 8002c6a:	d057      	beq.n	8002d1c <HAL_RCC_ClockConfig+0x150>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	685b      	ldr	r3, [r3, #4]
 8002c70:	2b01      	cmp	r3, #1
 8002c72:	d107      	bne.n	8002c84 <HAL_RCC_ClockConfig+0xb8>
    {
      /* Check the HSE ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002c74:	4b53      	ldr	r3, [pc, #332]	@ (8002dc4 <HAL_RCC_ClockConfig+0x1f8>)
 8002c76:	681a      	ldr	r2, [r3, #0]
 8002c78:	2380      	movs	r3, #128	@ 0x80
 8002c7a:	029b      	lsls	r3, r3, #10
 8002c7c:	4013      	ands	r3, r2
 8002c7e:	d12b      	bne.n	8002cd8 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8002c80:	2301      	movs	r3, #1
 8002c82:	e097      	b.n	8002db4 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	685b      	ldr	r3, [r3, #4]
 8002c88:	2b02      	cmp	r3, #2
 8002c8a:	d107      	bne.n	8002c9c <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002c8c:	4b4d      	ldr	r3, [pc, #308]	@ (8002dc4 <HAL_RCC_ClockConfig+0x1f8>)
 8002c8e:	681a      	ldr	r2, [r3, #0]
 8002c90:	2380      	movs	r3, #128	@ 0x80
 8002c92:	049b      	lsls	r3, r3, #18
 8002c94:	4013      	ands	r3, r2
 8002c96:	d11f      	bne.n	8002cd8 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8002c98:	2301      	movs	r3, #1
 8002c9a:	e08b      	b.n	8002db4 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* HSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	685b      	ldr	r3, [r3, #4]
 8002ca0:	2b00      	cmp	r3, #0
 8002ca2:	d107      	bne.n	8002cb4 <HAL_RCC_ClockConfig+0xe8>
    {
      /* Check the HSI ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002ca4:	4b47      	ldr	r3, [pc, #284]	@ (8002dc4 <HAL_RCC_ClockConfig+0x1f8>)
 8002ca6:	681a      	ldr	r2, [r3, #0]
 8002ca8:	2380      	movs	r3, #128	@ 0x80
 8002caa:	00db      	lsls	r3, r3, #3
 8002cac:	4013      	ands	r3, r2
 8002cae:	d113      	bne.n	8002cd8 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8002cb0:	2301      	movs	r3, #1
 8002cb2:	e07f      	b.n	8002db4 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* LSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_LSI)
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	685b      	ldr	r3, [r3, #4]
 8002cb8:	2b03      	cmp	r3, #3
 8002cba:	d106      	bne.n	8002cca <HAL_RCC_ClockConfig+0xfe>
    {
      /* Check the LSI ready flag */
      if (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002cbc:	4b41      	ldr	r3, [pc, #260]	@ (8002dc4 <HAL_RCC_ClockConfig+0x1f8>)
 8002cbe:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002cc0:	2202      	movs	r2, #2
 8002cc2:	4013      	ands	r3, r2
 8002cc4:	d108      	bne.n	8002cd8 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8002cc6:	2301      	movs	r3, #1
 8002cc8:	e074      	b.n	8002db4 <HAL_RCC_ClockConfig+0x1e8>
    }
    /* LSE is selected as System Clock Source */
    else
    {
      /* Check the LSE ready flag */
      if (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002cca:	4b3e      	ldr	r3, [pc, #248]	@ (8002dc4 <HAL_RCC_ClockConfig+0x1f8>)
 8002ccc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002cce:	2202      	movs	r2, #2
 8002cd0:	4013      	ands	r3, r2
 8002cd2:	d101      	bne.n	8002cd8 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8002cd4:	2301      	movs	r3, #1
 8002cd6:	e06d      	b.n	8002db4 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8002cd8:	4b3a      	ldr	r3, [pc, #232]	@ (8002dc4 <HAL_RCC_ClockConfig+0x1f8>)
 8002cda:	689b      	ldr	r3, [r3, #8]
 8002cdc:	2207      	movs	r2, #7
 8002cde:	4393      	bics	r3, r2
 8002ce0:	0019      	movs	r1, r3
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	685a      	ldr	r2, [r3, #4]
 8002ce6:	4b37      	ldr	r3, [pc, #220]	@ (8002dc4 <HAL_RCC_ClockConfig+0x1f8>)
 8002ce8:	430a      	orrs	r2, r1
 8002cea:	609a      	str	r2, [r3, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002cec:	f7fe fa2c 	bl	8001148 <HAL_GetTick>
 8002cf0:	0003      	movs	r3, r0
 8002cf2:	60fb      	str	r3, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002cf4:	e009      	b.n	8002d0a <HAL_RCC_ClockConfig+0x13e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002cf6:	f7fe fa27 	bl	8001148 <HAL_GetTick>
 8002cfa:	0002      	movs	r2, r0
 8002cfc:	68fb      	ldr	r3, [r7, #12]
 8002cfe:	1ad3      	subs	r3, r2, r3
 8002d00:	4a2f      	ldr	r2, [pc, #188]	@ (8002dc0 <HAL_RCC_ClockConfig+0x1f4>)
 8002d02:	4293      	cmp	r3, r2
 8002d04:	d901      	bls.n	8002d0a <HAL_RCC_ClockConfig+0x13e>
      {
        return HAL_TIMEOUT;
 8002d06:	2303      	movs	r3, #3
 8002d08:	e054      	b.n	8002db4 <HAL_RCC_ClockConfig+0x1e8>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002d0a:	4b2e      	ldr	r3, [pc, #184]	@ (8002dc4 <HAL_RCC_ClockConfig+0x1f8>)
 8002d0c:	689b      	ldr	r3, [r3, #8]
 8002d0e:	2238      	movs	r2, #56	@ 0x38
 8002d10:	401a      	ands	r2, r3
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	685b      	ldr	r3, [r3, #4]
 8002d16:	00db      	lsls	r3, r3, #3
 8002d18:	429a      	cmp	r2, r3
 8002d1a:	d1ec      	bne.n	8002cf6 <HAL_RCC_ClockConfig+0x12a>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002d1c:	4b27      	ldr	r3, [pc, #156]	@ (8002dbc <HAL_RCC_ClockConfig+0x1f0>)
 8002d1e:	681b      	ldr	r3, [r3, #0]
 8002d20:	2207      	movs	r2, #7
 8002d22:	4013      	ands	r3, r2
 8002d24:	683a      	ldr	r2, [r7, #0]
 8002d26:	429a      	cmp	r2, r3
 8002d28:	d21e      	bcs.n	8002d68 <HAL_RCC_ClockConfig+0x19c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002d2a:	4b24      	ldr	r3, [pc, #144]	@ (8002dbc <HAL_RCC_ClockConfig+0x1f0>)
 8002d2c:	681b      	ldr	r3, [r3, #0]
 8002d2e:	2207      	movs	r2, #7
 8002d30:	4393      	bics	r3, r2
 8002d32:	0019      	movs	r1, r3
 8002d34:	4b21      	ldr	r3, [pc, #132]	@ (8002dbc <HAL_RCC_ClockConfig+0x1f0>)
 8002d36:	683a      	ldr	r2, [r7, #0]
 8002d38:	430a      	orrs	r2, r1
 8002d3a:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8002d3c:	f7fe fa04 	bl	8001148 <HAL_GetTick>
 8002d40:	0003      	movs	r3, r0
 8002d42:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8002d44:	e009      	b.n	8002d5a <HAL_RCC_ClockConfig+0x18e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002d46:	f7fe f9ff 	bl	8001148 <HAL_GetTick>
 8002d4a:	0002      	movs	r2, r0
 8002d4c:	68fb      	ldr	r3, [r7, #12]
 8002d4e:	1ad3      	subs	r3, r2, r3
 8002d50:	4a1b      	ldr	r2, [pc, #108]	@ (8002dc0 <HAL_RCC_ClockConfig+0x1f4>)
 8002d52:	4293      	cmp	r3, r2
 8002d54:	d901      	bls.n	8002d5a <HAL_RCC_ClockConfig+0x18e>
      {
        return HAL_TIMEOUT;
 8002d56:	2303      	movs	r3, #3
 8002d58:	e02c      	b.n	8002db4 <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8002d5a:	4b18      	ldr	r3, [pc, #96]	@ (8002dbc <HAL_RCC_ClockConfig+0x1f0>)
 8002d5c:	681b      	ldr	r3, [r3, #0]
 8002d5e:	2207      	movs	r2, #7
 8002d60:	4013      	ands	r3, r2
 8002d62:	683a      	ldr	r2, [r7, #0]
 8002d64:	429a      	cmp	r2, r3
 8002d66:	d1ee      	bne.n	8002d46 <HAL_RCC_ClockConfig+0x17a>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	681b      	ldr	r3, [r3, #0]
 8002d6c:	2204      	movs	r2, #4
 8002d6e:	4013      	ands	r3, r2
 8002d70:	d009      	beq.n	8002d86 <HAL_RCC_ClockConfig+0x1ba>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 8002d72:	4b14      	ldr	r3, [pc, #80]	@ (8002dc4 <HAL_RCC_ClockConfig+0x1f8>)
 8002d74:	689b      	ldr	r3, [r3, #8]
 8002d76:	4a15      	ldr	r2, [pc, #84]	@ (8002dcc <HAL_RCC_ClockConfig+0x200>)
 8002d78:	4013      	ands	r3, r2
 8002d7a:	0019      	movs	r1, r3
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	68da      	ldr	r2, [r3, #12]
 8002d80:	4b10      	ldr	r3, [pc, #64]	@ (8002dc4 <HAL_RCC_ClockConfig+0x1f8>)
 8002d82:	430a      	orrs	r2, r1
 8002d84:	609a      	str	r2, [r3, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = (HAL_RCC_GetSysClockFreq() >> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos]) & 0x1FU));
 8002d86:	f000 f829 	bl	8002ddc <HAL_RCC_GetSysClockFreq>
 8002d8a:	0001      	movs	r1, r0
 8002d8c:	4b0d      	ldr	r3, [pc, #52]	@ (8002dc4 <HAL_RCC_ClockConfig+0x1f8>)
 8002d8e:	689b      	ldr	r3, [r3, #8]
 8002d90:	0a1b      	lsrs	r3, r3, #8
 8002d92:	220f      	movs	r2, #15
 8002d94:	401a      	ands	r2, r3
 8002d96:	4b0e      	ldr	r3, [pc, #56]	@ (8002dd0 <HAL_RCC_ClockConfig+0x204>)
 8002d98:	0092      	lsls	r2, r2, #2
 8002d9a:	58d3      	ldr	r3, [r2, r3]
 8002d9c:	221f      	movs	r2, #31
 8002d9e:	4013      	ands	r3, r2
 8002da0:	000a      	movs	r2, r1
 8002da2:	40da      	lsrs	r2, r3
 8002da4:	4b0b      	ldr	r3, [pc, #44]	@ (8002dd4 <HAL_RCC_ClockConfig+0x208>)
 8002da6:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8002da8:	4b0b      	ldr	r3, [pc, #44]	@ (8002dd8 <HAL_RCC_ClockConfig+0x20c>)
 8002daa:	681b      	ldr	r3, [r3, #0]
 8002dac:	0018      	movs	r0, r3
 8002dae:	f7fe f96f 	bl	8001090 <HAL_InitTick>
 8002db2:	0003      	movs	r3, r0
}
 8002db4:	0018      	movs	r0, r3
 8002db6:	46bd      	mov	sp, r7
 8002db8:	b004      	add	sp, #16
 8002dba:	bd80      	pop	{r7, pc}
 8002dbc:	40022000 	.word	0x40022000
 8002dc0:	00001388 	.word	0x00001388
 8002dc4:	40021000 	.word	0x40021000
 8002dc8:	fffff0ff 	.word	0xfffff0ff
 8002dcc:	ffff8fff 	.word	0xffff8fff
 8002dd0:	08004488 	.word	0x08004488
 8002dd4:	20000000 	.word	0x20000000
 8002dd8:	20000004 	.word	0x20000004

08002ddc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002ddc:	b580      	push	{r7, lr}
 8002dde:	b086      	sub	sp, #24
 8002de0:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm, hsidiv;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002de2:	4b3c      	ldr	r3, [pc, #240]	@ (8002ed4 <HAL_RCC_GetSysClockFreq+0xf8>)
 8002de4:	689b      	ldr	r3, [r3, #8]
 8002de6:	2238      	movs	r2, #56	@ 0x38
 8002de8:	4013      	ands	r3, r2
 8002dea:	d10f      	bne.n	8002e0c <HAL_RCC_GetSysClockFreq+0x30>
  {
    /* HSISYS can be derived for HSI16 */
    hsidiv = (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos));
 8002dec:	4b39      	ldr	r3, [pc, #228]	@ (8002ed4 <HAL_RCC_GetSysClockFreq+0xf8>)
 8002dee:	681b      	ldr	r3, [r3, #0]
 8002df0:	0adb      	lsrs	r3, r3, #11
 8002df2:	2207      	movs	r2, #7
 8002df4:	4013      	ands	r3, r2
 8002df6:	2201      	movs	r2, #1
 8002df8:	409a      	lsls	r2, r3
 8002dfa:	0013      	movs	r3, r2
 8002dfc:	603b      	str	r3, [r7, #0]

    /* HSI used as system clock source */
    sysclockfreq = (HSI_VALUE / hsidiv);
 8002dfe:	6839      	ldr	r1, [r7, #0]
 8002e00:	4835      	ldr	r0, [pc, #212]	@ (8002ed8 <HAL_RCC_GetSysClockFreq+0xfc>)
 8002e02:	f7fd f989 	bl	8000118 <__udivsi3>
 8002e06:	0003      	movs	r3, r0
 8002e08:	613b      	str	r3, [r7, #16]
 8002e0a:	e05d      	b.n	8002ec8 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002e0c:	4b31      	ldr	r3, [pc, #196]	@ (8002ed4 <HAL_RCC_GetSysClockFreq+0xf8>)
 8002e0e:	689b      	ldr	r3, [r3, #8]
 8002e10:	2238      	movs	r2, #56	@ 0x38
 8002e12:	4013      	ands	r3, r2
 8002e14:	2b08      	cmp	r3, #8
 8002e16:	d102      	bne.n	8002e1e <HAL_RCC_GetSysClockFreq+0x42>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8002e18:	4b30      	ldr	r3, [pc, #192]	@ (8002edc <HAL_RCC_GetSysClockFreq+0x100>)
 8002e1a:	613b      	str	r3, [r7, #16]
 8002e1c:	e054      	b.n	8002ec8 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002e1e:	4b2d      	ldr	r3, [pc, #180]	@ (8002ed4 <HAL_RCC_GetSysClockFreq+0xf8>)
 8002e20:	689b      	ldr	r3, [r3, #8]
 8002e22:	2238      	movs	r2, #56	@ 0x38
 8002e24:	4013      	ands	r3, r2
 8002e26:	2b10      	cmp	r3, #16
 8002e28:	d138      	bne.n	8002e9c <HAL_RCC_GetSysClockFreq+0xc0>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
 8002e2a:	4b2a      	ldr	r3, [pc, #168]	@ (8002ed4 <HAL_RCC_GetSysClockFreq+0xf8>)
 8002e2c:	68db      	ldr	r3, [r3, #12]
 8002e2e:	2203      	movs	r2, #3
 8002e30:	4013      	ands	r3, r2
 8002e32:	60fb      	str	r3, [r7, #12]
    pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8002e34:	4b27      	ldr	r3, [pc, #156]	@ (8002ed4 <HAL_RCC_GetSysClockFreq+0xf8>)
 8002e36:	68db      	ldr	r3, [r3, #12]
 8002e38:	091b      	lsrs	r3, r3, #4
 8002e3a:	2207      	movs	r2, #7
 8002e3c:	4013      	ands	r3, r2
 8002e3e:	3301      	adds	r3, #1
 8002e40:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8002e42:	68fb      	ldr	r3, [r7, #12]
 8002e44:	2b03      	cmp	r3, #3
 8002e46:	d10d      	bne.n	8002e64 <HAL_RCC_GetSysClockFreq+0x88>
    {
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8002e48:	68b9      	ldr	r1, [r7, #8]
 8002e4a:	4824      	ldr	r0, [pc, #144]	@ (8002edc <HAL_RCC_GetSysClockFreq+0x100>)
 8002e4c:	f7fd f964 	bl	8000118 <__udivsi3>
 8002e50:	0003      	movs	r3, r0
 8002e52:	0019      	movs	r1, r3
 8002e54:	4b1f      	ldr	r3, [pc, #124]	@ (8002ed4 <HAL_RCC_GetSysClockFreq+0xf8>)
 8002e56:	68db      	ldr	r3, [r3, #12]
 8002e58:	0a1b      	lsrs	r3, r3, #8
 8002e5a:	227f      	movs	r2, #127	@ 0x7f
 8002e5c:	4013      	ands	r3, r2
 8002e5e:	434b      	muls	r3, r1
 8002e60:	617b      	str	r3, [r7, #20]
        break;
 8002e62:	e00d      	b.n	8002e80 <HAL_RCC_GetSysClockFreq+0xa4>

      case RCC_PLLSOURCE_HSI:  /* HSI16 used as PLL clock source */
      default:                 /* HSI16 used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) ;
 8002e64:	68b9      	ldr	r1, [r7, #8]
 8002e66:	481c      	ldr	r0, [pc, #112]	@ (8002ed8 <HAL_RCC_GetSysClockFreq+0xfc>)
 8002e68:	f7fd f956 	bl	8000118 <__udivsi3>
 8002e6c:	0003      	movs	r3, r0
 8002e6e:	0019      	movs	r1, r3
 8002e70:	4b18      	ldr	r3, [pc, #96]	@ (8002ed4 <HAL_RCC_GetSysClockFreq+0xf8>)
 8002e72:	68db      	ldr	r3, [r3, #12]
 8002e74:	0a1b      	lsrs	r3, r3, #8
 8002e76:	227f      	movs	r2, #127	@ 0x7f
 8002e78:	4013      	ands	r3, r2
 8002e7a:	434b      	muls	r3, r1
 8002e7c:	617b      	str	r3, [r7, #20]
        break;
 8002e7e:	46c0      	nop			@ (mov r8, r8)
    }
    pllr = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U);
 8002e80:	4b14      	ldr	r3, [pc, #80]	@ (8002ed4 <HAL_RCC_GetSysClockFreq+0xf8>)
 8002e82:	68db      	ldr	r3, [r3, #12]
 8002e84:	0f5b      	lsrs	r3, r3, #29
 8002e86:	2207      	movs	r2, #7
 8002e88:	4013      	ands	r3, r2
 8002e8a:	3301      	adds	r3, #1
 8002e8c:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco / pllr;
 8002e8e:	6879      	ldr	r1, [r7, #4]
 8002e90:	6978      	ldr	r0, [r7, #20]
 8002e92:	f7fd f941 	bl	8000118 <__udivsi3>
 8002e96:	0003      	movs	r3, r0
 8002e98:	613b      	str	r3, [r7, #16]
 8002e9a:	e015      	b.n	8002ec8 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 8002e9c:	4b0d      	ldr	r3, [pc, #52]	@ (8002ed4 <HAL_RCC_GetSysClockFreq+0xf8>)
 8002e9e:	689b      	ldr	r3, [r3, #8]
 8002ea0:	2238      	movs	r2, #56	@ 0x38
 8002ea2:	4013      	ands	r3, r2
 8002ea4:	2b20      	cmp	r3, #32
 8002ea6:	d103      	bne.n	8002eb0 <HAL_RCC_GetSysClockFreq+0xd4>
  {
    /* LSE used as system clock source */
    sysclockfreq = LSE_VALUE;
 8002ea8:	2380      	movs	r3, #128	@ 0x80
 8002eaa:	021b      	lsls	r3, r3, #8
 8002eac:	613b      	str	r3, [r7, #16]
 8002eae:	e00b      	b.n	8002ec8 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 8002eb0:	4b08      	ldr	r3, [pc, #32]	@ (8002ed4 <HAL_RCC_GetSysClockFreq+0xf8>)
 8002eb2:	689b      	ldr	r3, [r3, #8]
 8002eb4:	2238      	movs	r2, #56	@ 0x38
 8002eb6:	4013      	ands	r3, r2
 8002eb8:	2b18      	cmp	r3, #24
 8002eba:	d103      	bne.n	8002ec4 <HAL_RCC_GetSysClockFreq+0xe8>
  {
    /* LSI used as system clock source */
    sysclockfreq = LSI_VALUE;
 8002ebc:	23fa      	movs	r3, #250	@ 0xfa
 8002ebe:	01db      	lsls	r3, r3, #7
 8002ec0:	613b      	str	r3, [r7, #16]
 8002ec2:	e001      	b.n	8002ec8 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else
  {
    sysclockfreq = 0U;
 8002ec4:	2300      	movs	r3, #0
 8002ec6:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8002ec8:	693b      	ldr	r3, [r7, #16]
}
 8002eca:	0018      	movs	r0, r3
 8002ecc:	46bd      	mov	sp, r7
 8002ece:	b006      	add	sp, #24
 8002ed0:	bd80      	pop	{r7, pc}
 8002ed2:	46c0      	nop			@ (mov r8, r8)
 8002ed4:	40021000 	.word	0x40021000
 8002ed8:	00f42400 	.word	0x00f42400
 8002edc:	007a1200 	.word	0x007a1200

08002ee0 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002ee0:	b580      	push	{r7, lr}
 8002ee2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002ee4:	4b02      	ldr	r3, [pc, #8]	@ (8002ef0 <HAL_RCC_GetHCLKFreq+0x10>)
 8002ee6:	681b      	ldr	r3, [r3, #0]
}
 8002ee8:	0018      	movs	r0, r3
 8002eea:	46bd      	mov	sp, r7
 8002eec:	bd80      	pop	{r7, pc}
 8002eee:	46c0      	nop			@ (mov r8, r8)
 8002ef0:	20000000 	.word	0x20000000

08002ef4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002ef4:	b5b0      	push	{r4, r5, r7, lr}
 8002ef6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK1_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB1Prescaler())));
 8002ef8:	f7ff fff2 	bl	8002ee0 <HAL_RCC_GetHCLKFreq>
 8002efc:	0004      	movs	r4, r0
 8002efe:	f7ff fb3f 	bl	8002580 <LL_RCC_GetAPB1Prescaler>
 8002f02:	0003      	movs	r3, r0
 8002f04:	0b1a      	lsrs	r2, r3, #12
 8002f06:	4b05      	ldr	r3, [pc, #20]	@ (8002f1c <HAL_RCC_GetPCLK1Freq+0x28>)
 8002f08:	0092      	lsls	r2, r2, #2
 8002f0a:	58d3      	ldr	r3, [r2, r3]
 8002f0c:	221f      	movs	r2, #31
 8002f0e:	4013      	ands	r3, r2
 8002f10:	40dc      	lsrs	r4, r3
 8002f12:	0023      	movs	r3, r4
}
 8002f14:	0018      	movs	r0, r3
 8002f16:	46bd      	mov	sp, r7
 8002f18:	bdb0      	pop	{r4, r5, r7, pc}
 8002f1a:	46c0      	nop			@ (mov r8, r8)
 8002f1c:	080044c8 	.word	0x080044c8

08002f20 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002f20:	b580      	push	{r7, lr}
 8002f22:	b082      	sub	sp, #8
 8002f24:	af00      	add	r7, sp, #0
 8002f26:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	2b00      	cmp	r3, #0
 8002f2c:	d101      	bne.n	8002f32 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002f2e:	2301      	movs	r3, #1
 8002f30:	e046      	b.n	8002fc0 <HAL_UART_Init+0xa0>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	2288      	movs	r2, #136	@ 0x88
 8002f36:	589b      	ldr	r3, [r3, r2]
 8002f38:	2b00      	cmp	r3, #0
 8002f3a:	d107      	bne.n	8002f4c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	2284      	movs	r2, #132	@ 0x84
 8002f40:	2100      	movs	r1, #0
 8002f42:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	0018      	movs	r0, r3
 8002f48:	f7fd ffb8 	bl	8000ebc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	2288      	movs	r2, #136	@ 0x88
 8002f50:	2124      	movs	r1, #36	@ 0x24
 8002f52:	5099      	str	r1, [r3, r2]

  __HAL_UART_DISABLE(huart);
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	681b      	ldr	r3, [r3, #0]
 8002f58:	681a      	ldr	r2, [r3, #0]
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	681b      	ldr	r3, [r3, #0]
 8002f5e:	2101      	movs	r1, #1
 8002f60:	438a      	bics	r2, r1
 8002f62:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002f68:	2b00      	cmp	r3, #0
 8002f6a:	d003      	beq.n	8002f74 <HAL_UART_Init+0x54>
  {
    UART_AdvFeatureConfig(huart);
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	0018      	movs	r0, r3
 8002f70:	f000 fb48 	bl	8003604 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	0018      	movs	r0, r3
 8002f78:	f000 f8cc 	bl	8003114 <UART_SetConfig>
 8002f7c:	0003      	movs	r3, r0
 8002f7e:	2b01      	cmp	r3, #1
 8002f80:	d101      	bne.n	8002f86 <HAL_UART_Init+0x66>
  {
    return HAL_ERROR;
 8002f82:	2301      	movs	r3, #1
 8002f84:	e01c      	b.n	8002fc0 <HAL_UART_Init+0xa0>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	681b      	ldr	r3, [r3, #0]
 8002f8a:	685a      	ldr	r2, [r3, #4]
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	681b      	ldr	r3, [r3, #0]
 8002f90:	490d      	ldr	r1, [pc, #52]	@ (8002fc8 <HAL_UART_Init+0xa8>)
 8002f92:	400a      	ands	r2, r1
 8002f94:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	681b      	ldr	r3, [r3, #0]
 8002f9a:	689a      	ldr	r2, [r3, #8]
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	681b      	ldr	r3, [r3, #0]
 8002fa0:	212a      	movs	r1, #42	@ 0x2a
 8002fa2:	438a      	bics	r2, r1
 8002fa4:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	681b      	ldr	r3, [r3, #0]
 8002faa:	681a      	ldr	r2, [r3, #0]
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	681b      	ldr	r3, [r3, #0]
 8002fb0:	2101      	movs	r1, #1
 8002fb2:	430a      	orrs	r2, r1
 8002fb4:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8002fb6:	687b      	ldr	r3, [r7, #4]
 8002fb8:	0018      	movs	r0, r3
 8002fba:	f000 fbd7 	bl	800376c <UART_CheckIdleState>
 8002fbe:	0003      	movs	r3, r0
}
 8002fc0:	0018      	movs	r0, r3
 8002fc2:	46bd      	mov	sp, r7
 8002fc4:	b002      	add	sp, #8
 8002fc6:	bd80      	pop	{r7, pc}
 8002fc8:	ffffb7ff 	.word	0xffffb7ff

08002fcc <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002fcc:	b580      	push	{r7, lr}
 8002fce:	b08a      	sub	sp, #40	@ 0x28
 8002fd0:	af02      	add	r7, sp, #8
 8002fd2:	60f8      	str	r0, [r7, #12]
 8002fd4:	60b9      	str	r1, [r7, #8]
 8002fd6:	603b      	str	r3, [r7, #0]
 8002fd8:	1dbb      	adds	r3, r7, #6
 8002fda:	801a      	strh	r2, [r3, #0]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002fdc:	68fb      	ldr	r3, [r7, #12]
 8002fde:	2288      	movs	r2, #136	@ 0x88
 8002fe0:	589b      	ldr	r3, [r3, r2]
 8002fe2:	2b20      	cmp	r3, #32
 8002fe4:	d000      	beq.n	8002fe8 <HAL_UART_Transmit+0x1c>
 8002fe6:	e090      	b.n	800310a <HAL_UART_Transmit+0x13e>
  {
    if ((pData == NULL) || (Size == 0U))
 8002fe8:	68bb      	ldr	r3, [r7, #8]
 8002fea:	2b00      	cmp	r3, #0
 8002fec:	d003      	beq.n	8002ff6 <HAL_UART_Transmit+0x2a>
 8002fee:	1dbb      	adds	r3, r7, #6
 8002ff0:	881b      	ldrh	r3, [r3, #0]
 8002ff2:	2b00      	cmp	r3, #0
 8002ff4:	d101      	bne.n	8002ffa <HAL_UART_Transmit+0x2e>
    {
      return  HAL_ERROR;
 8002ff6:	2301      	movs	r3, #1
 8002ff8:	e088      	b.n	800310c <HAL_UART_Transmit+0x140>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be filled into TDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002ffa:	68fb      	ldr	r3, [r7, #12]
 8002ffc:	689a      	ldr	r2, [r3, #8]
 8002ffe:	2380      	movs	r3, #128	@ 0x80
 8003000:	015b      	lsls	r3, r3, #5
 8003002:	429a      	cmp	r2, r3
 8003004:	d109      	bne.n	800301a <HAL_UART_Transmit+0x4e>
 8003006:	68fb      	ldr	r3, [r7, #12]
 8003008:	691b      	ldr	r3, [r3, #16]
 800300a:	2b00      	cmp	r3, #0
 800300c:	d105      	bne.n	800301a <HAL_UART_Transmit+0x4e>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 800300e:	68bb      	ldr	r3, [r7, #8]
 8003010:	2201      	movs	r2, #1
 8003012:	4013      	ands	r3, r2
 8003014:	d001      	beq.n	800301a <HAL_UART_Transmit+0x4e>
      {
        return  HAL_ERROR;
 8003016:	2301      	movs	r3, #1
 8003018:	e078      	b.n	800310c <HAL_UART_Transmit+0x140>
      }
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800301a:	68fb      	ldr	r3, [r7, #12]
 800301c:	2290      	movs	r2, #144	@ 0x90
 800301e:	2100      	movs	r1, #0
 8003020:	5099      	str	r1, [r3, r2]
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003022:	68fb      	ldr	r3, [r7, #12]
 8003024:	2288      	movs	r2, #136	@ 0x88
 8003026:	2121      	movs	r1, #33	@ 0x21
 8003028:	5099      	str	r1, [r3, r2]

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800302a:	f7fe f88d 	bl	8001148 <HAL_GetTick>
 800302e:	0003      	movs	r3, r0
 8003030:	617b      	str	r3, [r7, #20]

    huart->TxXferSize  = Size;
 8003032:	68fb      	ldr	r3, [r7, #12]
 8003034:	1dba      	adds	r2, r7, #6
 8003036:	2154      	movs	r1, #84	@ 0x54
 8003038:	8812      	ldrh	r2, [r2, #0]
 800303a:	525a      	strh	r2, [r3, r1]
    huart->TxXferCount = Size;
 800303c:	68fb      	ldr	r3, [r7, #12]
 800303e:	1dba      	adds	r2, r7, #6
 8003040:	2156      	movs	r1, #86	@ 0x56
 8003042:	8812      	ldrh	r2, [r2, #0]
 8003044:	525a      	strh	r2, [r3, r1]

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003046:	68fb      	ldr	r3, [r7, #12]
 8003048:	689a      	ldr	r2, [r3, #8]
 800304a:	2380      	movs	r3, #128	@ 0x80
 800304c:	015b      	lsls	r3, r3, #5
 800304e:	429a      	cmp	r2, r3
 8003050:	d108      	bne.n	8003064 <HAL_UART_Transmit+0x98>
 8003052:	68fb      	ldr	r3, [r7, #12]
 8003054:	691b      	ldr	r3, [r3, #16]
 8003056:	2b00      	cmp	r3, #0
 8003058:	d104      	bne.n	8003064 <HAL_UART_Transmit+0x98>
    {
      pdata8bits  = NULL;
 800305a:	2300      	movs	r3, #0
 800305c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800305e:	68bb      	ldr	r3, [r7, #8]
 8003060:	61bb      	str	r3, [r7, #24]
 8003062:	e003      	b.n	800306c <HAL_UART_Transmit+0xa0>
    }
    else
    {
      pdata8bits  = pData;
 8003064:	68bb      	ldr	r3, [r7, #8]
 8003066:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003068:	2300      	movs	r3, #0
 800306a:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 800306c:	e030      	b.n	80030d0 <HAL_UART_Transmit+0x104>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800306e:	697a      	ldr	r2, [r7, #20]
 8003070:	68f8      	ldr	r0, [r7, #12]
 8003072:	683b      	ldr	r3, [r7, #0]
 8003074:	9300      	str	r3, [sp, #0]
 8003076:	0013      	movs	r3, r2
 8003078:	2200      	movs	r2, #0
 800307a:	2180      	movs	r1, #128	@ 0x80
 800307c:	f000 fc20 	bl	80038c0 <UART_WaitOnFlagUntilTimeout>
 8003080:	1e03      	subs	r3, r0, #0
 8003082:	d005      	beq.n	8003090 <HAL_UART_Transmit+0xc4>
      {

        huart->gState = HAL_UART_STATE_READY;
 8003084:	68fb      	ldr	r3, [r7, #12]
 8003086:	2288      	movs	r2, #136	@ 0x88
 8003088:	2120      	movs	r1, #32
 800308a:	5099      	str	r1, [r3, r2]

        return HAL_TIMEOUT;
 800308c:	2303      	movs	r3, #3
 800308e:	e03d      	b.n	800310c <HAL_UART_Transmit+0x140>
      }
      if (pdata8bits == NULL)
 8003090:	69fb      	ldr	r3, [r7, #28]
 8003092:	2b00      	cmp	r3, #0
 8003094:	d10b      	bne.n	80030ae <HAL_UART_Transmit+0xe2>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003096:	69bb      	ldr	r3, [r7, #24]
 8003098:	881b      	ldrh	r3, [r3, #0]
 800309a:	001a      	movs	r2, r3
 800309c:	68fb      	ldr	r3, [r7, #12]
 800309e:	681b      	ldr	r3, [r3, #0]
 80030a0:	05d2      	lsls	r2, r2, #23
 80030a2:	0dd2      	lsrs	r2, r2, #23
 80030a4:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 80030a6:	69bb      	ldr	r3, [r7, #24]
 80030a8:	3302      	adds	r3, #2
 80030aa:	61bb      	str	r3, [r7, #24]
 80030ac:	e007      	b.n	80030be <HAL_UART_Transmit+0xf2>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80030ae:	69fb      	ldr	r3, [r7, #28]
 80030b0:	781a      	ldrb	r2, [r3, #0]
 80030b2:	68fb      	ldr	r3, [r7, #12]
 80030b4:	681b      	ldr	r3, [r3, #0]
 80030b6:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 80030b8:	69fb      	ldr	r3, [r7, #28]
 80030ba:	3301      	adds	r3, #1
 80030bc:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80030be:	68fb      	ldr	r3, [r7, #12]
 80030c0:	2256      	movs	r2, #86	@ 0x56
 80030c2:	5a9b      	ldrh	r3, [r3, r2]
 80030c4:	b29b      	uxth	r3, r3
 80030c6:	3b01      	subs	r3, #1
 80030c8:	b299      	uxth	r1, r3
 80030ca:	68fb      	ldr	r3, [r7, #12]
 80030cc:	2256      	movs	r2, #86	@ 0x56
 80030ce:	5299      	strh	r1, [r3, r2]
    while (huart->TxXferCount > 0U)
 80030d0:	68fb      	ldr	r3, [r7, #12]
 80030d2:	2256      	movs	r2, #86	@ 0x56
 80030d4:	5a9b      	ldrh	r3, [r3, r2]
 80030d6:	b29b      	uxth	r3, r3
 80030d8:	2b00      	cmp	r3, #0
 80030da:	d1c8      	bne.n	800306e <HAL_UART_Transmit+0xa2>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80030dc:	697a      	ldr	r2, [r7, #20]
 80030de:	68f8      	ldr	r0, [r7, #12]
 80030e0:	683b      	ldr	r3, [r7, #0]
 80030e2:	9300      	str	r3, [sp, #0]
 80030e4:	0013      	movs	r3, r2
 80030e6:	2200      	movs	r2, #0
 80030e8:	2140      	movs	r1, #64	@ 0x40
 80030ea:	f000 fbe9 	bl	80038c0 <UART_WaitOnFlagUntilTimeout>
 80030ee:	1e03      	subs	r3, r0, #0
 80030f0:	d005      	beq.n	80030fe <HAL_UART_Transmit+0x132>
    {
      huart->gState = HAL_UART_STATE_READY;
 80030f2:	68fb      	ldr	r3, [r7, #12]
 80030f4:	2288      	movs	r2, #136	@ 0x88
 80030f6:	2120      	movs	r1, #32
 80030f8:	5099      	str	r1, [r3, r2]

      return HAL_TIMEOUT;
 80030fa:	2303      	movs	r3, #3
 80030fc:	e006      	b.n	800310c <HAL_UART_Transmit+0x140>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80030fe:	68fb      	ldr	r3, [r7, #12]
 8003100:	2288      	movs	r2, #136	@ 0x88
 8003102:	2120      	movs	r1, #32
 8003104:	5099      	str	r1, [r3, r2]

    return HAL_OK;
 8003106:	2300      	movs	r3, #0
 8003108:	e000      	b.n	800310c <HAL_UART_Transmit+0x140>
  }
  else
  {
    return HAL_BUSY;
 800310a:	2302      	movs	r3, #2
  }
}
 800310c:	0018      	movs	r0, r3
 800310e:	46bd      	mov	sp, r7
 8003110:	b008      	add	sp, #32
 8003112:	bd80      	pop	{r7, pc}

08003114 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003114:	b5b0      	push	{r4, r5, r7, lr}
 8003116:	b090      	sub	sp, #64	@ 0x40
 8003118:	af00      	add	r7, sp, #0
 800311a:	6278      	str	r0, [r7, #36]	@ 0x24
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800311c:	231a      	movs	r3, #26
 800311e:	2220      	movs	r2, #32
 8003120:	189b      	adds	r3, r3, r2
 8003122:	19db      	adds	r3, r3, r7
 8003124:	2200      	movs	r2, #0
 8003126:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8003128:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800312a:	689a      	ldr	r2, [r3, #8]
 800312c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800312e:	691b      	ldr	r3, [r3, #16]
 8003130:	431a      	orrs	r2, r3
 8003132:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003134:	695b      	ldr	r3, [r3, #20]
 8003136:	431a      	orrs	r2, r3
 8003138:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800313a:	69db      	ldr	r3, [r3, #28]
 800313c:	4313      	orrs	r3, r2
 800313e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8003140:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003142:	681b      	ldr	r3, [r3, #0]
 8003144:	681b      	ldr	r3, [r3, #0]
 8003146:	4ac4      	ldr	r2, [pc, #784]	@ (8003458 <UART_SetConfig+0x344>)
 8003148:	4013      	ands	r3, r2
 800314a:	0019      	movs	r1, r3
 800314c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800314e:	681a      	ldr	r2, [r3, #0]
 8003150:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003152:	430b      	orrs	r3, r1
 8003154:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003156:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003158:	681b      	ldr	r3, [r3, #0]
 800315a:	685b      	ldr	r3, [r3, #4]
 800315c:	4abf      	ldr	r2, [pc, #764]	@ (800345c <UART_SetConfig+0x348>)
 800315e:	4013      	ands	r3, r2
 8003160:	0018      	movs	r0, r3
 8003162:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003164:	68d9      	ldr	r1, [r3, #12]
 8003166:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003168:	681a      	ldr	r2, [r3, #0]
 800316a:	0003      	movs	r3, r0
 800316c:	430b      	orrs	r3, r1
 800316e:	6053      	str	r3, [r2, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8003170:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003172:	699b      	ldr	r3, [r3, #24]
 8003174:	63fb      	str	r3, [r7, #60]	@ 0x3c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8003176:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003178:	681b      	ldr	r3, [r3, #0]
 800317a:	4ab9      	ldr	r2, [pc, #740]	@ (8003460 <UART_SetConfig+0x34c>)
 800317c:	4293      	cmp	r3, r2
 800317e:	d004      	beq.n	800318a <UART_SetConfig+0x76>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8003180:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003182:	6a1b      	ldr	r3, [r3, #32]
 8003184:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8003186:	4313      	orrs	r3, r2
 8003188:	63fb      	str	r3, [r7, #60]	@ 0x3c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800318a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800318c:	681b      	ldr	r3, [r3, #0]
 800318e:	689b      	ldr	r3, [r3, #8]
 8003190:	4ab4      	ldr	r2, [pc, #720]	@ (8003464 <UART_SetConfig+0x350>)
 8003192:	4013      	ands	r3, r2
 8003194:	0019      	movs	r1, r3
 8003196:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003198:	681a      	ldr	r2, [r3, #0]
 800319a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800319c:	430b      	orrs	r3, r1
 800319e:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 80031a0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80031a2:	681b      	ldr	r3, [r3, #0]
 80031a4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80031a6:	220f      	movs	r2, #15
 80031a8:	4393      	bics	r3, r2
 80031aa:	0018      	movs	r0, r3
 80031ac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80031ae:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 80031b0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80031b2:	681a      	ldr	r2, [r3, #0]
 80031b4:	0003      	movs	r3, r0
 80031b6:	430b      	orrs	r3, r1
 80031b8:	62d3      	str	r3, [r2, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80031ba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80031bc:	681b      	ldr	r3, [r3, #0]
 80031be:	4aaa      	ldr	r2, [pc, #680]	@ (8003468 <UART_SetConfig+0x354>)
 80031c0:	4293      	cmp	r3, r2
 80031c2:	d131      	bne.n	8003228 <UART_SetConfig+0x114>
 80031c4:	4ba9      	ldr	r3, [pc, #676]	@ (800346c <UART_SetConfig+0x358>)
 80031c6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80031c8:	2203      	movs	r2, #3
 80031ca:	4013      	ands	r3, r2
 80031cc:	2b03      	cmp	r3, #3
 80031ce:	d01d      	beq.n	800320c <UART_SetConfig+0xf8>
 80031d0:	d823      	bhi.n	800321a <UART_SetConfig+0x106>
 80031d2:	2b02      	cmp	r3, #2
 80031d4:	d00c      	beq.n	80031f0 <UART_SetConfig+0xdc>
 80031d6:	d820      	bhi.n	800321a <UART_SetConfig+0x106>
 80031d8:	2b00      	cmp	r3, #0
 80031da:	d002      	beq.n	80031e2 <UART_SetConfig+0xce>
 80031dc:	2b01      	cmp	r3, #1
 80031de:	d00e      	beq.n	80031fe <UART_SetConfig+0xea>
 80031e0:	e01b      	b.n	800321a <UART_SetConfig+0x106>
 80031e2:	231b      	movs	r3, #27
 80031e4:	2220      	movs	r2, #32
 80031e6:	189b      	adds	r3, r3, r2
 80031e8:	19db      	adds	r3, r3, r7
 80031ea:	2200      	movs	r2, #0
 80031ec:	701a      	strb	r2, [r3, #0]
 80031ee:	e071      	b.n	80032d4 <UART_SetConfig+0x1c0>
 80031f0:	231b      	movs	r3, #27
 80031f2:	2220      	movs	r2, #32
 80031f4:	189b      	adds	r3, r3, r2
 80031f6:	19db      	adds	r3, r3, r7
 80031f8:	2202      	movs	r2, #2
 80031fa:	701a      	strb	r2, [r3, #0]
 80031fc:	e06a      	b.n	80032d4 <UART_SetConfig+0x1c0>
 80031fe:	231b      	movs	r3, #27
 8003200:	2220      	movs	r2, #32
 8003202:	189b      	adds	r3, r3, r2
 8003204:	19db      	adds	r3, r3, r7
 8003206:	2204      	movs	r2, #4
 8003208:	701a      	strb	r2, [r3, #0]
 800320a:	e063      	b.n	80032d4 <UART_SetConfig+0x1c0>
 800320c:	231b      	movs	r3, #27
 800320e:	2220      	movs	r2, #32
 8003210:	189b      	adds	r3, r3, r2
 8003212:	19db      	adds	r3, r3, r7
 8003214:	2208      	movs	r2, #8
 8003216:	701a      	strb	r2, [r3, #0]
 8003218:	e05c      	b.n	80032d4 <UART_SetConfig+0x1c0>
 800321a:	231b      	movs	r3, #27
 800321c:	2220      	movs	r2, #32
 800321e:	189b      	adds	r3, r3, r2
 8003220:	19db      	adds	r3, r3, r7
 8003222:	2210      	movs	r2, #16
 8003224:	701a      	strb	r2, [r3, #0]
 8003226:	e055      	b.n	80032d4 <UART_SetConfig+0x1c0>
 8003228:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800322a:	681b      	ldr	r3, [r3, #0]
 800322c:	4a90      	ldr	r2, [pc, #576]	@ (8003470 <UART_SetConfig+0x35c>)
 800322e:	4293      	cmp	r3, r2
 8003230:	d106      	bne.n	8003240 <UART_SetConfig+0x12c>
 8003232:	231b      	movs	r3, #27
 8003234:	2220      	movs	r2, #32
 8003236:	189b      	adds	r3, r3, r2
 8003238:	19db      	adds	r3, r3, r7
 800323a:	2200      	movs	r2, #0
 800323c:	701a      	strb	r2, [r3, #0]
 800323e:	e049      	b.n	80032d4 <UART_SetConfig+0x1c0>
 8003240:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003242:	681b      	ldr	r3, [r3, #0]
 8003244:	4a86      	ldr	r2, [pc, #536]	@ (8003460 <UART_SetConfig+0x34c>)
 8003246:	4293      	cmp	r3, r2
 8003248:	d13e      	bne.n	80032c8 <UART_SetConfig+0x1b4>
 800324a:	4b88      	ldr	r3, [pc, #544]	@ (800346c <UART_SetConfig+0x358>)
 800324c:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800324e:	23c0      	movs	r3, #192	@ 0xc0
 8003250:	011b      	lsls	r3, r3, #4
 8003252:	4013      	ands	r3, r2
 8003254:	22c0      	movs	r2, #192	@ 0xc0
 8003256:	0112      	lsls	r2, r2, #4
 8003258:	4293      	cmp	r3, r2
 800325a:	d027      	beq.n	80032ac <UART_SetConfig+0x198>
 800325c:	22c0      	movs	r2, #192	@ 0xc0
 800325e:	0112      	lsls	r2, r2, #4
 8003260:	4293      	cmp	r3, r2
 8003262:	d82a      	bhi.n	80032ba <UART_SetConfig+0x1a6>
 8003264:	2280      	movs	r2, #128	@ 0x80
 8003266:	0112      	lsls	r2, r2, #4
 8003268:	4293      	cmp	r3, r2
 800326a:	d011      	beq.n	8003290 <UART_SetConfig+0x17c>
 800326c:	2280      	movs	r2, #128	@ 0x80
 800326e:	0112      	lsls	r2, r2, #4
 8003270:	4293      	cmp	r3, r2
 8003272:	d822      	bhi.n	80032ba <UART_SetConfig+0x1a6>
 8003274:	2b00      	cmp	r3, #0
 8003276:	d004      	beq.n	8003282 <UART_SetConfig+0x16e>
 8003278:	2280      	movs	r2, #128	@ 0x80
 800327a:	00d2      	lsls	r2, r2, #3
 800327c:	4293      	cmp	r3, r2
 800327e:	d00e      	beq.n	800329e <UART_SetConfig+0x18a>
 8003280:	e01b      	b.n	80032ba <UART_SetConfig+0x1a6>
 8003282:	231b      	movs	r3, #27
 8003284:	2220      	movs	r2, #32
 8003286:	189b      	adds	r3, r3, r2
 8003288:	19db      	adds	r3, r3, r7
 800328a:	2200      	movs	r2, #0
 800328c:	701a      	strb	r2, [r3, #0]
 800328e:	e021      	b.n	80032d4 <UART_SetConfig+0x1c0>
 8003290:	231b      	movs	r3, #27
 8003292:	2220      	movs	r2, #32
 8003294:	189b      	adds	r3, r3, r2
 8003296:	19db      	adds	r3, r3, r7
 8003298:	2202      	movs	r2, #2
 800329a:	701a      	strb	r2, [r3, #0]
 800329c:	e01a      	b.n	80032d4 <UART_SetConfig+0x1c0>
 800329e:	231b      	movs	r3, #27
 80032a0:	2220      	movs	r2, #32
 80032a2:	189b      	adds	r3, r3, r2
 80032a4:	19db      	adds	r3, r3, r7
 80032a6:	2204      	movs	r2, #4
 80032a8:	701a      	strb	r2, [r3, #0]
 80032aa:	e013      	b.n	80032d4 <UART_SetConfig+0x1c0>
 80032ac:	231b      	movs	r3, #27
 80032ae:	2220      	movs	r2, #32
 80032b0:	189b      	adds	r3, r3, r2
 80032b2:	19db      	adds	r3, r3, r7
 80032b4:	2208      	movs	r2, #8
 80032b6:	701a      	strb	r2, [r3, #0]
 80032b8:	e00c      	b.n	80032d4 <UART_SetConfig+0x1c0>
 80032ba:	231b      	movs	r3, #27
 80032bc:	2220      	movs	r2, #32
 80032be:	189b      	adds	r3, r3, r2
 80032c0:	19db      	adds	r3, r3, r7
 80032c2:	2210      	movs	r2, #16
 80032c4:	701a      	strb	r2, [r3, #0]
 80032c6:	e005      	b.n	80032d4 <UART_SetConfig+0x1c0>
 80032c8:	231b      	movs	r3, #27
 80032ca:	2220      	movs	r2, #32
 80032cc:	189b      	adds	r3, r3, r2
 80032ce:	19db      	adds	r3, r3, r7
 80032d0:	2210      	movs	r2, #16
 80032d2:	701a      	strb	r2, [r3, #0]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80032d4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80032d6:	681b      	ldr	r3, [r3, #0]
 80032d8:	4a61      	ldr	r2, [pc, #388]	@ (8003460 <UART_SetConfig+0x34c>)
 80032da:	4293      	cmp	r3, r2
 80032dc:	d000      	beq.n	80032e0 <UART_SetConfig+0x1cc>
 80032de:	e092      	b.n	8003406 <UART_SetConfig+0x2f2>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80032e0:	231b      	movs	r3, #27
 80032e2:	2220      	movs	r2, #32
 80032e4:	189b      	adds	r3, r3, r2
 80032e6:	19db      	adds	r3, r3, r7
 80032e8:	781b      	ldrb	r3, [r3, #0]
 80032ea:	2b08      	cmp	r3, #8
 80032ec:	d015      	beq.n	800331a <UART_SetConfig+0x206>
 80032ee:	dc18      	bgt.n	8003322 <UART_SetConfig+0x20e>
 80032f0:	2b04      	cmp	r3, #4
 80032f2:	d00d      	beq.n	8003310 <UART_SetConfig+0x1fc>
 80032f4:	dc15      	bgt.n	8003322 <UART_SetConfig+0x20e>
 80032f6:	2b00      	cmp	r3, #0
 80032f8:	d002      	beq.n	8003300 <UART_SetConfig+0x1ec>
 80032fa:	2b02      	cmp	r3, #2
 80032fc:	d005      	beq.n	800330a <UART_SetConfig+0x1f6>
 80032fe:	e010      	b.n	8003322 <UART_SetConfig+0x20e>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003300:	f7ff fdf8 	bl	8002ef4 <HAL_RCC_GetPCLK1Freq>
 8003304:	0003      	movs	r3, r0
 8003306:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8003308:	e014      	b.n	8003334 <UART_SetConfig+0x220>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800330a:	4b5a      	ldr	r3, [pc, #360]	@ (8003474 <UART_SetConfig+0x360>)
 800330c:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800330e:	e011      	b.n	8003334 <UART_SetConfig+0x220>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003310:	f7ff fd64 	bl	8002ddc <HAL_RCC_GetSysClockFreq>
 8003314:	0003      	movs	r3, r0
 8003316:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8003318:	e00c      	b.n	8003334 <UART_SetConfig+0x220>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800331a:	2380      	movs	r3, #128	@ 0x80
 800331c:	021b      	lsls	r3, r3, #8
 800331e:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8003320:	e008      	b.n	8003334 <UART_SetConfig+0x220>
      default:
        pclk = 0U;
 8003322:	2300      	movs	r3, #0
 8003324:	637b      	str	r3, [r7, #52]	@ 0x34
        ret = HAL_ERROR;
 8003326:	231a      	movs	r3, #26
 8003328:	2220      	movs	r2, #32
 800332a:	189b      	adds	r3, r3, r2
 800332c:	19db      	adds	r3, r3, r7
 800332e:	2201      	movs	r2, #1
 8003330:	701a      	strb	r2, [r3, #0]
        break;
 8003332:	46c0      	nop			@ (mov r8, r8)
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8003334:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003336:	2b00      	cmp	r3, #0
 8003338:	d100      	bne.n	800333c <UART_SetConfig+0x228>
 800333a:	e147      	b.n	80035cc <UART_SetConfig+0x4b8>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800333c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800333e:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8003340:	4b4d      	ldr	r3, [pc, #308]	@ (8003478 <UART_SetConfig+0x364>)
 8003342:	0052      	lsls	r2, r2, #1
 8003344:	5ad3      	ldrh	r3, [r2, r3]
 8003346:	0019      	movs	r1, r3
 8003348:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 800334a:	f7fc fee5 	bl	8000118 <__udivsi3>
 800334e:	0003      	movs	r3, r0
 8003350:	62bb      	str	r3, [r7, #40]	@ 0x28

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8003352:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003354:	685a      	ldr	r2, [r3, #4]
 8003356:	0013      	movs	r3, r2
 8003358:	005b      	lsls	r3, r3, #1
 800335a:	189b      	adds	r3, r3, r2
 800335c:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800335e:	429a      	cmp	r2, r3
 8003360:	d305      	bcc.n	800336e <UART_SetConfig+0x25a>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8003362:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003364:	685b      	ldr	r3, [r3, #4]
 8003366:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8003368:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800336a:	429a      	cmp	r2, r3
 800336c:	d906      	bls.n	800337c <UART_SetConfig+0x268>
      {
        ret = HAL_ERROR;
 800336e:	231a      	movs	r3, #26
 8003370:	2220      	movs	r2, #32
 8003372:	189b      	adds	r3, r3, r2
 8003374:	19db      	adds	r3, r3, r7
 8003376:	2201      	movs	r2, #1
 8003378:	701a      	strb	r2, [r3, #0]
 800337a:	e127      	b.n	80035cc <UART_SetConfig+0x4b8>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800337c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800337e:	61bb      	str	r3, [r7, #24]
 8003380:	2300      	movs	r3, #0
 8003382:	61fb      	str	r3, [r7, #28]
 8003384:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003386:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8003388:	4b3b      	ldr	r3, [pc, #236]	@ (8003478 <UART_SetConfig+0x364>)
 800338a:	0052      	lsls	r2, r2, #1
 800338c:	5ad3      	ldrh	r3, [r2, r3]
 800338e:	613b      	str	r3, [r7, #16]
 8003390:	2300      	movs	r3, #0
 8003392:	617b      	str	r3, [r7, #20]
 8003394:	693a      	ldr	r2, [r7, #16]
 8003396:	697b      	ldr	r3, [r7, #20]
 8003398:	69b8      	ldr	r0, [r7, #24]
 800339a:	69f9      	ldr	r1, [r7, #28]
 800339c:	f7fc ff48 	bl	8000230 <__aeabi_uldivmod>
 80033a0:	0002      	movs	r2, r0
 80033a2:	000b      	movs	r3, r1
 80033a4:	0e11      	lsrs	r1, r2, #24
 80033a6:	021d      	lsls	r5, r3, #8
 80033a8:	430d      	orrs	r5, r1
 80033aa:	0214      	lsls	r4, r2, #8
 80033ac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80033ae:	685b      	ldr	r3, [r3, #4]
 80033b0:	085b      	lsrs	r3, r3, #1
 80033b2:	60bb      	str	r3, [r7, #8]
 80033b4:	2300      	movs	r3, #0
 80033b6:	60fb      	str	r3, [r7, #12]
 80033b8:	68b8      	ldr	r0, [r7, #8]
 80033ba:	68f9      	ldr	r1, [r7, #12]
 80033bc:	1900      	adds	r0, r0, r4
 80033be:	4169      	adcs	r1, r5
 80033c0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80033c2:	685b      	ldr	r3, [r3, #4]
 80033c4:	603b      	str	r3, [r7, #0]
 80033c6:	2300      	movs	r3, #0
 80033c8:	607b      	str	r3, [r7, #4]
 80033ca:	683a      	ldr	r2, [r7, #0]
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	f7fc ff2f 	bl	8000230 <__aeabi_uldivmod>
 80033d2:	0002      	movs	r2, r0
 80033d4:	000b      	movs	r3, r1
 80033d6:	0013      	movs	r3, r2
 80033d8:	633b      	str	r3, [r7, #48]	@ 0x30
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80033da:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80033dc:	23c0      	movs	r3, #192	@ 0xc0
 80033de:	009b      	lsls	r3, r3, #2
 80033e0:	429a      	cmp	r2, r3
 80033e2:	d309      	bcc.n	80033f8 <UART_SetConfig+0x2e4>
 80033e4:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80033e6:	2380      	movs	r3, #128	@ 0x80
 80033e8:	035b      	lsls	r3, r3, #13
 80033ea:	429a      	cmp	r2, r3
 80033ec:	d204      	bcs.n	80033f8 <UART_SetConfig+0x2e4>
        {
          huart->Instance->BRR = usartdiv;
 80033ee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80033f0:	681b      	ldr	r3, [r3, #0]
 80033f2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80033f4:	60da      	str	r2, [r3, #12]
 80033f6:	e0e9      	b.n	80035cc <UART_SetConfig+0x4b8>
        }
        else
        {
          ret = HAL_ERROR;
 80033f8:	231a      	movs	r3, #26
 80033fa:	2220      	movs	r2, #32
 80033fc:	189b      	adds	r3, r3, r2
 80033fe:	19db      	adds	r3, r3, r7
 8003400:	2201      	movs	r2, #1
 8003402:	701a      	strb	r2, [r3, #0]
 8003404:	e0e2      	b.n	80035cc <UART_SetConfig+0x4b8>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003406:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003408:	69da      	ldr	r2, [r3, #28]
 800340a:	2380      	movs	r3, #128	@ 0x80
 800340c:	021b      	lsls	r3, r3, #8
 800340e:	429a      	cmp	r2, r3
 8003410:	d000      	beq.n	8003414 <UART_SetConfig+0x300>
 8003412:	e083      	b.n	800351c <UART_SetConfig+0x408>
  {
    switch (clocksource)
 8003414:	231b      	movs	r3, #27
 8003416:	2220      	movs	r2, #32
 8003418:	189b      	adds	r3, r3, r2
 800341a:	19db      	adds	r3, r3, r7
 800341c:	781b      	ldrb	r3, [r3, #0]
 800341e:	2b08      	cmp	r3, #8
 8003420:	d015      	beq.n	800344e <UART_SetConfig+0x33a>
 8003422:	dc2b      	bgt.n	800347c <UART_SetConfig+0x368>
 8003424:	2b04      	cmp	r3, #4
 8003426:	d00d      	beq.n	8003444 <UART_SetConfig+0x330>
 8003428:	dc28      	bgt.n	800347c <UART_SetConfig+0x368>
 800342a:	2b00      	cmp	r3, #0
 800342c:	d002      	beq.n	8003434 <UART_SetConfig+0x320>
 800342e:	2b02      	cmp	r3, #2
 8003430:	d005      	beq.n	800343e <UART_SetConfig+0x32a>
 8003432:	e023      	b.n	800347c <UART_SetConfig+0x368>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003434:	f7ff fd5e 	bl	8002ef4 <HAL_RCC_GetPCLK1Freq>
 8003438:	0003      	movs	r3, r0
 800343a:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800343c:	e027      	b.n	800348e <UART_SetConfig+0x37a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800343e:	4b0d      	ldr	r3, [pc, #52]	@ (8003474 <UART_SetConfig+0x360>)
 8003440:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8003442:	e024      	b.n	800348e <UART_SetConfig+0x37a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003444:	f7ff fcca 	bl	8002ddc <HAL_RCC_GetSysClockFreq>
 8003448:	0003      	movs	r3, r0
 800344a:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800344c:	e01f      	b.n	800348e <UART_SetConfig+0x37a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800344e:	2380      	movs	r3, #128	@ 0x80
 8003450:	021b      	lsls	r3, r3, #8
 8003452:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8003454:	e01b      	b.n	800348e <UART_SetConfig+0x37a>
 8003456:	46c0      	nop			@ (mov r8, r8)
 8003458:	cfff69f3 	.word	0xcfff69f3
 800345c:	ffffcfff 	.word	0xffffcfff
 8003460:	40008000 	.word	0x40008000
 8003464:	11fff4ff 	.word	0x11fff4ff
 8003468:	40013800 	.word	0x40013800
 800346c:	40021000 	.word	0x40021000
 8003470:	40004400 	.word	0x40004400
 8003474:	00f42400 	.word	0x00f42400
 8003478:	080044e8 	.word	0x080044e8
      default:
        pclk = 0U;
 800347c:	2300      	movs	r3, #0
 800347e:	637b      	str	r3, [r7, #52]	@ 0x34
        ret = HAL_ERROR;
 8003480:	231a      	movs	r3, #26
 8003482:	2220      	movs	r2, #32
 8003484:	189b      	adds	r3, r3, r2
 8003486:	19db      	adds	r3, r3, r7
 8003488:	2201      	movs	r2, #1
 800348a:	701a      	strb	r2, [r3, #0]
        break;
 800348c:	46c0      	nop			@ (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800348e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003490:	2b00      	cmp	r3, #0
 8003492:	d100      	bne.n	8003496 <UART_SetConfig+0x382>
 8003494:	e09a      	b.n	80035cc <UART_SetConfig+0x4b8>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8003496:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003498:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800349a:	4b58      	ldr	r3, [pc, #352]	@ (80035fc <UART_SetConfig+0x4e8>)
 800349c:	0052      	lsls	r2, r2, #1
 800349e:	5ad3      	ldrh	r3, [r2, r3]
 80034a0:	0019      	movs	r1, r3
 80034a2:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 80034a4:	f7fc fe38 	bl	8000118 <__udivsi3>
 80034a8:	0003      	movs	r3, r0
 80034aa:	005a      	lsls	r2, r3, #1
 80034ac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80034ae:	685b      	ldr	r3, [r3, #4]
 80034b0:	085b      	lsrs	r3, r3, #1
 80034b2:	18d2      	adds	r2, r2, r3
 80034b4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80034b6:	685b      	ldr	r3, [r3, #4]
 80034b8:	0019      	movs	r1, r3
 80034ba:	0010      	movs	r0, r2
 80034bc:	f7fc fe2c 	bl	8000118 <__udivsi3>
 80034c0:	0003      	movs	r3, r0
 80034c2:	633b      	str	r3, [r7, #48]	@ 0x30
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80034c4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80034c6:	2b0f      	cmp	r3, #15
 80034c8:	d921      	bls.n	800350e <UART_SetConfig+0x3fa>
 80034ca:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80034cc:	2380      	movs	r3, #128	@ 0x80
 80034ce:	025b      	lsls	r3, r3, #9
 80034d0:	429a      	cmp	r2, r3
 80034d2:	d21c      	bcs.n	800350e <UART_SetConfig+0x3fa>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80034d4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80034d6:	b29a      	uxth	r2, r3
 80034d8:	200e      	movs	r0, #14
 80034da:	2420      	movs	r4, #32
 80034dc:	1903      	adds	r3, r0, r4
 80034de:	19db      	adds	r3, r3, r7
 80034e0:	210f      	movs	r1, #15
 80034e2:	438a      	bics	r2, r1
 80034e4:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80034e6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80034e8:	085b      	lsrs	r3, r3, #1
 80034ea:	b29b      	uxth	r3, r3
 80034ec:	2207      	movs	r2, #7
 80034ee:	4013      	ands	r3, r2
 80034f0:	b299      	uxth	r1, r3
 80034f2:	1903      	adds	r3, r0, r4
 80034f4:	19db      	adds	r3, r3, r7
 80034f6:	1902      	adds	r2, r0, r4
 80034f8:	19d2      	adds	r2, r2, r7
 80034fa:	8812      	ldrh	r2, [r2, #0]
 80034fc:	430a      	orrs	r2, r1
 80034fe:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 8003500:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003502:	681b      	ldr	r3, [r3, #0]
 8003504:	1902      	adds	r2, r0, r4
 8003506:	19d2      	adds	r2, r2, r7
 8003508:	8812      	ldrh	r2, [r2, #0]
 800350a:	60da      	str	r2, [r3, #12]
 800350c:	e05e      	b.n	80035cc <UART_SetConfig+0x4b8>
      }
      else
      {
        ret = HAL_ERROR;
 800350e:	231a      	movs	r3, #26
 8003510:	2220      	movs	r2, #32
 8003512:	189b      	adds	r3, r3, r2
 8003514:	19db      	adds	r3, r3, r7
 8003516:	2201      	movs	r2, #1
 8003518:	701a      	strb	r2, [r3, #0]
 800351a:	e057      	b.n	80035cc <UART_SetConfig+0x4b8>
      }
    }
  }
  else
  {
    switch (clocksource)
 800351c:	231b      	movs	r3, #27
 800351e:	2220      	movs	r2, #32
 8003520:	189b      	adds	r3, r3, r2
 8003522:	19db      	adds	r3, r3, r7
 8003524:	781b      	ldrb	r3, [r3, #0]
 8003526:	2b08      	cmp	r3, #8
 8003528:	d015      	beq.n	8003556 <UART_SetConfig+0x442>
 800352a:	dc18      	bgt.n	800355e <UART_SetConfig+0x44a>
 800352c:	2b04      	cmp	r3, #4
 800352e:	d00d      	beq.n	800354c <UART_SetConfig+0x438>
 8003530:	dc15      	bgt.n	800355e <UART_SetConfig+0x44a>
 8003532:	2b00      	cmp	r3, #0
 8003534:	d002      	beq.n	800353c <UART_SetConfig+0x428>
 8003536:	2b02      	cmp	r3, #2
 8003538:	d005      	beq.n	8003546 <UART_SetConfig+0x432>
 800353a:	e010      	b.n	800355e <UART_SetConfig+0x44a>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800353c:	f7ff fcda 	bl	8002ef4 <HAL_RCC_GetPCLK1Freq>
 8003540:	0003      	movs	r3, r0
 8003542:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8003544:	e014      	b.n	8003570 <UART_SetConfig+0x45c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003546:	4b2e      	ldr	r3, [pc, #184]	@ (8003600 <UART_SetConfig+0x4ec>)
 8003548:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800354a:	e011      	b.n	8003570 <UART_SetConfig+0x45c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800354c:	f7ff fc46 	bl	8002ddc <HAL_RCC_GetSysClockFreq>
 8003550:	0003      	movs	r3, r0
 8003552:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8003554:	e00c      	b.n	8003570 <UART_SetConfig+0x45c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003556:	2380      	movs	r3, #128	@ 0x80
 8003558:	021b      	lsls	r3, r3, #8
 800355a:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800355c:	e008      	b.n	8003570 <UART_SetConfig+0x45c>
      default:
        pclk = 0U;
 800355e:	2300      	movs	r3, #0
 8003560:	637b      	str	r3, [r7, #52]	@ 0x34
        ret = HAL_ERROR;
 8003562:	231a      	movs	r3, #26
 8003564:	2220      	movs	r2, #32
 8003566:	189b      	adds	r3, r3, r2
 8003568:	19db      	adds	r3, r3, r7
 800356a:	2201      	movs	r2, #1
 800356c:	701a      	strb	r2, [r3, #0]
        break;
 800356e:	46c0      	nop			@ (mov r8, r8)
    }

    if (pclk != 0U)
 8003570:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003572:	2b00      	cmp	r3, #0
 8003574:	d02a      	beq.n	80035cc <UART_SetConfig+0x4b8>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8003576:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003578:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800357a:	4b20      	ldr	r3, [pc, #128]	@ (80035fc <UART_SetConfig+0x4e8>)
 800357c:	0052      	lsls	r2, r2, #1
 800357e:	5ad3      	ldrh	r3, [r2, r3]
 8003580:	0019      	movs	r1, r3
 8003582:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 8003584:	f7fc fdc8 	bl	8000118 <__udivsi3>
 8003588:	0003      	movs	r3, r0
 800358a:	001a      	movs	r2, r3
 800358c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800358e:	685b      	ldr	r3, [r3, #4]
 8003590:	085b      	lsrs	r3, r3, #1
 8003592:	18d2      	adds	r2, r2, r3
 8003594:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003596:	685b      	ldr	r3, [r3, #4]
 8003598:	0019      	movs	r1, r3
 800359a:	0010      	movs	r0, r2
 800359c:	f7fc fdbc 	bl	8000118 <__udivsi3>
 80035a0:	0003      	movs	r3, r0
 80035a2:	633b      	str	r3, [r7, #48]	@ 0x30
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80035a4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80035a6:	2b0f      	cmp	r3, #15
 80035a8:	d90a      	bls.n	80035c0 <UART_SetConfig+0x4ac>
 80035aa:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80035ac:	2380      	movs	r3, #128	@ 0x80
 80035ae:	025b      	lsls	r3, r3, #9
 80035b0:	429a      	cmp	r2, r3
 80035b2:	d205      	bcs.n	80035c0 <UART_SetConfig+0x4ac>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80035b4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80035b6:	b29a      	uxth	r2, r3
 80035b8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80035ba:	681b      	ldr	r3, [r3, #0]
 80035bc:	60da      	str	r2, [r3, #12]
 80035be:	e005      	b.n	80035cc <UART_SetConfig+0x4b8>
      }
      else
      {
        ret = HAL_ERROR;
 80035c0:	231a      	movs	r3, #26
 80035c2:	2220      	movs	r2, #32
 80035c4:	189b      	adds	r3, r3, r2
 80035c6:	19db      	adds	r3, r3, r7
 80035c8:	2201      	movs	r2, #1
 80035ca:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 80035cc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80035ce:	226a      	movs	r2, #106	@ 0x6a
 80035d0:	2101      	movs	r1, #1
 80035d2:	5299      	strh	r1, [r3, r2]
  huart->NbRxDataToProcess = 1;
 80035d4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80035d6:	2268      	movs	r2, #104	@ 0x68
 80035d8:	2101      	movs	r1, #1
 80035da:	5299      	strh	r1, [r3, r2]

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80035dc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80035de:	2200      	movs	r2, #0
 80035e0:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 80035e2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80035e4:	2200      	movs	r2, #0
 80035e6:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 80035e8:	231a      	movs	r3, #26
 80035ea:	2220      	movs	r2, #32
 80035ec:	189b      	adds	r3, r3, r2
 80035ee:	19db      	adds	r3, r3, r7
 80035f0:	781b      	ldrb	r3, [r3, #0]
}
 80035f2:	0018      	movs	r0, r3
 80035f4:	46bd      	mov	sp, r7
 80035f6:	b010      	add	sp, #64	@ 0x40
 80035f8:	bdb0      	pop	{r4, r5, r7, pc}
 80035fa:	46c0      	nop			@ (mov r8, r8)
 80035fc:	080044e8 	.word	0x080044e8
 8003600:	00f42400 	.word	0x00f42400

08003604 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8003604:	b580      	push	{r7, lr}
 8003606:	b082      	sub	sp, #8
 8003608:	af00      	add	r7, sp, #0
 800360a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003610:	2208      	movs	r2, #8
 8003612:	4013      	ands	r3, r2
 8003614:	d00b      	beq.n	800362e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	681b      	ldr	r3, [r3, #0]
 800361a:	685b      	ldr	r3, [r3, #4]
 800361c:	4a4a      	ldr	r2, [pc, #296]	@ (8003748 <UART_AdvFeatureConfig+0x144>)
 800361e:	4013      	ands	r3, r2
 8003620:	0019      	movs	r1, r3
 8003622:	687b      	ldr	r3, [r7, #4]
 8003624:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	681b      	ldr	r3, [r3, #0]
 800362a:	430a      	orrs	r2, r1
 800362c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003632:	2201      	movs	r2, #1
 8003634:	4013      	ands	r3, r2
 8003636:	d00b      	beq.n	8003650 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	681b      	ldr	r3, [r3, #0]
 800363c:	685b      	ldr	r3, [r3, #4]
 800363e:	4a43      	ldr	r2, [pc, #268]	@ (800374c <UART_AdvFeatureConfig+0x148>)
 8003640:	4013      	ands	r3, r2
 8003642:	0019      	movs	r1, r3
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	681b      	ldr	r3, [r3, #0]
 800364c:	430a      	orrs	r2, r1
 800364e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003654:	2202      	movs	r2, #2
 8003656:	4013      	ands	r3, r2
 8003658:	d00b      	beq.n	8003672 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	681b      	ldr	r3, [r3, #0]
 800365e:	685b      	ldr	r3, [r3, #4]
 8003660:	4a3b      	ldr	r2, [pc, #236]	@ (8003750 <UART_AdvFeatureConfig+0x14c>)
 8003662:	4013      	ands	r3, r2
 8003664:	0019      	movs	r1, r3
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800366a:	687b      	ldr	r3, [r7, #4]
 800366c:	681b      	ldr	r3, [r3, #0]
 800366e:	430a      	orrs	r2, r1
 8003670:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003676:	2204      	movs	r2, #4
 8003678:	4013      	ands	r3, r2
 800367a:	d00b      	beq.n	8003694 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	681b      	ldr	r3, [r3, #0]
 8003680:	685b      	ldr	r3, [r3, #4]
 8003682:	4a34      	ldr	r2, [pc, #208]	@ (8003754 <UART_AdvFeatureConfig+0x150>)
 8003684:	4013      	ands	r3, r2
 8003686:	0019      	movs	r1, r3
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	681b      	ldr	r3, [r3, #0]
 8003690:	430a      	orrs	r2, r1
 8003692:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003698:	2210      	movs	r2, #16
 800369a:	4013      	ands	r3, r2
 800369c:	d00b      	beq.n	80036b6 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	681b      	ldr	r3, [r3, #0]
 80036a2:	689b      	ldr	r3, [r3, #8]
 80036a4:	4a2c      	ldr	r2, [pc, #176]	@ (8003758 <UART_AdvFeatureConfig+0x154>)
 80036a6:	4013      	ands	r3, r2
 80036a8:	0019      	movs	r1, r3
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	681b      	ldr	r3, [r3, #0]
 80036b2:	430a      	orrs	r2, r1
 80036b4:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80036ba:	2220      	movs	r2, #32
 80036bc:	4013      	ands	r3, r2
 80036be:	d00b      	beq.n	80036d8 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	681b      	ldr	r3, [r3, #0]
 80036c4:	689b      	ldr	r3, [r3, #8]
 80036c6:	4a25      	ldr	r2, [pc, #148]	@ (800375c <UART_AdvFeatureConfig+0x158>)
 80036c8:	4013      	ands	r3, r2
 80036ca:	0019      	movs	r1, r3
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	681b      	ldr	r3, [r3, #0]
 80036d4:	430a      	orrs	r2, r1
 80036d6:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80036dc:	2240      	movs	r2, #64	@ 0x40
 80036de:	4013      	ands	r3, r2
 80036e0:	d01d      	beq.n	800371e <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	681b      	ldr	r3, [r3, #0]
 80036e6:	685b      	ldr	r3, [r3, #4]
 80036e8:	4a1d      	ldr	r2, [pc, #116]	@ (8003760 <UART_AdvFeatureConfig+0x15c>)
 80036ea:	4013      	ands	r3, r2
 80036ec:	0019      	movs	r1, r3
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	681b      	ldr	r3, [r3, #0]
 80036f6:	430a      	orrs	r2, r1
 80036f8:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80036fe:	2380      	movs	r3, #128	@ 0x80
 8003700:	035b      	lsls	r3, r3, #13
 8003702:	429a      	cmp	r2, r3
 8003704:	d10b      	bne.n	800371e <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	681b      	ldr	r3, [r3, #0]
 800370a:	685b      	ldr	r3, [r3, #4]
 800370c:	4a15      	ldr	r2, [pc, #84]	@ (8003764 <UART_AdvFeatureConfig+0x160>)
 800370e:	4013      	ands	r3, r2
 8003710:	0019      	movs	r1, r3
 8003712:	687b      	ldr	r3, [r7, #4]
 8003714:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	681b      	ldr	r3, [r3, #0]
 800371a:	430a      	orrs	r2, r1
 800371c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003722:	2280      	movs	r2, #128	@ 0x80
 8003724:	4013      	ands	r3, r2
 8003726:	d00b      	beq.n	8003740 <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	681b      	ldr	r3, [r3, #0]
 800372c:	685b      	ldr	r3, [r3, #4]
 800372e:	4a0e      	ldr	r2, [pc, #56]	@ (8003768 <UART_AdvFeatureConfig+0x164>)
 8003730:	4013      	ands	r3, r2
 8003732:	0019      	movs	r1, r3
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	681b      	ldr	r3, [r3, #0]
 800373c:	430a      	orrs	r2, r1
 800373e:	605a      	str	r2, [r3, #4]
  }
}
 8003740:	46c0      	nop			@ (mov r8, r8)
 8003742:	46bd      	mov	sp, r7
 8003744:	b002      	add	sp, #8
 8003746:	bd80      	pop	{r7, pc}
 8003748:	ffff7fff 	.word	0xffff7fff
 800374c:	fffdffff 	.word	0xfffdffff
 8003750:	fffeffff 	.word	0xfffeffff
 8003754:	fffbffff 	.word	0xfffbffff
 8003758:	ffffefff 	.word	0xffffefff
 800375c:	ffffdfff 	.word	0xffffdfff
 8003760:	ffefffff 	.word	0xffefffff
 8003764:	ff9fffff 	.word	0xff9fffff
 8003768:	fff7ffff 	.word	0xfff7ffff

0800376c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800376c:	b580      	push	{r7, lr}
 800376e:	b092      	sub	sp, #72	@ 0x48
 8003770:	af02      	add	r7, sp, #8
 8003772:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	2290      	movs	r2, #144	@ 0x90
 8003778:	2100      	movs	r1, #0
 800377a:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800377c:	f7fd fce4 	bl	8001148 <HAL_GetTick>
 8003780:	0003      	movs	r3, r0
 8003782:	63fb      	str	r3, [r7, #60]	@ 0x3c

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	681b      	ldr	r3, [r3, #0]
 8003788:	681b      	ldr	r3, [r3, #0]
 800378a:	2208      	movs	r2, #8
 800378c:	4013      	ands	r3, r2
 800378e:	2b08      	cmp	r3, #8
 8003790:	d12d      	bne.n	80037ee <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003792:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003794:	2280      	movs	r2, #128	@ 0x80
 8003796:	0391      	lsls	r1, r2, #14
 8003798:	6878      	ldr	r0, [r7, #4]
 800379a:	4a47      	ldr	r2, [pc, #284]	@ (80038b8 <UART_CheckIdleState+0x14c>)
 800379c:	9200      	str	r2, [sp, #0]
 800379e:	2200      	movs	r2, #0
 80037a0:	f000 f88e 	bl	80038c0 <UART_WaitOnFlagUntilTimeout>
 80037a4:	1e03      	subs	r3, r0, #0
 80037a6:	d022      	beq.n	80037ee <UART_CheckIdleState+0x82>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80037a8:	f3ef 8310 	mrs	r3, PRIMASK
 80037ac:	627b      	str	r3, [r7, #36]	@ 0x24
  return(result);
 80037ae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 80037b0:	63bb      	str	r3, [r7, #56]	@ 0x38
 80037b2:	2301      	movs	r3, #1
 80037b4:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80037b6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80037b8:	f383 8810 	msr	PRIMASK, r3
}
 80037bc:	46c0      	nop			@ (mov r8, r8)
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	681b      	ldr	r3, [r3, #0]
 80037c2:	681a      	ldr	r2, [r3, #0]
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	681b      	ldr	r3, [r3, #0]
 80037c8:	2180      	movs	r1, #128	@ 0x80
 80037ca:	438a      	bics	r2, r1
 80037cc:	601a      	str	r2, [r3, #0]
 80037ce:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80037d0:	62fb      	str	r3, [r7, #44]	@ 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80037d2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80037d4:	f383 8810 	msr	PRIMASK, r3
}
 80037d8:	46c0      	nop			@ (mov r8, r8)

      huart->gState = HAL_UART_STATE_READY;
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	2288      	movs	r2, #136	@ 0x88
 80037de:	2120      	movs	r1, #32
 80037e0:	5099      	str	r1, [r3, r2]

      __HAL_UNLOCK(huart);
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	2284      	movs	r2, #132	@ 0x84
 80037e6:	2100      	movs	r1, #0
 80037e8:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80037ea:	2303      	movs	r3, #3
 80037ec:	e060      	b.n	80038b0 <UART_CheckIdleState+0x144>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	681b      	ldr	r3, [r3, #0]
 80037f2:	681b      	ldr	r3, [r3, #0]
 80037f4:	2204      	movs	r2, #4
 80037f6:	4013      	ands	r3, r2
 80037f8:	2b04      	cmp	r3, #4
 80037fa:	d146      	bne.n	800388a <UART_CheckIdleState+0x11e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80037fc:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80037fe:	2280      	movs	r2, #128	@ 0x80
 8003800:	03d1      	lsls	r1, r2, #15
 8003802:	6878      	ldr	r0, [r7, #4]
 8003804:	4a2c      	ldr	r2, [pc, #176]	@ (80038b8 <UART_CheckIdleState+0x14c>)
 8003806:	9200      	str	r2, [sp, #0]
 8003808:	2200      	movs	r2, #0
 800380a:	f000 f859 	bl	80038c0 <UART_WaitOnFlagUntilTimeout>
 800380e:	1e03      	subs	r3, r0, #0
 8003810:	d03b      	beq.n	800388a <UART_CheckIdleState+0x11e>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003812:	f3ef 8310 	mrs	r3, PRIMASK
 8003816:	60fb      	str	r3, [r7, #12]
  return(result);
 8003818:	68fb      	ldr	r3, [r7, #12]
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800381a:	637b      	str	r3, [r7, #52]	@ 0x34
 800381c:	2301      	movs	r3, #1
 800381e:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003820:	693b      	ldr	r3, [r7, #16]
 8003822:	f383 8810 	msr	PRIMASK, r3
}
 8003826:	46c0      	nop			@ (mov r8, r8)
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	681b      	ldr	r3, [r3, #0]
 800382c:	681a      	ldr	r2, [r3, #0]
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	681b      	ldr	r3, [r3, #0]
 8003832:	4922      	ldr	r1, [pc, #136]	@ (80038bc <UART_CheckIdleState+0x150>)
 8003834:	400a      	ands	r2, r1
 8003836:	601a      	str	r2, [r3, #0]
 8003838:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800383a:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800383c:	697b      	ldr	r3, [r7, #20]
 800383e:	f383 8810 	msr	PRIMASK, r3
}
 8003842:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003844:	f3ef 8310 	mrs	r3, PRIMASK
 8003848:	61bb      	str	r3, [r7, #24]
  return(result);
 800384a:	69bb      	ldr	r3, [r7, #24]
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800384c:	633b      	str	r3, [r7, #48]	@ 0x30
 800384e:	2301      	movs	r3, #1
 8003850:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003852:	69fb      	ldr	r3, [r7, #28]
 8003854:	f383 8810 	msr	PRIMASK, r3
}
 8003858:	46c0      	nop			@ (mov r8, r8)
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	681b      	ldr	r3, [r3, #0]
 800385e:	689a      	ldr	r2, [r3, #8]
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	681b      	ldr	r3, [r3, #0]
 8003864:	2101      	movs	r1, #1
 8003866:	438a      	bics	r2, r1
 8003868:	609a      	str	r2, [r3, #8]
 800386a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800386c:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800386e:	6a3b      	ldr	r3, [r7, #32]
 8003870:	f383 8810 	msr	PRIMASK, r3
}
 8003874:	46c0      	nop			@ (mov r8, r8)

      huart->RxState = HAL_UART_STATE_READY;
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	228c      	movs	r2, #140	@ 0x8c
 800387a:	2120      	movs	r1, #32
 800387c:	5099      	str	r1, [r3, r2]

      __HAL_UNLOCK(huart);
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	2284      	movs	r2, #132	@ 0x84
 8003882:	2100      	movs	r1, #0
 8003884:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003886:	2303      	movs	r3, #3
 8003888:	e012      	b.n	80038b0 <UART_CheckIdleState+0x144>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	2288      	movs	r2, #136	@ 0x88
 800388e:	2120      	movs	r1, #32
 8003890:	5099      	str	r1, [r3, r2]
  huart->RxState = HAL_UART_STATE_READY;
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	228c      	movs	r2, #140	@ 0x8c
 8003896:	2120      	movs	r1, #32
 8003898:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800389a:	687b      	ldr	r3, [r7, #4]
 800389c:	2200      	movs	r2, #0
 800389e:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	2200      	movs	r2, #0
 80038a4:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	2284      	movs	r2, #132	@ 0x84
 80038aa:	2100      	movs	r1, #0
 80038ac:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80038ae:	2300      	movs	r3, #0
}
 80038b0:	0018      	movs	r0, r3
 80038b2:	46bd      	mov	sp, r7
 80038b4:	b010      	add	sp, #64	@ 0x40
 80038b6:	bd80      	pop	{r7, pc}
 80038b8:	01ffffff 	.word	0x01ffffff
 80038bc:	fffffedf 	.word	0xfffffedf

080038c0 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80038c0:	b580      	push	{r7, lr}
 80038c2:	b084      	sub	sp, #16
 80038c4:	af00      	add	r7, sp, #0
 80038c6:	60f8      	str	r0, [r7, #12]
 80038c8:	60b9      	str	r1, [r7, #8]
 80038ca:	603b      	str	r3, [r7, #0]
 80038cc:	1dfb      	adds	r3, r7, #7
 80038ce:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80038d0:	e051      	b.n	8003976 <UART_WaitOnFlagUntilTimeout+0xb6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80038d2:	69bb      	ldr	r3, [r7, #24]
 80038d4:	3301      	adds	r3, #1
 80038d6:	d04e      	beq.n	8003976 <UART_WaitOnFlagUntilTimeout+0xb6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80038d8:	f7fd fc36 	bl	8001148 <HAL_GetTick>
 80038dc:	0002      	movs	r2, r0
 80038de:	683b      	ldr	r3, [r7, #0]
 80038e0:	1ad3      	subs	r3, r2, r3
 80038e2:	69ba      	ldr	r2, [r7, #24]
 80038e4:	429a      	cmp	r2, r3
 80038e6:	d302      	bcc.n	80038ee <UART_WaitOnFlagUntilTimeout+0x2e>
 80038e8:	69bb      	ldr	r3, [r7, #24]
 80038ea:	2b00      	cmp	r3, #0
 80038ec:	d101      	bne.n	80038f2 <UART_WaitOnFlagUntilTimeout+0x32>
      {

        return HAL_TIMEOUT;
 80038ee:	2303      	movs	r3, #3
 80038f0:	e051      	b.n	8003996 <UART_WaitOnFlagUntilTimeout+0xd6>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 80038f2:	68fb      	ldr	r3, [r7, #12]
 80038f4:	681b      	ldr	r3, [r3, #0]
 80038f6:	681b      	ldr	r3, [r3, #0]
 80038f8:	2204      	movs	r2, #4
 80038fa:	4013      	ands	r3, r2
 80038fc:	d03b      	beq.n	8003976 <UART_WaitOnFlagUntilTimeout+0xb6>
 80038fe:	68bb      	ldr	r3, [r7, #8]
 8003900:	2b80      	cmp	r3, #128	@ 0x80
 8003902:	d038      	beq.n	8003976 <UART_WaitOnFlagUntilTimeout+0xb6>
 8003904:	68bb      	ldr	r3, [r7, #8]
 8003906:	2b40      	cmp	r3, #64	@ 0x40
 8003908:	d035      	beq.n	8003976 <UART_WaitOnFlagUntilTimeout+0xb6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800390a:	68fb      	ldr	r3, [r7, #12]
 800390c:	681b      	ldr	r3, [r3, #0]
 800390e:	69db      	ldr	r3, [r3, #28]
 8003910:	2208      	movs	r2, #8
 8003912:	4013      	ands	r3, r2
 8003914:	2b08      	cmp	r3, #8
 8003916:	d111      	bne.n	800393c <UART_WaitOnFlagUntilTimeout+0x7c>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8003918:	68fb      	ldr	r3, [r7, #12]
 800391a:	681b      	ldr	r3, [r3, #0]
 800391c:	2208      	movs	r2, #8
 800391e:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8003920:	68fb      	ldr	r3, [r7, #12]
 8003922:	0018      	movs	r0, r3
 8003924:	f000 f83c 	bl	80039a0 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8003928:	68fb      	ldr	r3, [r7, #12]
 800392a:	2290      	movs	r2, #144	@ 0x90
 800392c:	2108      	movs	r1, #8
 800392e:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003930:	68fb      	ldr	r3, [r7, #12]
 8003932:	2284      	movs	r2, #132	@ 0x84
 8003934:	2100      	movs	r1, #0
 8003936:	5499      	strb	r1, [r3, r2]

          return HAL_ERROR;
 8003938:	2301      	movs	r3, #1
 800393a:	e02c      	b.n	8003996 <UART_WaitOnFlagUntilTimeout+0xd6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800393c:	68fb      	ldr	r3, [r7, #12]
 800393e:	681b      	ldr	r3, [r3, #0]
 8003940:	69da      	ldr	r2, [r3, #28]
 8003942:	2380      	movs	r3, #128	@ 0x80
 8003944:	011b      	lsls	r3, r3, #4
 8003946:	401a      	ands	r2, r3
 8003948:	2380      	movs	r3, #128	@ 0x80
 800394a:	011b      	lsls	r3, r3, #4
 800394c:	429a      	cmp	r2, r3
 800394e:	d112      	bne.n	8003976 <UART_WaitOnFlagUntilTimeout+0xb6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8003950:	68fb      	ldr	r3, [r7, #12]
 8003952:	681b      	ldr	r3, [r3, #0]
 8003954:	2280      	movs	r2, #128	@ 0x80
 8003956:	0112      	lsls	r2, r2, #4
 8003958:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800395a:	68fb      	ldr	r3, [r7, #12]
 800395c:	0018      	movs	r0, r3
 800395e:	f000 f81f 	bl	80039a0 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8003962:	68fb      	ldr	r3, [r7, #12]
 8003964:	2290      	movs	r2, #144	@ 0x90
 8003966:	2120      	movs	r1, #32
 8003968:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800396a:	68fb      	ldr	r3, [r7, #12]
 800396c:	2284      	movs	r2, #132	@ 0x84
 800396e:	2100      	movs	r1, #0
 8003970:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 8003972:	2303      	movs	r3, #3
 8003974:	e00f      	b.n	8003996 <UART_WaitOnFlagUntilTimeout+0xd6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003976:	68fb      	ldr	r3, [r7, #12]
 8003978:	681b      	ldr	r3, [r3, #0]
 800397a:	69db      	ldr	r3, [r3, #28]
 800397c:	68ba      	ldr	r2, [r7, #8]
 800397e:	4013      	ands	r3, r2
 8003980:	68ba      	ldr	r2, [r7, #8]
 8003982:	1ad3      	subs	r3, r2, r3
 8003984:	425a      	negs	r2, r3
 8003986:	4153      	adcs	r3, r2
 8003988:	b2db      	uxtb	r3, r3
 800398a:	001a      	movs	r2, r3
 800398c:	1dfb      	adds	r3, r7, #7
 800398e:	781b      	ldrb	r3, [r3, #0]
 8003990:	429a      	cmp	r2, r3
 8003992:	d09e      	beq.n	80038d2 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003994:	2300      	movs	r3, #0
}
 8003996:	0018      	movs	r0, r3
 8003998:	46bd      	mov	sp, r7
 800399a:	b004      	add	sp, #16
 800399c:	bd80      	pop	{r7, pc}
	...

080039a0 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80039a0:	b580      	push	{r7, lr}
 80039a2:	b08e      	sub	sp, #56	@ 0x38
 80039a4:	af00      	add	r7, sp, #0
 80039a6:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80039a8:	f3ef 8310 	mrs	r3, PRIMASK
 80039ac:	617b      	str	r3, [r7, #20]
  return(result);
 80039ae:	697b      	ldr	r3, [r7, #20]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80039b0:	637b      	str	r3, [r7, #52]	@ 0x34
 80039b2:	2301      	movs	r3, #1
 80039b4:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80039b6:	69bb      	ldr	r3, [r7, #24]
 80039b8:	f383 8810 	msr	PRIMASK, r3
}
 80039bc:	46c0      	nop			@ (mov r8, r8)
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	681b      	ldr	r3, [r3, #0]
 80039c2:	681a      	ldr	r2, [r3, #0]
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	681b      	ldr	r3, [r3, #0]
 80039c8:	4926      	ldr	r1, [pc, #152]	@ (8003a64 <UART_EndRxTransfer+0xc4>)
 80039ca:	400a      	ands	r2, r1
 80039cc:	601a      	str	r2, [r3, #0]
 80039ce:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80039d0:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80039d2:	69fb      	ldr	r3, [r7, #28]
 80039d4:	f383 8810 	msr	PRIMASK, r3
}
 80039d8:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80039da:	f3ef 8310 	mrs	r3, PRIMASK
 80039de:	623b      	str	r3, [r7, #32]
  return(result);
 80039e0:	6a3b      	ldr	r3, [r7, #32]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80039e2:	633b      	str	r3, [r7, #48]	@ 0x30
 80039e4:	2301      	movs	r3, #1
 80039e6:	627b      	str	r3, [r7, #36]	@ 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80039e8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80039ea:	f383 8810 	msr	PRIMASK, r3
}
 80039ee:	46c0      	nop			@ (mov r8, r8)
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	681b      	ldr	r3, [r3, #0]
 80039f4:	689a      	ldr	r2, [r3, #8]
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	681b      	ldr	r3, [r3, #0]
 80039fa:	491b      	ldr	r1, [pc, #108]	@ (8003a68 <UART_EndRxTransfer+0xc8>)
 80039fc:	400a      	ands	r2, r1
 80039fe:	609a      	str	r2, [r3, #8]
 8003a00:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003a02:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003a04:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003a06:	f383 8810 	msr	PRIMASK, r3
}
 8003a0a:	46c0      	nop			@ (mov r8, r8)

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003a10:	2b01      	cmp	r3, #1
 8003a12:	d118      	bne.n	8003a46 <UART_EndRxTransfer+0xa6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003a14:	f3ef 8310 	mrs	r3, PRIMASK
 8003a18:	60bb      	str	r3, [r7, #8]
  return(result);
 8003a1a:	68bb      	ldr	r3, [r7, #8]
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003a1c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8003a1e:	2301      	movs	r3, #1
 8003a20:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003a22:	68fb      	ldr	r3, [r7, #12]
 8003a24:	f383 8810 	msr	PRIMASK, r3
}
 8003a28:	46c0      	nop			@ (mov r8, r8)
 8003a2a:	687b      	ldr	r3, [r7, #4]
 8003a2c:	681b      	ldr	r3, [r3, #0]
 8003a2e:	681a      	ldr	r2, [r3, #0]
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	681b      	ldr	r3, [r3, #0]
 8003a34:	2110      	movs	r1, #16
 8003a36:	438a      	bics	r2, r1
 8003a38:	601a      	str	r2, [r3, #0]
 8003a3a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003a3c:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003a3e:	693b      	ldr	r3, [r7, #16]
 8003a40:	f383 8810 	msr	PRIMASK, r3
}
 8003a44:	46c0      	nop			@ (mov r8, r8)
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003a46:	687b      	ldr	r3, [r7, #4]
 8003a48:	228c      	movs	r2, #140	@ 0x8c
 8003a4a:	2120      	movs	r1, #32
 8003a4c:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003a4e:	687b      	ldr	r3, [r7, #4]
 8003a50:	2200      	movs	r2, #0
 8003a52:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	2200      	movs	r2, #0
 8003a58:	675a      	str	r2, [r3, #116]	@ 0x74
}
 8003a5a:	46c0      	nop			@ (mov r8, r8)
 8003a5c:	46bd      	mov	sp, r7
 8003a5e:	b00e      	add	sp, #56	@ 0x38
 8003a60:	bd80      	pop	{r7, pc}
 8003a62:	46c0      	nop			@ (mov r8, r8)
 8003a64:	fffffedf 	.word	0xfffffedf
 8003a68:	effffffe 	.word	0xeffffffe

08003a6c <_vsniprintf_r>:
 8003a6c:	b530      	push	{r4, r5, lr}
 8003a6e:	0014      	movs	r4, r2
 8003a70:	0005      	movs	r5, r0
 8003a72:	001a      	movs	r2, r3
 8003a74:	b09b      	sub	sp, #108	@ 0x6c
 8003a76:	2c00      	cmp	r4, #0
 8003a78:	da05      	bge.n	8003a86 <_vsniprintf_r+0x1a>
 8003a7a:	238b      	movs	r3, #139	@ 0x8b
 8003a7c:	6003      	str	r3, [r0, #0]
 8003a7e:	2001      	movs	r0, #1
 8003a80:	4240      	negs	r0, r0
 8003a82:	b01b      	add	sp, #108	@ 0x6c
 8003a84:	bd30      	pop	{r4, r5, pc}
 8003a86:	2382      	movs	r3, #130	@ 0x82
 8003a88:	4668      	mov	r0, sp
 8003a8a:	009b      	lsls	r3, r3, #2
 8003a8c:	8183      	strh	r3, [r0, #12]
 8003a8e:	2300      	movs	r3, #0
 8003a90:	9100      	str	r1, [sp, #0]
 8003a92:	9104      	str	r1, [sp, #16]
 8003a94:	429c      	cmp	r4, r3
 8003a96:	d000      	beq.n	8003a9a <_vsniprintf_r+0x2e>
 8003a98:	1e63      	subs	r3, r4, #1
 8003a9a:	9302      	str	r3, [sp, #8]
 8003a9c:	9305      	str	r3, [sp, #20]
 8003a9e:	2301      	movs	r3, #1
 8003aa0:	4669      	mov	r1, sp
 8003aa2:	425b      	negs	r3, r3
 8003aa4:	81cb      	strh	r3, [r1, #14]
 8003aa6:	0028      	movs	r0, r5
 8003aa8:	9b1e      	ldr	r3, [sp, #120]	@ 0x78
 8003aaa:	f000 f9a7 	bl	8003dfc <_svfiprintf_r>
 8003aae:	1c43      	adds	r3, r0, #1
 8003ab0:	da01      	bge.n	8003ab6 <_vsniprintf_r+0x4a>
 8003ab2:	238b      	movs	r3, #139	@ 0x8b
 8003ab4:	602b      	str	r3, [r5, #0]
 8003ab6:	2c00      	cmp	r4, #0
 8003ab8:	d0e3      	beq.n	8003a82 <_vsniprintf_r+0x16>
 8003aba:	2200      	movs	r2, #0
 8003abc:	9b00      	ldr	r3, [sp, #0]
 8003abe:	701a      	strb	r2, [r3, #0]
 8003ac0:	e7df      	b.n	8003a82 <_vsniprintf_r+0x16>
	...

08003ac4 <vsniprintf>:
 8003ac4:	b513      	push	{r0, r1, r4, lr}
 8003ac6:	4c04      	ldr	r4, [pc, #16]	@ (8003ad8 <vsniprintf+0x14>)
 8003ac8:	9300      	str	r3, [sp, #0]
 8003aca:	0013      	movs	r3, r2
 8003acc:	000a      	movs	r2, r1
 8003ace:	0001      	movs	r1, r0
 8003ad0:	6820      	ldr	r0, [r4, #0]
 8003ad2:	f7ff ffcb 	bl	8003a6c <_vsniprintf_r>
 8003ad6:	bd16      	pop	{r1, r2, r4, pc}
 8003ad8:	2000000c 	.word	0x2000000c

08003adc <memset>:
 8003adc:	0003      	movs	r3, r0
 8003ade:	1882      	adds	r2, r0, r2
 8003ae0:	4293      	cmp	r3, r2
 8003ae2:	d100      	bne.n	8003ae6 <memset+0xa>
 8003ae4:	4770      	bx	lr
 8003ae6:	7019      	strb	r1, [r3, #0]
 8003ae8:	3301      	adds	r3, #1
 8003aea:	e7f9      	b.n	8003ae0 <memset+0x4>

08003aec <__errno>:
 8003aec:	4b01      	ldr	r3, [pc, #4]	@ (8003af4 <__errno+0x8>)
 8003aee:	6818      	ldr	r0, [r3, #0]
 8003af0:	4770      	bx	lr
 8003af2:	46c0      	nop			@ (mov r8, r8)
 8003af4:	2000000c 	.word	0x2000000c

08003af8 <__libc_init_array>:
 8003af8:	b570      	push	{r4, r5, r6, lr}
 8003afa:	2600      	movs	r6, #0
 8003afc:	4c0c      	ldr	r4, [pc, #48]	@ (8003b30 <__libc_init_array+0x38>)
 8003afe:	4d0d      	ldr	r5, [pc, #52]	@ (8003b34 <__libc_init_array+0x3c>)
 8003b00:	1b64      	subs	r4, r4, r5
 8003b02:	10a4      	asrs	r4, r4, #2
 8003b04:	42a6      	cmp	r6, r4
 8003b06:	d109      	bne.n	8003b1c <__libc_init_array+0x24>
 8003b08:	2600      	movs	r6, #0
 8003b0a:	f000 fc65 	bl	80043d8 <_init>
 8003b0e:	4c0a      	ldr	r4, [pc, #40]	@ (8003b38 <__libc_init_array+0x40>)
 8003b10:	4d0a      	ldr	r5, [pc, #40]	@ (8003b3c <__libc_init_array+0x44>)
 8003b12:	1b64      	subs	r4, r4, r5
 8003b14:	10a4      	asrs	r4, r4, #2
 8003b16:	42a6      	cmp	r6, r4
 8003b18:	d105      	bne.n	8003b26 <__libc_init_array+0x2e>
 8003b1a:	bd70      	pop	{r4, r5, r6, pc}
 8003b1c:	00b3      	lsls	r3, r6, #2
 8003b1e:	58eb      	ldr	r3, [r5, r3]
 8003b20:	4798      	blx	r3
 8003b22:	3601      	adds	r6, #1
 8003b24:	e7ee      	b.n	8003b04 <__libc_init_array+0xc>
 8003b26:	00b3      	lsls	r3, r6, #2
 8003b28:	58eb      	ldr	r3, [r5, r3]
 8003b2a:	4798      	blx	r3
 8003b2c:	3601      	adds	r6, #1
 8003b2e:	e7f2      	b.n	8003b16 <__libc_init_array+0x1e>
 8003b30:	0800453c 	.word	0x0800453c
 8003b34:	0800453c 	.word	0x0800453c
 8003b38:	08004540 	.word	0x08004540
 8003b3c:	0800453c 	.word	0x0800453c

08003b40 <__retarget_lock_acquire_recursive>:
 8003b40:	4770      	bx	lr

08003b42 <__retarget_lock_release_recursive>:
 8003b42:	4770      	bx	lr

08003b44 <_free_r>:
 8003b44:	b570      	push	{r4, r5, r6, lr}
 8003b46:	0005      	movs	r5, r0
 8003b48:	1e0c      	subs	r4, r1, #0
 8003b4a:	d010      	beq.n	8003b6e <_free_r+0x2a>
 8003b4c:	3c04      	subs	r4, #4
 8003b4e:	6823      	ldr	r3, [r4, #0]
 8003b50:	2b00      	cmp	r3, #0
 8003b52:	da00      	bge.n	8003b56 <_free_r+0x12>
 8003b54:	18e4      	adds	r4, r4, r3
 8003b56:	0028      	movs	r0, r5
 8003b58:	f000 f8e0 	bl	8003d1c <__malloc_lock>
 8003b5c:	4a1d      	ldr	r2, [pc, #116]	@ (8003bd4 <_free_r+0x90>)
 8003b5e:	6813      	ldr	r3, [r2, #0]
 8003b60:	2b00      	cmp	r3, #0
 8003b62:	d105      	bne.n	8003b70 <_free_r+0x2c>
 8003b64:	6063      	str	r3, [r4, #4]
 8003b66:	6014      	str	r4, [r2, #0]
 8003b68:	0028      	movs	r0, r5
 8003b6a:	f000 f8df 	bl	8003d2c <__malloc_unlock>
 8003b6e:	bd70      	pop	{r4, r5, r6, pc}
 8003b70:	42a3      	cmp	r3, r4
 8003b72:	d908      	bls.n	8003b86 <_free_r+0x42>
 8003b74:	6820      	ldr	r0, [r4, #0]
 8003b76:	1821      	adds	r1, r4, r0
 8003b78:	428b      	cmp	r3, r1
 8003b7a:	d1f3      	bne.n	8003b64 <_free_r+0x20>
 8003b7c:	6819      	ldr	r1, [r3, #0]
 8003b7e:	685b      	ldr	r3, [r3, #4]
 8003b80:	1809      	adds	r1, r1, r0
 8003b82:	6021      	str	r1, [r4, #0]
 8003b84:	e7ee      	b.n	8003b64 <_free_r+0x20>
 8003b86:	001a      	movs	r2, r3
 8003b88:	685b      	ldr	r3, [r3, #4]
 8003b8a:	2b00      	cmp	r3, #0
 8003b8c:	d001      	beq.n	8003b92 <_free_r+0x4e>
 8003b8e:	42a3      	cmp	r3, r4
 8003b90:	d9f9      	bls.n	8003b86 <_free_r+0x42>
 8003b92:	6811      	ldr	r1, [r2, #0]
 8003b94:	1850      	adds	r0, r2, r1
 8003b96:	42a0      	cmp	r0, r4
 8003b98:	d10b      	bne.n	8003bb2 <_free_r+0x6e>
 8003b9a:	6820      	ldr	r0, [r4, #0]
 8003b9c:	1809      	adds	r1, r1, r0
 8003b9e:	1850      	adds	r0, r2, r1
 8003ba0:	6011      	str	r1, [r2, #0]
 8003ba2:	4283      	cmp	r3, r0
 8003ba4:	d1e0      	bne.n	8003b68 <_free_r+0x24>
 8003ba6:	6818      	ldr	r0, [r3, #0]
 8003ba8:	685b      	ldr	r3, [r3, #4]
 8003baa:	1841      	adds	r1, r0, r1
 8003bac:	6011      	str	r1, [r2, #0]
 8003bae:	6053      	str	r3, [r2, #4]
 8003bb0:	e7da      	b.n	8003b68 <_free_r+0x24>
 8003bb2:	42a0      	cmp	r0, r4
 8003bb4:	d902      	bls.n	8003bbc <_free_r+0x78>
 8003bb6:	230c      	movs	r3, #12
 8003bb8:	602b      	str	r3, [r5, #0]
 8003bba:	e7d5      	b.n	8003b68 <_free_r+0x24>
 8003bbc:	6820      	ldr	r0, [r4, #0]
 8003bbe:	1821      	adds	r1, r4, r0
 8003bc0:	428b      	cmp	r3, r1
 8003bc2:	d103      	bne.n	8003bcc <_free_r+0x88>
 8003bc4:	6819      	ldr	r1, [r3, #0]
 8003bc6:	685b      	ldr	r3, [r3, #4]
 8003bc8:	1809      	adds	r1, r1, r0
 8003bca:	6021      	str	r1, [r4, #0]
 8003bcc:	6063      	str	r3, [r4, #4]
 8003bce:	6054      	str	r4, [r2, #4]
 8003bd0:	e7ca      	b.n	8003b68 <_free_r+0x24>
 8003bd2:	46c0      	nop			@ (mov r8, r8)
 8003bd4:	20000310 	.word	0x20000310

08003bd8 <sbrk_aligned>:
 8003bd8:	b570      	push	{r4, r5, r6, lr}
 8003bda:	4e0f      	ldr	r6, [pc, #60]	@ (8003c18 <sbrk_aligned+0x40>)
 8003bdc:	000d      	movs	r5, r1
 8003bde:	6831      	ldr	r1, [r6, #0]
 8003be0:	0004      	movs	r4, r0
 8003be2:	2900      	cmp	r1, #0
 8003be4:	d102      	bne.n	8003bec <sbrk_aligned+0x14>
 8003be6:	f000 fb99 	bl	800431c <_sbrk_r>
 8003bea:	6030      	str	r0, [r6, #0]
 8003bec:	0029      	movs	r1, r5
 8003bee:	0020      	movs	r0, r4
 8003bf0:	f000 fb94 	bl	800431c <_sbrk_r>
 8003bf4:	1c43      	adds	r3, r0, #1
 8003bf6:	d103      	bne.n	8003c00 <sbrk_aligned+0x28>
 8003bf8:	2501      	movs	r5, #1
 8003bfa:	426d      	negs	r5, r5
 8003bfc:	0028      	movs	r0, r5
 8003bfe:	bd70      	pop	{r4, r5, r6, pc}
 8003c00:	2303      	movs	r3, #3
 8003c02:	1cc5      	adds	r5, r0, #3
 8003c04:	439d      	bics	r5, r3
 8003c06:	42a8      	cmp	r0, r5
 8003c08:	d0f8      	beq.n	8003bfc <sbrk_aligned+0x24>
 8003c0a:	1a29      	subs	r1, r5, r0
 8003c0c:	0020      	movs	r0, r4
 8003c0e:	f000 fb85 	bl	800431c <_sbrk_r>
 8003c12:	3001      	adds	r0, #1
 8003c14:	d1f2      	bne.n	8003bfc <sbrk_aligned+0x24>
 8003c16:	e7ef      	b.n	8003bf8 <sbrk_aligned+0x20>
 8003c18:	2000030c 	.word	0x2000030c

08003c1c <_malloc_r>:
 8003c1c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8003c1e:	2203      	movs	r2, #3
 8003c20:	1ccb      	adds	r3, r1, #3
 8003c22:	4393      	bics	r3, r2
 8003c24:	3308      	adds	r3, #8
 8003c26:	0005      	movs	r5, r0
 8003c28:	001f      	movs	r7, r3
 8003c2a:	2b0c      	cmp	r3, #12
 8003c2c:	d234      	bcs.n	8003c98 <_malloc_r+0x7c>
 8003c2e:	270c      	movs	r7, #12
 8003c30:	42b9      	cmp	r1, r7
 8003c32:	d833      	bhi.n	8003c9c <_malloc_r+0x80>
 8003c34:	0028      	movs	r0, r5
 8003c36:	f000 f871 	bl	8003d1c <__malloc_lock>
 8003c3a:	4e37      	ldr	r6, [pc, #220]	@ (8003d18 <_malloc_r+0xfc>)
 8003c3c:	6833      	ldr	r3, [r6, #0]
 8003c3e:	001c      	movs	r4, r3
 8003c40:	2c00      	cmp	r4, #0
 8003c42:	d12f      	bne.n	8003ca4 <_malloc_r+0x88>
 8003c44:	0039      	movs	r1, r7
 8003c46:	0028      	movs	r0, r5
 8003c48:	f7ff ffc6 	bl	8003bd8 <sbrk_aligned>
 8003c4c:	0004      	movs	r4, r0
 8003c4e:	1c43      	adds	r3, r0, #1
 8003c50:	d15f      	bne.n	8003d12 <_malloc_r+0xf6>
 8003c52:	6834      	ldr	r4, [r6, #0]
 8003c54:	9400      	str	r4, [sp, #0]
 8003c56:	9b00      	ldr	r3, [sp, #0]
 8003c58:	2b00      	cmp	r3, #0
 8003c5a:	d14a      	bne.n	8003cf2 <_malloc_r+0xd6>
 8003c5c:	2c00      	cmp	r4, #0
 8003c5e:	d052      	beq.n	8003d06 <_malloc_r+0xea>
 8003c60:	6823      	ldr	r3, [r4, #0]
 8003c62:	0028      	movs	r0, r5
 8003c64:	18e3      	adds	r3, r4, r3
 8003c66:	9900      	ldr	r1, [sp, #0]
 8003c68:	9301      	str	r3, [sp, #4]
 8003c6a:	f000 fb57 	bl	800431c <_sbrk_r>
 8003c6e:	9b01      	ldr	r3, [sp, #4]
 8003c70:	4283      	cmp	r3, r0
 8003c72:	d148      	bne.n	8003d06 <_malloc_r+0xea>
 8003c74:	6823      	ldr	r3, [r4, #0]
 8003c76:	0028      	movs	r0, r5
 8003c78:	1aff      	subs	r7, r7, r3
 8003c7a:	0039      	movs	r1, r7
 8003c7c:	f7ff ffac 	bl	8003bd8 <sbrk_aligned>
 8003c80:	3001      	adds	r0, #1
 8003c82:	d040      	beq.n	8003d06 <_malloc_r+0xea>
 8003c84:	6823      	ldr	r3, [r4, #0]
 8003c86:	19db      	adds	r3, r3, r7
 8003c88:	6023      	str	r3, [r4, #0]
 8003c8a:	6833      	ldr	r3, [r6, #0]
 8003c8c:	685a      	ldr	r2, [r3, #4]
 8003c8e:	2a00      	cmp	r2, #0
 8003c90:	d133      	bne.n	8003cfa <_malloc_r+0xde>
 8003c92:	9b00      	ldr	r3, [sp, #0]
 8003c94:	6033      	str	r3, [r6, #0]
 8003c96:	e019      	b.n	8003ccc <_malloc_r+0xb0>
 8003c98:	2b00      	cmp	r3, #0
 8003c9a:	dac9      	bge.n	8003c30 <_malloc_r+0x14>
 8003c9c:	230c      	movs	r3, #12
 8003c9e:	602b      	str	r3, [r5, #0]
 8003ca0:	2000      	movs	r0, #0
 8003ca2:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8003ca4:	6821      	ldr	r1, [r4, #0]
 8003ca6:	1bc9      	subs	r1, r1, r7
 8003ca8:	d420      	bmi.n	8003cec <_malloc_r+0xd0>
 8003caa:	290b      	cmp	r1, #11
 8003cac:	d90a      	bls.n	8003cc4 <_malloc_r+0xa8>
 8003cae:	19e2      	adds	r2, r4, r7
 8003cb0:	6027      	str	r7, [r4, #0]
 8003cb2:	42a3      	cmp	r3, r4
 8003cb4:	d104      	bne.n	8003cc0 <_malloc_r+0xa4>
 8003cb6:	6032      	str	r2, [r6, #0]
 8003cb8:	6863      	ldr	r3, [r4, #4]
 8003cba:	6011      	str	r1, [r2, #0]
 8003cbc:	6053      	str	r3, [r2, #4]
 8003cbe:	e005      	b.n	8003ccc <_malloc_r+0xb0>
 8003cc0:	605a      	str	r2, [r3, #4]
 8003cc2:	e7f9      	b.n	8003cb8 <_malloc_r+0x9c>
 8003cc4:	6862      	ldr	r2, [r4, #4]
 8003cc6:	42a3      	cmp	r3, r4
 8003cc8:	d10e      	bne.n	8003ce8 <_malloc_r+0xcc>
 8003cca:	6032      	str	r2, [r6, #0]
 8003ccc:	0028      	movs	r0, r5
 8003cce:	f000 f82d 	bl	8003d2c <__malloc_unlock>
 8003cd2:	0020      	movs	r0, r4
 8003cd4:	2207      	movs	r2, #7
 8003cd6:	300b      	adds	r0, #11
 8003cd8:	1d23      	adds	r3, r4, #4
 8003cda:	4390      	bics	r0, r2
 8003cdc:	1ac2      	subs	r2, r0, r3
 8003cde:	4298      	cmp	r0, r3
 8003ce0:	d0df      	beq.n	8003ca2 <_malloc_r+0x86>
 8003ce2:	1a1b      	subs	r3, r3, r0
 8003ce4:	50a3      	str	r3, [r4, r2]
 8003ce6:	e7dc      	b.n	8003ca2 <_malloc_r+0x86>
 8003ce8:	605a      	str	r2, [r3, #4]
 8003cea:	e7ef      	b.n	8003ccc <_malloc_r+0xb0>
 8003cec:	0023      	movs	r3, r4
 8003cee:	6864      	ldr	r4, [r4, #4]
 8003cf0:	e7a6      	b.n	8003c40 <_malloc_r+0x24>
 8003cf2:	9c00      	ldr	r4, [sp, #0]
 8003cf4:	6863      	ldr	r3, [r4, #4]
 8003cf6:	9300      	str	r3, [sp, #0]
 8003cf8:	e7ad      	b.n	8003c56 <_malloc_r+0x3a>
 8003cfa:	001a      	movs	r2, r3
 8003cfc:	685b      	ldr	r3, [r3, #4]
 8003cfe:	42a3      	cmp	r3, r4
 8003d00:	d1fb      	bne.n	8003cfa <_malloc_r+0xde>
 8003d02:	2300      	movs	r3, #0
 8003d04:	e7da      	b.n	8003cbc <_malloc_r+0xa0>
 8003d06:	230c      	movs	r3, #12
 8003d08:	0028      	movs	r0, r5
 8003d0a:	602b      	str	r3, [r5, #0]
 8003d0c:	f000 f80e 	bl	8003d2c <__malloc_unlock>
 8003d10:	e7c6      	b.n	8003ca0 <_malloc_r+0x84>
 8003d12:	6007      	str	r7, [r0, #0]
 8003d14:	e7da      	b.n	8003ccc <_malloc_r+0xb0>
 8003d16:	46c0      	nop			@ (mov r8, r8)
 8003d18:	20000310 	.word	0x20000310

08003d1c <__malloc_lock>:
 8003d1c:	b510      	push	{r4, lr}
 8003d1e:	4802      	ldr	r0, [pc, #8]	@ (8003d28 <__malloc_lock+0xc>)
 8003d20:	f7ff ff0e 	bl	8003b40 <__retarget_lock_acquire_recursive>
 8003d24:	bd10      	pop	{r4, pc}
 8003d26:	46c0      	nop			@ (mov r8, r8)
 8003d28:	20000308 	.word	0x20000308

08003d2c <__malloc_unlock>:
 8003d2c:	b510      	push	{r4, lr}
 8003d2e:	4802      	ldr	r0, [pc, #8]	@ (8003d38 <__malloc_unlock+0xc>)
 8003d30:	f7ff ff07 	bl	8003b42 <__retarget_lock_release_recursive>
 8003d34:	bd10      	pop	{r4, pc}
 8003d36:	46c0      	nop			@ (mov r8, r8)
 8003d38:	20000308 	.word	0x20000308

08003d3c <__ssputs_r>:
 8003d3c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003d3e:	688e      	ldr	r6, [r1, #8]
 8003d40:	b085      	sub	sp, #20
 8003d42:	001f      	movs	r7, r3
 8003d44:	000c      	movs	r4, r1
 8003d46:	680b      	ldr	r3, [r1, #0]
 8003d48:	9002      	str	r0, [sp, #8]
 8003d4a:	9203      	str	r2, [sp, #12]
 8003d4c:	42be      	cmp	r6, r7
 8003d4e:	d830      	bhi.n	8003db2 <__ssputs_r+0x76>
 8003d50:	210c      	movs	r1, #12
 8003d52:	5e62      	ldrsh	r2, [r4, r1]
 8003d54:	2190      	movs	r1, #144	@ 0x90
 8003d56:	00c9      	lsls	r1, r1, #3
 8003d58:	420a      	tst	r2, r1
 8003d5a:	d028      	beq.n	8003dae <__ssputs_r+0x72>
 8003d5c:	2003      	movs	r0, #3
 8003d5e:	6921      	ldr	r1, [r4, #16]
 8003d60:	1a5b      	subs	r3, r3, r1
 8003d62:	9301      	str	r3, [sp, #4]
 8003d64:	6963      	ldr	r3, [r4, #20]
 8003d66:	4343      	muls	r3, r0
 8003d68:	9801      	ldr	r0, [sp, #4]
 8003d6a:	0fdd      	lsrs	r5, r3, #31
 8003d6c:	18ed      	adds	r5, r5, r3
 8003d6e:	1c7b      	adds	r3, r7, #1
 8003d70:	181b      	adds	r3, r3, r0
 8003d72:	106d      	asrs	r5, r5, #1
 8003d74:	42ab      	cmp	r3, r5
 8003d76:	d900      	bls.n	8003d7a <__ssputs_r+0x3e>
 8003d78:	001d      	movs	r5, r3
 8003d7a:	0552      	lsls	r2, r2, #21
 8003d7c:	d528      	bpl.n	8003dd0 <__ssputs_r+0x94>
 8003d7e:	0029      	movs	r1, r5
 8003d80:	9802      	ldr	r0, [sp, #8]
 8003d82:	f7ff ff4b 	bl	8003c1c <_malloc_r>
 8003d86:	1e06      	subs	r6, r0, #0
 8003d88:	d02c      	beq.n	8003de4 <__ssputs_r+0xa8>
 8003d8a:	9a01      	ldr	r2, [sp, #4]
 8003d8c:	6921      	ldr	r1, [r4, #16]
 8003d8e:	f000 fae2 	bl	8004356 <memcpy>
 8003d92:	89a2      	ldrh	r2, [r4, #12]
 8003d94:	4b18      	ldr	r3, [pc, #96]	@ (8003df8 <__ssputs_r+0xbc>)
 8003d96:	401a      	ands	r2, r3
 8003d98:	2380      	movs	r3, #128	@ 0x80
 8003d9a:	4313      	orrs	r3, r2
 8003d9c:	81a3      	strh	r3, [r4, #12]
 8003d9e:	9b01      	ldr	r3, [sp, #4]
 8003da0:	6126      	str	r6, [r4, #16]
 8003da2:	18f6      	adds	r6, r6, r3
 8003da4:	6026      	str	r6, [r4, #0]
 8003da6:	003e      	movs	r6, r7
 8003da8:	6165      	str	r5, [r4, #20]
 8003daa:	1aed      	subs	r5, r5, r3
 8003dac:	60a5      	str	r5, [r4, #8]
 8003dae:	42be      	cmp	r6, r7
 8003db0:	d900      	bls.n	8003db4 <__ssputs_r+0x78>
 8003db2:	003e      	movs	r6, r7
 8003db4:	0032      	movs	r2, r6
 8003db6:	9903      	ldr	r1, [sp, #12]
 8003db8:	6820      	ldr	r0, [r4, #0]
 8003dba:	f000 fa9b 	bl	80042f4 <memmove>
 8003dbe:	2000      	movs	r0, #0
 8003dc0:	68a3      	ldr	r3, [r4, #8]
 8003dc2:	1b9b      	subs	r3, r3, r6
 8003dc4:	60a3      	str	r3, [r4, #8]
 8003dc6:	6823      	ldr	r3, [r4, #0]
 8003dc8:	199b      	adds	r3, r3, r6
 8003dca:	6023      	str	r3, [r4, #0]
 8003dcc:	b005      	add	sp, #20
 8003dce:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003dd0:	002a      	movs	r2, r5
 8003dd2:	9802      	ldr	r0, [sp, #8]
 8003dd4:	f000 fac8 	bl	8004368 <_realloc_r>
 8003dd8:	1e06      	subs	r6, r0, #0
 8003dda:	d1e0      	bne.n	8003d9e <__ssputs_r+0x62>
 8003ddc:	6921      	ldr	r1, [r4, #16]
 8003dde:	9802      	ldr	r0, [sp, #8]
 8003de0:	f7ff feb0 	bl	8003b44 <_free_r>
 8003de4:	230c      	movs	r3, #12
 8003de6:	2001      	movs	r0, #1
 8003de8:	9a02      	ldr	r2, [sp, #8]
 8003dea:	4240      	negs	r0, r0
 8003dec:	6013      	str	r3, [r2, #0]
 8003dee:	89a2      	ldrh	r2, [r4, #12]
 8003df0:	3334      	adds	r3, #52	@ 0x34
 8003df2:	4313      	orrs	r3, r2
 8003df4:	81a3      	strh	r3, [r4, #12]
 8003df6:	e7e9      	b.n	8003dcc <__ssputs_r+0x90>
 8003df8:	fffffb7f 	.word	0xfffffb7f

08003dfc <_svfiprintf_r>:
 8003dfc:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003dfe:	b0a1      	sub	sp, #132	@ 0x84
 8003e00:	9003      	str	r0, [sp, #12]
 8003e02:	001d      	movs	r5, r3
 8003e04:	898b      	ldrh	r3, [r1, #12]
 8003e06:	000f      	movs	r7, r1
 8003e08:	0016      	movs	r6, r2
 8003e0a:	061b      	lsls	r3, r3, #24
 8003e0c:	d511      	bpl.n	8003e32 <_svfiprintf_r+0x36>
 8003e0e:	690b      	ldr	r3, [r1, #16]
 8003e10:	2b00      	cmp	r3, #0
 8003e12:	d10e      	bne.n	8003e32 <_svfiprintf_r+0x36>
 8003e14:	2140      	movs	r1, #64	@ 0x40
 8003e16:	f7ff ff01 	bl	8003c1c <_malloc_r>
 8003e1a:	6038      	str	r0, [r7, #0]
 8003e1c:	6138      	str	r0, [r7, #16]
 8003e1e:	2800      	cmp	r0, #0
 8003e20:	d105      	bne.n	8003e2e <_svfiprintf_r+0x32>
 8003e22:	230c      	movs	r3, #12
 8003e24:	9a03      	ldr	r2, [sp, #12]
 8003e26:	6013      	str	r3, [r2, #0]
 8003e28:	2001      	movs	r0, #1
 8003e2a:	4240      	negs	r0, r0
 8003e2c:	e0cf      	b.n	8003fce <_svfiprintf_r+0x1d2>
 8003e2e:	2340      	movs	r3, #64	@ 0x40
 8003e30:	617b      	str	r3, [r7, #20]
 8003e32:	2300      	movs	r3, #0
 8003e34:	ac08      	add	r4, sp, #32
 8003e36:	6163      	str	r3, [r4, #20]
 8003e38:	3320      	adds	r3, #32
 8003e3a:	7663      	strb	r3, [r4, #25]
 8003e3c:	3310      	adds	r3, #16
 8003e3e:	76a3      	strb	r3, [r4, #26]
 8003e40:	9507      	str	r5, [sp, #28]
 8003e42:	0035      	movs	r5, r6
 8003e44:	782b      	ldrb	r3, [r5, #0]
 8003e46:	2b00      	cmp	r3, #0
 8003e48:	d001      	beq.n	8003e4e <_svfiprintf_r+0x52>
 8003e4a:	2b25      	cmp	r3, #37	@ 0x25
 8003e4c:	d148      	bne.n	8003ee0 <_svfiprintf_r+0xe4>
 8003e4e:	1bab      	subs	r3, r5, r6
 8003e50:	9305      	str	r3, [sp, #20]
 8003e52:	42b5      	cmp	r5, r6
 8003e54:	d00b      	beq.n	8003e6e <_svfiprintf_r+0x72>
 8003e56:	0032      	movs	r2, r6
 8003e58:	0039      	movs	r1, r7
 8003e5a:	9803      	ldr	r0, [sp, #12]
 8003e5c:	f7ff ff6e 	bl	8003d3c <__ssputs_r>
 8003e60:	3001      	adds	r0, #1
 8003e62:	d100      	bne.n	8003e66 <_svfiprintf_r+0x6a>
 8003e64:	e0ae      	b.n	8003fc4 <_svfiprintf_r+0x1c8>
 8003e66:	6963      	ldr	r3, [r4, #20]
 8003e68:	9a05      	ldr	r2, [sp, #20]
 8003e6a:	189b      	adds	r3, r3, r2
 8003e6c:	6163      	str	r3, [r4, #20]
 8003e6e:	782b      	ldrb	r3, [r5, #0]
 8003e70:	2b00      	cmp	r3, #0
 8003e72:	d100      	bne.n	8003e76 <_svfiprintf_r+0x7a>
 8003e74:	e0a6      	b.n	8003fc4 <_svfiprintf_r+0x1c8>
 8003e76:	2201      	movs	r2, #1
 8003e78:	2300      	movs	r3, #0
 8003e7a:	4252      	negs	r2, r2
 8003e7c:	6062      	str	r2, [r4, #4]
 8003e7e:	a904      	add	r1, sp, #16
 8003e80:	3254      	adds	r2, #84	@ 0x54
 8003e82:	1852      	adds	r2, r2, r1
 8003e84:	1c6e      	adds	r6, r5, #1
 8003e86:	6023      	str	r3, [r4, #0]
 8003e88:	60e3      	str	r3, [r4, #12]
 8003e8a:	60a3      	str	r3, [r4, #8]
 8003e8c:	7013      	strb	r3, [r2, #0]
 8003e8e:	65a3      	str	r3, [r4, #88]	@ 0x58
 8003e90:	4b54      	ldr	r3, [pc, #336]	@ (8003fe4 <_svfiprintf_r+0x1e8>)
 8003e92:	2205      	movs	r2, #5
 8003e94:	0018      	movs	r0, r3
 8003e96:	7831      	ldrb	r1, [r6, #0]
 8003e98:	9305      	str	r3, [sp, #20]
 8003e9a:	f000 fa51 	bl	8004340 <memchr>
 8003e9e:	1c75      	adds	r5, r6, #1
 8003ea0:	2800      	cmp	r0, #0
 8003ea2:	d11f      	bne.n	8003ee4 <_svfiprintf_r+0xe8>
 8003ea4:	6822      	ldr	r2, [r4, #0]
 8003ea6:	06d3      	lsls	r3, r2, #27
 8003ea8:	d504      	bpl.n	8003eb4 <_svfiprintf_r+0xb8>
 8003eaa:	2353      	movs	r3, #83	@ 0x53
 8003eac:	a904      	add	r1, sp, #16
 8003eae:	185b      	adds	r3, r3, r1
 8003eb0:	2120      	movs	r1, #32
 8003eb2:	7019      	strb	r1, [r3, #0]
 8003eb4:	0713      	lsls	r3, r2, #28
 8003eb6:	d504      	bpl.n	8003ec2 <_svfiprintf_r+0xc6>
 8003eb8:	2353      	movs	r3, #83	@ 0x53
 8003eba:	a904      	add	r1, sp, #16
 8003ebc:	185b      	adds	r3, r3, r1
 8003ebe:	212b      	movs	r1, #43	@ 0x2b
 8003ec0:	7019      	strb	r1, [r3, #0]
 8003ec2:	7833      	ldrb	r3, [r6, #0]
 8003ec4:	2b2a      	cmp	r3, #42	@ 0x2a
 8003ec6:	d016      	beq.n	8003ef6 <_svfiprintf_r+0xfa>
 8003ec8:	0035      	movs	r5, r6
 8003eca:	2100      	movs	r1, #0
 8003ecc:	200a      	movs	r0, #10
 8003ece:	68e3      	ldr	r3, [r4, #12]
 8003ed0:	782a      	ldrb	r2, [r5, #0]
 8003ed2:	1c6e      	adds	r6, r5, #1
 8003ed4:	3a30      	subs	r2, #48	@ 0x30
 8003ed6:	2a09      	cmp	r2, #9
 8003ed8:	d950      	bls.n	8003f7c <_svfiprintf_r+0x180>
 8003eda:	2900      	cmp	r1, #0
 8003edc:	d111      	bne.n	8003f02 <_svfiprintf_r+0x106>
 8003ede:	e017      	b.n	8003f10 <_svfiprintf_r+0x114>
 8003ee0:	3501      	adds	r5, #1
 8003ee2:	e7af      	b.n	8003e44 <_svfiprintf_r+0x48>
 8003ee4:	9b05      	ldr	r3, [sp, #20]
 8003ee6:	6822      	ldr	r2, [r4, #0]
 8003ee8:	1ac0      	subs	r0, r0, r3
 8003eea:	2301      	movs	r3, #1
 8003eec:	4083      	lsls	r3, r0
 8003eee:	4313      	orrs	r3, r2
 8003ef0:	002e      	movs	r6, r5
 8003ef2:	6023      	str	r3, [r4, #0]
 8003ef4:	e7cc      	b.n	8003e90 <_svfiprintf_r+0x94>
 8003ef6:	9b07      	ldr	r3, [sp, #28]
 8003ef8:	1d19      	adds	r1, r3, #4
 8003efa:	681b      	ldr	r3, [r3, #0]
 8003efc:	9107      	str	r1, [sp, #28]
 8003efe:	2b00      	cmp	r3, #0
 8003f00:	db01      	blt.n	8003f06 <_svfiprintf_r+0x10a>
 8003f02:	930b      	str	r3, [sp, #44]	@ 0x2c
 8003f04:	e004      	b.n	8003f10 <_svfiprintf_r+0x114>
 8003f06:	425b      	negs	r3, r3
 8003f08:	60e3      	str	r3, [r4, #12]
 8003f0a:	2302      	movs	r3, #2
 8003f0c:	4313      	orrs	r3, r2
 8003f0e:	6023      	str	r3, [r4, #0]
 8003f10:	782b      	ldrb	r3, [r5, #0]
 8003f12:	2b2e      	cmp	r3, #46	@ 0x2e
 8003f14:	d10c      	bne.n	8003f30 <_svfiprintf_r+0x134>
 8003f16:	786b      	ldrb	r3, [r5, #1]
 8003f18:	2b2a      	cmp	r3, #42	@ 0x2a
 8003f1a:	d134      	bne.n	8003f86 <_svfiprintf_r+0x18a>
 8003f1c:	9b07      	ldr	r3, [sp, #28]
 8003f1e:	3502      	adds	r5, #2
 8003f20:	1d1a      	adds	r2, r3, #4
 8003f22:	681b      	ldr	r3, [r3, #0]
 8003f24:	9207      	str	r2, [sp, #28]
 8003f26:	2b00      	cmp	r3, #0
 8003f28:	da01      	bge.n	8003f2e <_svfiprintf_r+0x132>
 8003f2a:	2301      	movs	r3, #1
 8003f2c:	425b      	negs	r3, r3
 8003f2e:	9309      	str	r3, [sp, #36]	@ 0x24
 8003f30:	4e2d      	ldr	r6, [pc, #180]	@ (8003fe8 <_svfiprintf_r+0x1ec>)
 8003f32:	2203      	movs	r2, #3
 8003f34:	0030      	movs	r0, r6
 8003f36:	7829      	ldrb	r1, [r5, #0]
 8003f38:	f000 fa02 	bl	8004340 <memchr>
 8003f3c:	2800      	cmp	r0, #0
 8003f3e:	d006      	beq.n	8003f4e <_svfiprintf_r+0x152>
 8003f40:	2340      	movs	r3, #64	@ 0x40
 8003f42:	1b80      	subs	r0, r0, r6
 8003f44:	4083      	lsls	r3, r0
 8003f46:	6822      	ldr	r2, [r4, #0]
 8003f48:	3501      	adds	r5, #1
 8003f4a:	4313      	orrs	r3, r2
 8003f4c:	6023      	str	r3, [r4, #0]
 8003f4e:	7829      	ldrb	r1, [r5, #0]
 8003f50:	2206      	movs	r2, #6
 8003f52:	4826      	ldr	r0, [pc, #152]	@ (8003fec <_svfiprintf_r+0x1f0>)
 8003f54:	1c6e      	adds	r6, r5, #1
 8003f56:	7621      	strb	r1, [r4, #24]
 8003f58:	f000 f9f2 	bl	8004340 <memchr>
 8003f5c:	2800      	cmp	r0, #0
 8003f5e:	d038      	beq.n	8003fd2 <_svfiprintf_r+0x1d6>
 8003f60:	4b23      	ldr	r3, [pc, #140]	@ (8003ff0 <_svfiprintf_r+0x1f4>)
 8003f62:	2b00      	cmp	r3, #0
 8003f64:	d122      	bne.n	8003fac <_svfiprintf_r+0x1b0>
 8003f66:	2207      	movs	r2, #7
 8003f68:	9b07      	ldr	r3, [sp, #28]
 8003f6a:	3307      	adds	r3, #7
 8003f6c:	4393      	bics	r3, r2
 8003f6e:	3308      	adds	r3, #8
 8003f70:	9307      	str	r3, [sp, #28]
 8003f72:	6963      	ldr	r3, [r4, #20]
 8003f74:	9a04      	ldr	r2, [sp, #16]
 8003f76:	189b      	adds	r3, r3, r2
 8003f78:	6163      	str	r3, [r4, #20]
 8003f7a:	e762      	b.n	8003e42 <_svfiprintf_r+0x46>
 8003f7c:	4343      	muls	r3, r0
 8003f7e:	0035      	movs	r5, r6
 8003f80:	2101      	movs	r1, #1
 8003f82:	189b      	adds	r3, r3, r2
 8003f84:	e7a4      	b.n	8003ed0 <_svfiprintf_r+0xd4>
 8003f86:	2300      	movs	r3, #0
 8003f88:	200a      	movs	r0, #10
 8003f8a:	0019      	movs	r1, r3
 8003f8c:	3501      	adds	r5, #1
 8003f8e:	6063      	str	r3, [r4, #4]
 8003f90:	782a      	ldrb	r2, [r5, #0]
 8003f92:	1c6e      	adds	r6, r5, #1
 8003f94:	3a30      	subs	r2, #48	@ 0x30
 8003f96:	2a09      	cmp	r2, #9
 8003f98:	d903      	bls.n	8003fa2 <_svfiprintf_r+0x1a6>
 8003f9a:	2b00      	cmp	r3, #0
 8003f9c:	d0c8      	beq.n	8003f30 <_svfiprintf_r+0x134>
 8003f9e:	9109      	str	r1, [sp, #36]	@ 0x24
 8003fa0:	e7c6      	b.n	8003f30 <_svfiprintf_r+0x134>
 8003fa2:	4341      	muls	r1, r0
 8003fa4:	0035      	movs	r5, r6
 8003fa6:	2301      	movs	r3, #1
 8003fa8:	1889      	adds	r1, r1, r2
 8003faa:	e7f1      	b.n	8003f90 <_svfiprintf_r+0x194>
 8003fac:	aa07      	add	r2, sp, #28
 8003fae:	9200      	str	r2, [sp, #0]
 8003fb0:	0021      	movs	r1, r4
 8003fb2:	003a      	movs	r2, r7
 8003fb4:	4b0f      	ldr	r3, [pc, #60]	@ (8003ff4 <_svfiprintf_r+0x1f8>)
 8003fb6:	9803      	ldr	r0, [sp, #12]
 8003fb8:	e000      	b.n	8003fbc <_svfiprintf_r+0x1c0>
 8003fba:	bf00      	nop
 8003fbc:	9004      	str	r0, [sp, #16]
 8003fbe:	9b04      	ldr	r3, [sp, #16]
 8003fc0:	3301      	adds	r3, #1
 8003fc2:	d1d6      	bne.n	8003f72 <_svfiprintf_r+0x176>
 8003fc4:	89bb      	ldrh	r3, [r7, #12]
 8003fc6:	980d      	ldr	r0, [sp, #52]	@ 0x34
 8003fc8:	065b      	lsls	r3, r3, #25
 8003fca:	d500      	bpl.n	8003fce <_svfiprintf_r+0x1d2>
 8003fcc:	e72c      	b.n	8003e28 <_svfiprintf_r+0x2c>
 8003fce:	b021      	add	sp, #132	@ 0x84
 8003fd0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003fd2:	aa07      	add	r2, sp, #28
 8003fd4:	9200      	str	r2, [sp, #0]
 8003fd6:	0021      	movs	r1, r4
 8003fd8:	003a      	movs	r2, r7
 8003fda:	4b06      	ldr	r3, [pc, #24]	@ (8003ff4 <_svfiprintf_r+0x1f8>)
 8003fdc:	9803      	ldr	r0, [sp, #12]
 8003fde:	f000 f87b 	bl	80040d8 <_printf_i>
 8003fe2:	e7eb      	b.n	8003fbc <_svfiprintf_r+0x1c0>
 8003fe4:	08004500 	.word	0x08004500
 8003fe8:	08004506 	.word	0x08004506
 8003fec:	0800450a 	.word	0x0800450a
 8003ff0:	00000000 	.word	0x00000000
 8003ff4:	08003d3d 	.word	0x08003d3d

08003ff8 <_printf_common>:
 8003ff8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8003ffa:	0016      	movs	r6, r2
 8003ffc:	9301      	str	r3, [sp, #4]
 8003ffe:	688a      	ldr	r2, [r1, #8]
 8004000:	690b      	ldr	r3, [r1, #16]
 8004002:	000c      	movs	r4, r1
 8004004:	9000      	str	r0, [sp, #0]
 8004006:	4293      	cmp	r3, r2
 8004008:	da00      	bge.n	800400c <_printf_common+0x14>
 800400a:	0013      	movs	r3, r2
 800400c:	0022      	movs	r2, r4
 800400e:	6033      	str	r3, [r6, #0]
 8004010:	3243      	adds	r2, #67	@ 0x43
 8004012:	7812      	ldrb	r2, [r2, #0]
 8004014:	2a00      	cmp	r2, #0
 8004016:	d001      	beq.n	800401c <_printf_common+0x24>
 8004018:	3301      	adds	r3, #1
 800401a:	6033      	str	r3, [r6, #0]
 800401c:	6823      	ldr	r3, [r4, #0]
 800401e:	069b      	lsls	r3, r3, #26
 8004020:	d502      	bpl.n	8004028 <_printf_common+0x30>
 8004022:	6833      	ldr	r3, [r6, #0]
 8004024:	3302      	adds	r3, #2
 8004026:	6033      	str	r3, [r6, #0]
 8004028:	6822      	ldr	r2, [r4, #0]
 800402a:	2306      	movs	r3, #6
 800402c:	0015      	movs	r5, r2
 800402e:	401d      	ands	r5, r3
 8004030:	421a      	tst	r2, r3
 8004032:	d027      	beq.n	8004084 <_printf_common+0x8c>
 8004034:	0023      	movs	r3, r4
 8004036:	3343      	adds	r3, #67	@ 0x43
 8004038:	781b      	ldrb	r3, [r3, #0]
 800403a:	1e5a      	subs	r2, r3, #1
 800403c:	4193      	sbcs	r3, r2
 800403e:	6822      	ldr	r2, [r4, #0]
 8004040:	0692      	lsls	r2, r2, #26
 8004042:	d430      	bmi.n	80040a6 <_printf_common+0xae>
 8004044:	0022      	movs	r2, r4
 8004046:	9901      	ldr	r1, [sp, #4]
 8004048:	9800      	ldr	r0, [sp, #0]
 800404a:	9d08      	ldr	r5, [sp, #32]
 800404c:	3243      	adds	r2, #67	@ 0x43
 800404e:	47a8      	blx	r5
 8004050:	3001      	adds	r0, #1
 8004052:	d025      	beq.n	80040a0 <_printf_common+0xa8>
 8004054:	2206      	movs	r2, #6
 8004056:	6823      	ldr	r3, [r4, #0]
 8004058:	2500      	movs	r5, #0
 800405a:	4013      	ands	r3, r2
 800405c:	2b04      	cmp	r3, #4
 800405e:	d105      	bne.n	800406c <_printf_common+0x74>
 8004060:	6833      	ldr	r3, [r6, #0]
 8004062:	68e5      	ldr	r5, [r4, #12]
 8004064:	1aed      	subs	r5, r5, r3
 8004066:	43eb      	mvns	r3, r5
 8004068:	17db      	asrs	r3, r3, #31
 800406a:	401d      	ands	r5, r3
 800406c:	68a3      	ldr	r3, [r4, #8]
 800406e:	6922      	ldr	r2, [r4, #16]
 8004070:	4293      	cmp	r3, r2
 8004072:	dd01      	ble.n	8004078 <_printf_common+0x80>
 8004074:	1a9b      	subs	r3, r3, r2
 8004076:	18ed      	adds	r5, r5, r3
 8004078:	2600      	movs	r6, #0
 800407a:	42b5      	cmp	r5, r6
 800407c:	d120      	bne.n	80040c0 <_printf_common+0xc8>
 800407e:	2000      	movs	r0, #0
 8004080:	e010      	b.n	80040a4 <_printf_common+0xac>
 8004082:	3501      	adds	r5, #1
 8004084:	68e3      	ldr	r3, [r4, #12]
 8004086:	6832      	ldr	r2, [r6, #0]
 8004088:	1a9b      	subs	r3, r3, r2
 800408a:	42ab      	cmp	r3, r5
 800408c:	ddd2      	ble.n	8004034 <_printf_common+0x3c>
 800408e:	0022      	movs	r2, r4
 8004090:	2301      	movs	r3, #1
 8004092:	9901      	ldr	r1, [sp, #4]
 8004094:	9800      	ldr	r0, [sp, #0]
 8004096:	9f08      	ldr	r7, [sp, #32]
 8004098:	3219      	adds	r2, #25
 800409a:	47b8      	blx	r7
 800409c:	3001      	adds	r0, #1
 800409e:	d1f0      	bne.n	8004082 <_printf_common+0x8a>
 80040a0:	2001      	movs	r0, #1
 80040a2:	4240      	negs	r0, r0
 80040a4:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 80040a6:	2030      	movs	r0, #48	@ 0x30
 80040a8:	18e1      	adds	r1, r4, r3
 80040aa:	3143      	adds	r1, #67	@ 0x43
 80040ac:	7008      	strb	r0, [r1, #0]
 80040ae:	0021      	movs	r1, r4
 80040b0:	1c5a      	adds	r2, r3, #1
 80040b2:	3145      	adds	r1, #69	@ 0x45
 80040b4:	7809      	ldrb	r1, [r1, #0]
 80040b6:	18a2      	adds	r2, r4, r2
 80040b8:	3243      	adds	r2, #67	@ 0x43
 80040ba:	3302      	adds	r3, #2
 80040bc:	7011      	strb	r1, [r2, #0]
 80040be:	e7c1      	b.n	8004044 <_printf_common+0x4c>
 80040c0:	0022      	movs	r2, r4
 80040c2:	2301      	movs	r3, #1
 80040c4:	9901      	ldr	r1, [sp, #4]
 80040c6:	9800      	ldr	r0, [sp, #0]
 80040c8:	9f08      	ldr	r7, [sp, #32]
 80040ca:	321a      	adds	r2, #26
 80040cc:	47b8      	blx	r7
 80040ce:	3001      	adds	r0, #1
 80040d0:	d0e6      	beq.n	80040a0 <_printf_common+0xa8>
 80040d2:	3601      	adds	r6, #1
 80040d4:	e7d1      	b.n	800407a <_printf_common+0x82>
	...

080040d8 <_printf_i>:
 80040d8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80040da:	b08b      	sub	sp, #44	@ 0x2c
 80040dc:	9206      	str	r2, [sp, #24]
 80040de:	000a      	movs	r2, r1
 80040e0:	3243      	adds	r2, #67	@ 0x43
 80040e2:	9307      	str	r3, [sp, #28]
 80040e4:	9005      	str	r0, [sp, #20]
 80040e6:	9203      	str	r2, [sp, #12]
 80040e8:	7e0a      	ldrb	r2, [r1, #24]
 80040ea:	000c      	movs	r4, r1
 80040ec:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 80040ee:	2a78      	cmp	r2, #120	@ 0x78
 80040f0:	d809      	bhi.n	8004106 <_printf_i+0x2e>
 80040f2:	2a62      	cmp	r2, #98	@ 0x62
 80040f4:	d80b      	bhi.n	800410e <_printf_i+0x36>
 80040f6:	2a00      	cmp	r2, #0
 80040f8:	d100      	bne.n	80040fc <_printf_i+0x24>
 80040fa:	e0bc      	b.n	8004276 <_printf_i+0x19e>
 80040fc:	497b      	ldr	r1, [pc, #492]	@ (80042ec <_printf_i+0x214>)
 80040fe:	9104      	str	r1, [sp, #16]
 8004100:	2a58      	cmp	r2, #88	@ 0x58
 8004102:	d100      	bne.n	8004106 <_printf_i+0x2e>
 8004104:	e090      	b.n	8004228 <_printf_i+0x150>
 8004106:	0025      	movs	r5, r4
 8004108:	3542      	adds	r5, #66	@ 0x42
 800410a:	702a      	strb	r2, [r5, #0]
 800410c:	e022      	b.n	8004154 <_printf_i+0x7c>
 800410e:	0010      	movs	r0, r2
 8004110:	3863      	subs	r0, #99	@ 0x63
 8004112:	2815      	cmp	r0, #21
 8004114:	d8f7      	bhi.n	8004106 <_printf_i+0x2e>
 8004116:	f7fb fff5 	bl	8000104 <__gnu_thumb1_case_shi>
 800411a:	0016      	.short	0x0016
 800411c:	fff6001f 	.word	0xfff6001f
 8004120:	fff6fff6 	.word	0xfff6fff6
 8004124:	001ffff6 	.word	0x001ffff6
 8004128:	fff6fff6 	.word	0xfff6fff6
 800412c:	fff6fff6 	.word	0xfff6fff6
 8004130:	003600a1 	.word	0x003600a1
 8004134:	fff60080 	.word	0xfff60080
 8004138:	00b2fff6 	.word	0x00b2fff6
 800413c:	0036fff6 	.word	0x0036fff6
 8004140:	fff6fff6 	.word	0xfff6fff6
 8004144:	0084      	.short	0x0084
 8004146:	0025      	movs	r5, r4
 8004148:	681a      	ldr	r2, [r3, #0]
 800414a:	3542      	adds	r5, #66	@ 0x42
 800414c:	1d11      	adds	r1, r2, #4
 800414e:	6019      	str	r1, [r3, #0]
 8004150:	6813      	ldr	r3, [r2, #0]
 8004152:	702b      	strb	r3, [r5, #0]
 8004154:	2301      	movs	r3, #1
 8004156:	e0a0      	b.n	800429a <_printf_i+0x1c2>
 8004158:	6818      	ldr	r0, [r3, #0]
 800415a:	6809      	ldr	r1, [r1, #0]
 800415c:	1d02      	adds	r2, r0, #4
 800415e:	060d      	lsls	r5, r1, #24
 8004160:	d50b      	bpl.n	800417a <_printf_i+0xa2>
 8004162:	6806      	ldr	r6, [r0, #0]
 8004164:	601a      	str	r2, [r3, #0]
 8004166:	2e00      	cmp	r6, #0
 8004168:	da03      	bge.n	8004172 <_printf_i+0x9a>
 800416a:	232d      	movs	r3, #45	@ 0x2d
 800416c:	9a03      	ldr	r2, [sp, #12]
 800416e:	4276      	negs	r6, r6
 8004170:	7013      	strb	r3, [r2, #0]
 8004172:	4b5e      	ldr	r3, [pc, #376]	@ (80042ec <_printf_i+0x214>)
 8004174:	270a      	movs	r7, #10
 8004176:	9304      	str	r3, [sp, #16]
 8004178:	e018      	b.n	80041ac <_printf_i+0xd4>
 800417a:	6806      	ldr	r6, [r0, #0]
 800417c:	601a      	str	r2, [r3, #0]
 800417e:	0649      	lsls	r1, r1, #25
 8004180:	d5f1      	bpl.n	8004166 <_printf_i+0x8e>
 8004182:	b236      	sxth	r6, r6
 8004184:	e7ef      	b.n	8004166 <_printf_i+0x8e>
 8004186:	6808      	ldr	r0, [r1, #0]
 8004188:	6819      	ldr	r1, [r3, #0]
 800418a:	c940      	ldmia	r1!, {r6}
 800418c:	0605      	lsls	r5, r0, #24
 800418e:	d402      	bmi.n	8004196 <_printf_i+0xbe>
 8004190:	0640      	lsls	r0, r0, #25
 8004192:	d500      	bpl.n	8004196 <_printf_i+0xbe>
 8004194:	b2b6      	uxth	r6, r6
 8004196:	6019      	str	r1, [r3, #0]
 8004198:	4b54      	ldr	r3, [pc, #336]	@ (80042ec <_printf_i+0x214>)
 800419a:	270a      	movs	r7, #10
 800419c:	9304      	str	r3, [sp, #16]
 800419e:	2a6f      	cmp	r2, #111	@ 0x6f
 80041a0:	d100      	bne.n	80041a4 <_printf_i+0xcc>
 80041a2:	3f02      	subs	r7, #2
 80041a4:	0023      	movs	r3, r4
 80041a6:	2200      	movs	r2, #0
 80041a8:	3343      	adds	r3, #67	@ 0x43
 80041aa:	701a      	strb	r2, [r3, #0]
 80041ac:	6863      	ldr	r3, [r4, #4]
 80041ae:	60a3      	str	r3, [r4, #8]
 80041b0:	2b00      	cmp	r3, #0
 80041b2:	db03      	blt.n	80041bc <_printf_i+0xe4>
 80041b4:	2104      	movs	r1, #4
 80041b6:	6822      	ldr	r2, [r4, #0]
 80041b8:	438a      	bics	r2, r1
 80041ba:	6022      	str	r2, [r4, #0]
 80041bc:	2e00      	cmp	r6, #0
 80041be:	d102      	bne.n	80041c6 <_printf_i+0xee>
 80041c0:	9d03      	ldr	r5, [sp, #12]
 80041c2:	2b00      	cmp	r3, #0
 80041c4:	d00c      	beq.n	80041e0 <_printf_i+0x108>
 80041c6:	9d03      	ldr	r5, [sp, #12]
 80041c8:	0030      	movs	r0, r6
 80041ca:	0039      	movs	r1, r7
 80041cc:	f7fc f82a 	bl	8000224 <__aeabi_uidivmod>
 80041d0:	9b04      	ldr	r3, [sp, #16]
 80041d2:	3d01      	subs	r5, #1
 80041d4:	5c5b      	ldrb	r3, [r3, r1]
 80041d6:	702b      	strb	r3, [r5, #0]
 80041d8:	0033      	movs	r3, r6
 80041da:	0006      	movs	r6, r0
 80041dc:	429f      	cmp	r7, r3
 80041de:	d9f3      	bls.n	80041c8 <_printf_i+0xf0>
 80041e0:	2f08      	cmp	r7, #8
 80041e2:	d109      	bne.n	80041f8 <_printf_i+0x120>
 80041e4:	6823      	ldr	r3, [r4, #0]
 80041e6:	07db      	lsls	r3, r3, #31
 80041e8:	d506      	bpl.n	80041f8 <_printf_i+0x120>
 80041ea:	6862      	ldr	r2, [r4, #4]
 80041ec:	6923      	ldr	r3, [r4, #16]
 80041ee:	429a      	cmp	r2, r3
 80041f0:	dc02      	bgt.n	80041f8 <_printf_i+0x120>
 80041f2:	2330      	movs	r3, #48	@ 0x30
 80041f4:	3d01      	subs	r5, #1
 80041f6:	702b      	strb	r3, [r5, #0]
 80041f8:	9b03      	ldr	r3, [sp, #12]
 80041fa:	1b5b      	subs	r3, r3, r5
 80041fc:	6123      	str	r3, [r4, #16]
 80041fe:	9b07      	ldr	r3, [sp, #28]
 8004200:	0021      	movs	r1, r4
 8004202:	9300      	str	r3, [sp, #0]
 8004204:	9805      	ldr	r0, [sp, #20]
 8004206:	9b06      	ldr	r3, [sp, #24]
 8004208:	aa09      	add	r2, sp, #36	@ 0x24
 800420a:	f7ff fef5 	bl	8003ff8 <_printf_common>
 800420e:	3001      	adds	r0, #1
 8004210:	d148      	bne.n	80042a4 <_printf_i+0x1cc>
 8004212:	2001      	movs	r0, #1
 8004214:	4240      	negs	r0, r0
 8004216:	b00b      	add	sp, #44	@ 0x2c
 8004218:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800421a:	2220      	movs	r2, #32
 800421c:	6809      	ldr	r1, [r1, #0]
 800421e:	430a      	orrs	r2, r1
 8004220:	6022      	str	r2, [r4, #0]
 8004222:	2278      	movs	r2, #120	@ 0x78
 8004224:	4932      	ldr	r1, [pc, #200]	@ (80042f0 <_printf_i+0x218>)
 8004226:	9104      	str	r1, [sp, #16]
 8004228:	0021      	movs	r1, r4
 800422a:	3145      	adds	r1, #69	@ 0x45
 800422c:	700a      	strb	r2, [r1, #0]
 800422e:	6819      	ldr	r1, [r3, #0]
 8004230:	6822      	ldr	r2, [r4, #0]
 8004232:	c940      	ldmia	r1!, {r6}
 8004234:	0610      	lsls	r0, r2, #24
 8004236:	d402      	bmi.n	800423e <_printf_i+0x166>
 8004238:	0650      	lsls	r0, r2, #25
 800423a:	d500      	bpl.n	800423e <_printf_i+0x166>
 800423c:	b2b6      	uxth	r6, r6
 800423e:	6019      	str	r1, [r3, #0]
 8004240:	07d3      	lsls	r3, r2, #31
 8004242:	d502      	bpl.n	800424a <_printf_i+0x172>
 8004244:	2320      	movs	r3, #32
 8004246:	4313      	orrs	r3, r2
 8004248:	6023      	str	r3, [r4, #0]
 800424a:	2e00      	cmp	r6, #0
 800424c:	d001      	beq.n	8004252 <_printf_i+0x17a>
 800424e:	2710      	movs	r7, #16
 8004250:	e7a8      	b.n	80041a4 <_printf_i+0xcc>
 8004252:	2220      	movs	r2, #32
 8004254:	6823      	ldr	r3, [r4, #0]
 8004256:	4393      	bics	r3, r2
 8004258:	6023      	str	r3, [r4, #0]
 800425a:	e7f8      	b.n	800424e <_printf_i+0x176>
 800425c:	681a      	ldr	r2, [r3, #0]
 800425e:	680d      	ldr	r5, [r1, #0]
 8004260:	1d10      	adds	r0, r2, #4
 8004262:	6949      	ldr	r1, [r1, #20]
 8004264:	6018      	str	r0, [r3, #0]
 8004266:	6813      	ldr	r3, [r2, #0]
 8004268:	062e      	lsls	r6, r5, #24
 800426a:	d501      	bpl.n	8004270 <_printf_i+0x198>
 800426c:	6019      	str	r1, [r3, #0]
 800426e:	e002      	b.n	8004276 <_printf_i+0x19e>
 8004270:	066d      	lsls	r5, r5, #25
 8004272:	d5fb      	bpl.n	800426c <_printf_i+0x194>
 8004274:	8019      	strh	r1, [r3, #0]
 8004276:	2300      	movs	r3, #0
 8004278:	9d03      	ldr	r5, [sp, #12]
 800427a:	6123      	str	r3, [r4, #16]
 800427c:	e7bf      	b.n	80041fe <_printf_i+0x126>
 800427e:	681a      	ldr	r2, [r3, #0]
 8004280:	1d11      	adds	r1, r2, #4
 8004282:	6019      	str	r1, [r3, #0]
 8004284:	6815      	ldr	r5, [r2, #0]
 8004286:	2100      	movs	r1, #0
 8004288:	0028      	movs	r0, r5
 800428a:	6862      	ldr	r2, [r4, #4]
 800428c:	f000 f858 	bl	8004340 <memchr>
 8004290:	2800      	cmp	r0, #0
 8004292:	d001      	beq.n	8004298 <_printf_i+0x1c0>
 8004294:	1b40      	subs	r0, r0, r5
 8004296:	6060      	str	r0, [r4, #4]
 8004298:	6863      	ldr	r3, [r4, #4]
 800429a:	6123      	str	r3, [r4, #16]
 800429c:	2300      	movs	r3, #0
 800429e:	9a03      	ldr	r2, [sp, #12]
 80042a0:	7013      	strb	r3, [r2, #0]
 80042a2:	e7ac      	b.n	80041fe <_printf_i+0x126>
 80042a4:	002a      	movs	r2, r5
 80042a6:	6923      	ldr	r3, [r4, #16]
 80042a8:	9906      	ldr	r1, [sp, #24]
 80042aa:	9805      	ldr	r0, [sp, #20]
 80042ac:	9d07      	ldr	r5, [sp, #28]
 80042ae:	47a8      	blx	r5
 80042b0:	3001      	adds	r0, #1
 80042b2:	d0ae      	beq.n	8004212 <_printf_i+0x13a>
 80042b4:	6823      	ldr	r3, [r4, #0]
 80042b6:	079b      	lsls	r3, r3, #30
 80042b8:	d415      	bmi.n	80042e6 <_printf_i+0x20e>
 80042ba:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80042bc:	68e0      	ldr	r0, [r4, #12]
 80042be:	4298      	cmp	r0, r3
 80042c0:	daa9      	bge.n	8004216 <_printf_i+0x13e>
 80042c2:	0018      	movs	r0, r3
 80042c4:	e7a7      	b.n	8004216 <_printf_i+0x13e>
 80042c6:	0022      	movs	r2, r4
 80042c8:	2301      	movs	r3, #1
 80042ca:	9906      	ldr	r1, [sp, #24]
 80042cc:	9805      	ldr	r0, [sp, #20]
 80042ce:	9e07      	ldr	r6, [sp, #28]
 80042d0:	3219      	adds	r2, #25
 80042d2:	47b0      	blx	r6
 80042d4:	3001      	adds	r0, #1
 80042d6:	d09c      	beq.n	8004212 <_printf_i+0x13a>
 80042d8:	3501      	adds	r5, #1
 80042da:	68e3      	ldr	r3, [r4, #12]
 80042dc:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80042de:	1a9b      	subs	r3, r3, r2
 80042e0:	42ab      	cmp	r3, r5
 80042e2:	dcf0      	bgt.n	80042c6 <_printf_i+0x1ee>
 80042e4:	e7e9      	b.n	80042ba <_printf_i+0x1e2>
 80042e6:	2500      	movs	r5, #0
 80042e8:	e7f7      	b.n	80042da <_printf_i+0x202>
 80042ea:	46c0      	nop			@ (mov r8, r8)
 80042ec:	08004511 	.word	0x08004511
 80042f0:	08004522 	.word	0x08004522

080042f4 <memmove>:
 80042f4:	b510      	push	{r4, lr}
 80042f6:	4288      	cmp	r0, r1
 80042f8:	d806      	bhi.n	8004308 <memmove+0x14>
 80042fa:	2300      	movs	r3, #0
 80042fc:	429a      	cmp	r2, r3
 80042fe:	d008      	beq.n	8004312 <memmove+0x1e>
 8004300:	5ccc      	ldrb	r4, [r1, r3]
 8004302:	54c4      	strb	r4, [r0, r3]
 8004304:	3301      	adds	r3, #1
 8004306:	e7f9      	b.n	80042fc <memmove+0x8>
 8004308:	188b      	adds	r3, r1, r2
 800430a:	4298      	cmp	r0, r3
 800430c:	d2f5      	bcs.n	80042fa <memmove+0x6>
 800430e:	3a01      	subs	r2, #1
 8004310:	d200      	bcs.n	8004314 <memmove+0x20>
 8004312:	bd10      	pop	{r4, pc}
 8004314:	5c8b      	ldrb	r3, [r1, r2]
 8004316:	5483      	strb	r3, [r0, r2]
 8004318:	e7f9      	b.n	800430e <memmove+0x1a>
	...

0800431c <_sbrk_r>:
 800431c:	2300      	movs	r3, #0
 800431e:	b570      	push	{r4, r5, r6, lr}
 8004320:	4d06      	ldr	r5, [pc, #24]	@ (800433c <_sbrk_r+0x20>)
 8004322:	0004      	movs	r4, r0
 8004324:	0008      	movs	r0, r1
 8004326:	602b      	str	r3, [r5, #0]
 8004328:	f7fc fe2c 	bl	8000f84 <_sbrk>
 800432c:	1c43      	adds	r3, r0, #1
 800432e:	d103      	bne.n	8004338 <_sbrk_r+0x1c>
 8004330:	682b      	ldr	r3, [r5, #0]
 8004332:	2b00      	cmp	r3, #0
 8004334:	d000      	beq.n	8004338 <_sbrk_r+0x1c>
 8004336:	6023      	str	r3, [r4, #0]
 8004338:	bd70      	pop	{r4, r5, r6, pc}
 800433a:	46c0      	nop			@ (mov r8, r8)
 800433c:	20000304 	.word	0x20000304

08004340 <memchr>:
 8004340:	b2c9      	uxtb	r1, r1
 8004342:	1882      	adds	r2, r0, r2
 8004344:	4290      	cmp	r0, r2
 8004346:	d101      	bne.n	800434c <memchr+0xc>
 8004348:	2000      	movs	r0, #0
 800434a:	4770      	bx	lr
 800434c:	7803      	ldrb	r3, [r0, #0]
 800434e:	428b      	cmp	r3, r1
 8004350:	d0fb      	beq.n	800434a <memchr+0xa>
 8004352:	3001      	adds	r0, #1
 8004354:	e7f6      	b.n	8004344 <memchr+0x4>

08004356 <memcpy>:
 8004356:	2300      	movs	r3, #0
 8004358:	b510      	push	{r4, lr}
 800435a:	429a      	cmp	r2, r3
 800435c:	d100      	bne.n	8004360 <memcpy+0xa>
 800435e:	bd10      	pop	{r4, pc}
 8004360:	5ccc      	ldrb	r4, [r1, r3]
 8004362:	54c4      	strb	r4, [r0, r3]
 8004364:	3301      	adds	r3, #1
 8004366:	e7f8      	b.n	800435a <memcpy+0x4>

08004368 <_realloc_r>:
 8004368:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800436a:	0006      	movs	r6, r0
 800436c:	000c      	movs	r4, r1
 800436e:	0015      	movs	r5, r2
 8004370:	2900      	cmp	r1, #0
 8004372:	d105      	bne.n	8004380 <_realloc_r+0x18>
 8004374:	0011      	movs	r1, r2
 8004376:	f7ff fc51 	bl	8003c1c <_malloc_r>
 800437a:	0004      	movs	r4, r0
 800437c:	0020      	movs	r0, r4
 800437e:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8004380:	2a00      	cmp	r2, #0
 8004382:	d103      	bne.n	800438c <_realloc_r+0x24>
 8004384:	f7ff fbde 	bl	8003b44 <_free_r>
 8004388:	2400      	movs	r4, #0
 800438a:	e7f7      	b.n	800437c <_realloc_r+0x14>
 800438c:	f000 f81b 	bl	80043c6 <_malloc_usable_size_r>
 8004390:	0007      	movs	r7, r0
 8004392:	4285      	cmp	r5, r0
 8004394:	d802      	bhi.n	800439c <_realloc_r+0x34>
 8004396:	0843      	lsrs	r3, r0, #1
 8004398:	42ab      	cmp	r3, r5
 800439a:	d3ef      	bcc.n	800437c <_realloc_r+0x14>
 800439c:	0029      	movs	r1, r5
 800439e:	0030      	movs	r0, r6
 80043a0:	f7ff fc3c 	bl	8003c1c <_malloc_r>
 80043a4:	9001      	str	r0, [sp, #4]
 80043a6:	2800      	cmp	r0, #0
 80043a8:	d0ee      	beq.n	8004388 <_realloc_r+0x20>
 80043aa:	002a      	movs	r2, r5
 80043ac:	42bd      	cmp	r5, r7
 80043ae:	d900      	bls.n	80043b2 <_realloc_r+0x4a>
 80043b0:	003a      	movs	r2, r7
 80043b2:	0021      	movs	r1, r4
 80043b4:	9801      	ldr	r0, [sp, #4]
 80043b6:	f7ff ffce 	bl	8004356 <memcpy>
 80043ba:	0021      	movs	r1, r4
 80043bc:	0030      	movs	r0, r6
 80043be:	f7ff fbc1 	bl	8003b44 <_free_r>
 80043c2:	9c01      	ldr	r4, [sp, #4]
 80043c4:	e7da      	b.n	800437c <_realloc_r+0x14>

080043c6 <_malloc_usable_size_r>:
 80043c6:	1f0b      	subs	r3, r1, #4
 80043c8:	681b      	ldr	r3, [r3, #0]
 80043ca:	1f18      	subs	r0, r3, #4
 80043cc:	2b00      	cmp	r3, #0
 80043ce:	da01      	bge.n	80043d4 <_malloc_usable_size_r+0xe>
 80043d0:	580b      	ldr	r3, [r1, r0]
 80043d2:	18c0      	adds	r0, r0, r3
 80043d4:	4770      	bx	lr
	...

080043d8 <_init>:
 80043d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80043da:	46c0      	nop			@ (mov r8, r8)
 80043dc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80043de:	bc08      	pop	{r3}
 80043e0:	469e      	mov	lr, r3
 80043e2:	4770      	bx	lr

080043e4 <_fini>:
 80043e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80043e6:	46c0      	nop			@ (mov r8, r8)
 80043e8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80043ea:	bc08      	pop	{r3}
 80043ec:	469e      	mov	lr, r3
 80043ee:	4770      	bx	lr
